source(net.jodah.lyra.internal.util.Exceptions, isRetryable, 45, $stack10 = 1, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:60), at net.jodah.lyra.internal.util.Exceptions.isRetryable(Exceptions.java:45)]) => sink(net.jodah.lyra.internal.util.Exceptions, isRetryable, 45, $stack10 = 1, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:60), at net.jodah.lyra.internal.util.Exceptions.isRetryable(Exceptions.java:45)])

source(net.jodah.lyra.internal.util.Exceptions, isRetryable, 45, $stack10 = 0, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:60), at net.jodah.lyra.internal.util.Exceptions.isRetryable(Exceptions.java:45)]) => sink(net.jodah.lyra.internal.util.Exceptions, isRetryable, 45, $stack10 = 0, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:60), at net.jodah.lyra.internal.util.Exceptions.isRetryable(Exceptions.java:45)])

source(net.jodah.lyra.internal.util.Exceptions, isRetryable, 43, $stack8 = e instanceof com.rabbitmq.client.PossibleAuthenticationFailureException, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:60), at net.jodah.lyra.internal.util.Exceptions.isRetryable(Exceptions.java:43)]) => sink(net.jodah.lyra.internal.util.Exceptions, isRetryable, 43, $stack8 = e instanceof com.rabbitmq.client.PossibleAuthenticationFailureException, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:60), at net.jodah.lyra.internal.util.Exceptions.isRetryable(Exceptions.java:43)])

source(net.jodah.lyra.internal.RetryableResource, callWithRetries, 42, recovery = $stack15, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:42)]) => sink(net.jodah.lyra.internal.RetryableResource, callWithRetries, 42, recovery = $stack15, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:42)])

source(java.lang.Throwable, getCause, 415, $stack1 = l0.<java.lang.Throwable: java.lang.Throwable cause>, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:60), at net.jodah.lyra.internal.util.Exceptions.isRetryable(Exceptions.java:41), at java.lang.Throwable.getCause(Throwable.java:415)]) => sink(java.lang.Throwable, getCause, 415, $stack1 = l0.<java.lang.Throwable: java.lang.Throwable cause>, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:60), at net.jodah.lyra.internal.util.Exceptions.isRetryable(Exceptions.java:41), at java.lang.Throwable.getCause(Throwable.java:415)])

source(java.lang.Throwable, getCause, 415, $stack2 = null, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:60), at net.jodah.lyra.internal.util.Exceptions.isRetryable(Exceptions.java:41), at java.lang.Throwable.getCause(Throwable.java:415)]) => sink(java.lang.Throwable, getCause, 415, $stack2 = null, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:60), at net.jodah.lyra.internal.util.Exceptions.isRetryable(Exceptions.java:41), at java.lang.Throwable.getCause(Throwable.java:415)])

source(java.lang.Throwable, getCause, 415, $stack2 = l0.<java.lang.Throwable: java.lang.Throwable cause>, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:60), at net.jodah.lyra.internal.util.Exceptions.isRetryable(Exceptions.java:41), at java.lang.Throwable.getCause(Throwable.java:415)]) => sink(java.lang.Throwable, getCause, 415, $stack2 = l0.<java.lang.Throwable: java.lang.Throwable cause>, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:60), at net.jodah.lyra.internal.util.Exceptions.isRetryable(Exceptions.java:41), at java.lang.Throwable.getCause(Throwable.java:415)])

source(net.jodah.lyra.internal.util.Exceptions, isRetryable, 99, command = (com.rabbitmq.client.Command) reason, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:60), at net.jodah.lyra.internal.util.Exceptions.isRetryable(Exceptions.java:45), at net.jodah.lyra.internal.util.Exceptions.isRetryable(Exceptions.java:99)]) => sink(net.jodah.lyra.internal.util.Exceptions, isRetryable, 99, command = (com.rabbitmq.client.Command) reason, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:60), at net.jodah.lyra.internal.util.Exceptions.isRetryable(Exceptions.java:45), at net.jodah.lyra.internal.util.Exceptions.isRetryable(Exceptions.java:99)])

source(net.jodah.lyra.internal.util.Exceptions, isRetryable, 103, $stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:60), at net.jodah.lyra.internal.util.Exceptions.isRetryable(Exceptions.java:45), at net.jodah.lyra.internal.util.Exceptions.isRetryable(Exceptions.java:103)]) => sink(net.jodah.lyra.internal.util.Exceptions, isRetryable, 103, $stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:60), at net.jodah.lyra.internal.util.Exceptions.isRetryable(Exceptions.java:45), at net.jodah.lyra.internal.util.Exceptions.isRetryable(Exceptions.java:103)])

source(net.jodah.lyra.internal.util.Exceptions, isRetryable, 101, $stack8 = method instanceof com.rabbitmq.client.AMQP$Connection$Close, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:60), at net.jodah.lyra.internal.util.Exceptions.isRetryable(Exceptions.java:45), at net.jodah.lyra.internal.util.Exceptions.isRetryable(Exceptions.java:101)]) => sink(net.jodah.lyra.internal.util.Exceptions, isRetryable, 101, $stack8 = method instanceof com.rabbitmq.client.AMQP$Connection$Close, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:60), at net.jodah.lyra.internal.util.Exceptions.isRetryable(Exceptions.java:45), at net.jodah.lyra.internal.util.Exceptions.isRetryable(Exceptions.java:101)])

source(net.jodah.lyra.internal.RecurringStats, isPolicyExceeded, 94, $stack15 = this.<net.jodah.lyra.internal.RecurringStats: int attemptCount>, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:78), at net.jodah.lyra.internal.RecurringStats.isPolicyExceeded(RecurringStats.java:94)]) => sink(net.jodah.lyra.internal.RecurringStats, isPolicyExceeded, 94, $stack15 = this.<net.jodah.lyra.internal.RecurringStats: int attemptCount>, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:78), at net.jodah.lyra.internal.RecurringStats.isPolicyExceeded(RecurringStats.java:94)])

source(net.jodah.lyra.internal.util.Exceptions, isRetryable, 40, $stack2 = e instanceof java.net.SocketTimeoutException, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:60), at net.jodah.lyra.internal.util.Exceptions.isRetryable(Exceptions.java:40)]) => sink(net.jodah.lyra.internal.util.Exceptions, isRetryable, 40, $stack2 = e instanceof java.net.SocketTimeoutException, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:60), at net.jodah.lyra.internal.util.Exceptions.isRetryable(Exceptions.java:40)])

source(net.jodah.lyra.internal.RecurringStats, isPolicyExceeded, 94, $stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:78), at net.jodah.lyra.internal.RecurringStats.isPolicyExceeded(RecurringStats.java:94)]) => sink(net.jodah.lyra.internal.RecurringStats, isPolicyExceeded, 94, $stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:78), at net.jodah.lyra.internal.RecurringStats.isPolicyExceeded(RecurringStats.java:94)])

source(net.jodah.lyra.internal.RecurringStats, isPolicyExceeded, 94, $stack11 = $stack10 cmp $stack9, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:78), at net.jodah.lyra.internal.RecurringStats.isPolicyExceeded(RecurringStats.java:94)]) => sink(net.jodah.lyra.internal.RecurringStats, isPolicyExceeded, 94, $stack11 = $stack10 cmp $stack9, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:78), at net.jodah.lyra.internal.RecurringStats.isPolicyExceeded(RecurringStats.java:94)])

source(net.jodah.lyra.internal.RecurringStats, isPolicyExceeded, 94, $stack6 = 1, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:78), at net.jodah.lyra.internal.RecurringStats.isPolicyExceeded(RecurringStats.java:94)]) => sink(net.jodah.lyra.internal.RecurringStats, isPolicyExceeded, 94, $stack6 = 1, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:78), at net.jodah.lyra.internal.RecurringStats.isPolicyExceeded(RecurringStats.java:94)])

source(net.jodah.lyra.internal.util.Exceptions, isRetryable, 42, $stack3 = e instanceof java.net.ConnectException, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:60), at net.jodah.lyra.internal.util.Exceptions.isRetryable(Exceptions.java:42)]) => sink(net.jodah.lyra.internal.util.Exceptions, isRetryable, 42, $stack3 = e instanceof java.net.ConnectException, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:60), at net.jodah.lyra.internal.util.Exceptions.isRetryable(Exceptions.java:42)])

source(net.jodah.lyra.internal.util.Exceptions, isRetryable, 42, $stack5 = e instanceof com.rabbitmq.client.AlreadyClosedException, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:60), at net.jodah.lyra.internal.util.Exceptions.isRetryable(Exceptions.java:42)]) => sink(net.jodah.lyra.internal.util.Exceptions, isRetryable, 42, $stack5 = e instanceof com.rabbitmq.client.AlreadyClosedException, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:60), at net.jodah.lyra.internal.util.Exceptions.isRetryable(Exceptions.java:42)])

source(net.jodah.lyra.internal.RecurringStats, isPolicyExceeded, 94, $stack14 = this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts>, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:78), at net.jodah.lyra.internal.RecurringStats.isPolicyExceeded(RecurringStats.java:94)]) => sink(net.jodah.lyra.internal.RecurringStats, isPolicyExceeded, 94, $stack14 = this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts>, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:78), at net.jodah.lyra.internal.RecurringStats.isPolicyExceeded(RecurringStats.java:94)])

source(net.jodah.lyra.internal.RecurringStats, isPolicyExceeded, 94, $stack16 = 1, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:78), at net.jodah.lyra.internal.RecurringStats.isPolicyExceeded(RecurringStats.java:94)]) => sink(net.jodah.lyra.internal.RecurringStats, isPolicyExceeded, 94, $stack16 = 1, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:78), at net.jodah.lyra.internal.RecurringStats.isPolicyExceeded(RecurringStats.java:94)])

source(net.jodah.lyra.internal.RecurringStats, isPolicyExceeded, 94, $stack16 = 0, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:78), at net.jodah.lyra.internal.RecurringStats.isPolicyExceeded(RecurringStats.java:94)]) => sink(net.jodah.lyra.internal.RecurringStats, isPolicyExceeded, 94, $stack16 = 0, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:78), at net.jodah.lyra.internal.RecurringStats.isPolicyExceeded(RecurringStats.java:94)])

source(net.jodah.lyra.internal.RecurringStats, isPolicyExceeded, 94, $stack12 = 1, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:78), at net.jodah.lyra.internal.RecurringStats.isPolicyExceeded(RecurringStats.java:94)]) => sink(net.jodah.lyra.internal.RecurringStats, isPolicyExceeded, 94, $stack12 = 1, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:78), at net.jodah.lyra.internal.RecurringStats.isPolicyExceeded(RecurringStats.java:94)])

source(net.jodah.lyra.internal.RecurringStats, isPolicyExceeded, 94, $stack8 = this.<net.jodah.lyra.internal.RecurringStats: long startTime>, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:78), at net.jodah.lyra.internal.RecurringStats.isPolicyExceeded(RecurringStats.java:94)]) => sink(net.jodah.lyra.internal.RecurringStats, isPolicyExceeded, 94, $stack8 = this.<net.jodah.lyra.internal.RecurringStats: long startTime>, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:78), at net.jodah.lyra.internal.RecurringStats.isPolicyExceeded(RecurringStats.java:94)])

source(net.jodah.lyra.internal.RecurringStats, isPolicyExceeded, 94, $stack10 = $stack7 - $stack8, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:78), at net.jodah.lyra.internal.RecurringStats.isPolicyExceeded(RecurringStats.java:94)]) => sink(net.jodah.lyra.internal.RecurringStats, isPolicyExceeded, 94, $stack10 = $stack7 - $stack8, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:78), at net.jodah.lyra.internal.RecurringStats.isPolicyExceeded(RecurringStats.java:94)])

source(net.jodah.lyra.internal.RecurringStats, isPolicyExceeded, 94, $stack6 = 0, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:78), at net.jodah.lyra.internal.RecurringStats.isPolicyExceeded(RecurringStats.java:94)]) => sink(net.jodah.lyra.internal.RecurringStats, isPolicyExceeded, 94, $stack6 = 0, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:78), at net.jodah.lyra.internal.RecurringStats.isPolicyExceeded(RecurringStats.java:94)])

source(net.jodah.lyra.internal.RecurringStats, isPolicyExceeded, 94, $stack12 = 0, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:78), at net.jodah.lyra.internal.RecurringStats.isPolicyExceeded(RecurringStats.java:94)]) => sink(net.jodah.lyra.internal.RecurringStats, isPolicyExceeded, 94, $stack12 = 0, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:78), at net.jodah.lyra.internal.RecurringStats.isPolicyExceeded(RecurringStats.java:94)])

source(net.jodah.lyra.internal.RecurringStats, isPolicyExceeded, 92, $stack3 = this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts>, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:78), at net.jodah.lyra.internal.RecurringStats.isPolicyExceeded(RecurringStats.java:92)]) => sink(net.jodah.lyra.internal.RecurringStats, isPolicyExceeded, 92, $stack3 = this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts>, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:78), at net.jodah.lyra.internal.RecurringStats.isPolicyExceeded(RecurringStats.java:92)])

source(net.jodah.lyra.internal.RecurringStats, isPolicyExceeded, 92, withinMaxRetries = $stack16, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:78), at net.jodah.lyra.internal.RecurringStats.isPolicyExceeded(RecurringStats.java:92)]) => sink(net.jodah.lyra.internal.RecurringStats, isPolicyExceeded, 92, withinMaxRetries = $stack16, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:78), at net.jodah.lyra.internal.RecurringStats.isPolicyExceeded(RecurringStats.java:92)])

source(net.jodah.lyra.internal.RetryableResource, callWithRetries, 63, $stack42 = 1, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:63)]) => sink(net.jodah.lyra.internal.RetryableResource, callWithRetries, 63, $stack42 = 1, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:63)])

source(net.jodah.lyra.internal.util.Exceptions, isRetryable, 98, $stack6 = reason instanceof com.rabbitmq.client.Command, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:60), at net.jodah.lyra.internal.util.Exceptions.isRetryable(Exceptions.java:45), at net.jodah.lyra.internal.util.Exceptions.isRetryable(Exceptions.java:98)]) => sink(net.jodah.lyra.internal.util.Exceptions, isRetryable, 98, $stack6 = reason instanceof com.rabbitmq.client.Command, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:60), at net.jodah.lyra.internal.util.Exceptions.isRetryable(Exceptions.java:45), at net.jodah.lyra.internal.util.Exceptions.isRetryable(Exceptions.java:98)])

source(net.jodah.lyra.internal.util.Exceptions, isRetryable, 102, $stack14 = (com.rabbitmq.client.AMQP$Connection$Close) method, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:60), at net.jodah.lyra.internal.util.Exceptions.isRetryable(Exceptions.java:45), at net.jodah.lyra.internal.util.Exceptions.isRetryable(Exceptions.java:102)]) => sink(net.jodah.lyra.internal.util.Exceptions, isRetryable, 102, $stack14 = (com.rabbitmq.client.AMQP$Connection$Close) method, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:60), at net.jodah.lyra.internal.util.Exceptions.isRetryable(Exceptions.java:45), at net.jodah.lyra.internal.util.Exceptions.isRetryable(Exceptions.java:102)])

source(net.jodah.lyra.internal.util.Exceptions, isRetryable, 104, $stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:60), at net.jodah.lyra.internal.util.Exceptions.isRetryable(Exceptions.java:45), at net.jodah.lyra.internal.util.Exceptions.isRetryable(Exceptions.java:104)]) => sink(net.jodah.lyra.internal.util.Exceptions, isRetryable, 104, $stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:60), at net.jodah.lyra.internal.util.Exceptions.isRetryable(Exceptions.java:45), at net.jodah.lyra.internal.util.Exceptions.isRetryable(Exceptions.java:104)])

source(net.jodah.lyra.internal.util.Exceptions, isRetryable, 41, $stack7 = $stack6 instanceof java.io.EOFException, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:60), at net.jodah.lyra.internal.util.Exceptions.isRetryable(Exceptions.java:41)]) => sink(net.jodah.lyra.internal.util.Exceptions, isRetryable, 41, $stack7 = $stack6 instanceof java.io.EOFException, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:60), at net.jodah.lyra.internal.util.Exceptions.isRetryable(Exceptions.java:41)])

source(net.jodah.lyra.internal.RecurringStats, isPolicyExceeded, 93, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:78), at net.jodah.lyra.internal.RecurringStats.isPolicyExceeded(RecurringStats.java:93)]) => sink(net.jodah.lyra.internal.RecurringStats, isPolicyExceeded, 93, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:78), at net.jodah.lyra.internal.RecurringStats.isPolicyExceeded(RecurringStats.java:93)])

source(net.jodah.lyra.internal.RecurringStats, isPolicyExceeded, 93, $stack5 = $stack4 cmp -1L, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:78), at net.jodah.lyra.internal.RecurringStats.isPolicyExceeded(RecurringStats.java:93)]) => sink(net.jodah.lyra.internal.RecurringStats, isPolicyExceeded, 93, $stack5 = $stack4 cmp -1L, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:78), at net.jodah.lyra.internal.RecurringStats.isPolicyExceeded(RecurringStats.java:93)])

source(net.jodah.lyra.internal.RecurringStats, isPolicyExceeded, 93, withinMaxDuration = $stack12, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:78), at net.jodah.lyra.internal.RecurringStats.isPolicyExceeded(RecurringStats.java:93)]) => sink(net.jodah.lyra.internal.RecurringStats, isPolicyExceeded, 93, withinMaxDuration = $stack12, [at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:78), at net.jodah.lyra.internal.RecurringStats.isPolicyExceeded(RecurringStats.java:93)])

List(Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack8 = this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier>,77,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack8 = this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier>, 77)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack20 = this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier>,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack20 = this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier>, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack22 = $stack21 * $stack20,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack22 = $stack21 * $stack20, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack23 = (long) $stack22,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack23 = (long) $stack22, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack25 = staticinvoke <java.lang.Math: long min(long,long)>($stack24, $stack23),78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack25 = staticinvoke <java.lang.Math: long min(long,long)>($stack24, $stack23), 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack25,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack25, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack5 = $stack4 cmp -1L,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack5 = $stack4 cmp -1L, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack5 == 0 goto $stack12 = 1,93,SinkNode, path: ))

List(Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1), 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack5 = $stack4 cmp -1L,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack5 = $stack4 cmp -1L, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack5 == 0 goto $stack12 = 1,93,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack6 = reason instanceof com.rabbitmq.client.Command,98,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack6 = reason instanceof com.rabbitmq.client.Command, 98)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,if $stack6 == 0 goto return 0,98,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack11 = $stack10 cmp $stack9,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack11 = $stack10 cmp $stack9, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack11 >= 0 goto $stack12 = 0,94,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack5 = 0L,39,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long interval> = $stack5, 28)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long interval> = $stack5,28,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long interval> = $stack5, 28)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack18 = this.<net.jodah.lyra.internal.RecurringStats: long interval>,31,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack18 = this.<net.jodah.lyra.internal.RecurringStats: long interval>, 31)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack18,31,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack18, 31)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack19 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack19 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack11 = $stack10 cmp $stack9,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack11 = $stack10 cmp $stack9, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack11 >= 0 goto $stack12 = 0,94,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack16 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: net.jodah.lyra.util.Duration getMaxInterval()>(),41,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack16 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: net.jodah.lyra.util.Duration getMaxInterval()>(), 41)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack17 = virtualinvoke $stack16.<net.jodah.lyra.util.Duration: long toNanos()>(),41,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack17 = virtualinvoke $stack16.<net.jodah.lyra.util.Duration: long toNanos()>(), 41)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxInterval> = $stack17,41,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxInterval> = $stack17, 41)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack24 = this.<net.jodah.lyra.internal.RecurringStats: long maxInterval>,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack24 = this.<net.jodah.lyra.internal.RecurringStats: long maxInterval>, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack25 = staticinvoke <java.lang.Math: long min(long,long)>($stack24, $stack23),78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack25 = staticinvoke <java.lang.Math: long min(long,long)>($stack24, $stack23), 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack25,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack25, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack5 = $stack4 cmp -1L,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack5 = $stack4 cmp -1L, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack5 == 0 goto $stack12 = 1,93,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier> = -1.0,18,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier> = -1.0, 18)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack20 = this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier>,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack20 = this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier>, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack22 = $stack21 * $stack20,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack22 = $stack21 * $stack20, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack23 = (long) $stack22,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack23 = (long) $stack22, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack25 = staticinvoke <java.lang.Math: long min(long,long)>($stack24, $stack23),78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack25 = staticinvoke <java.lang.Math: long min(long,long)>($stack24, $stack23), 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack25,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack25, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack5 = $stack4 cmp -1L,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack5 = $stack4 cmp -1L, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack5 == 0 goto $stack12 = 1,93,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method,104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method, 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(), 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack13 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack12),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,$stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse),45,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,if $stack9 == 0 goto $stack10 = 0,45,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack5 = $stack4 cmp -1L,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack5 = $stack4 cmp -1L, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack5 == 0 goto $stack12 = 1,93,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack8 = this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier>,77,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack8 = this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier>, 77)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack20 = this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier>,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack20 = this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier>, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack22 = $stack21 * $stack20,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack22 = $stack21 * $stack20, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack23 = (long) $stack22,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack23 = (long) $stack22, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack25 = staticinvoke <java.lang.Math: long min(long,long)>($stack24, $stack23),78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack25 = staticinvoke <java.lang.Math: long min(long,long)>($stack24, $stack23), 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack25,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack25, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack11 = $stack10 cmp $stack9,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack11 = $stack10 cmp $stack9, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack11 >= 0 goto $stack12 = 0,94,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,$stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse),45,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,if $stack9 == 0 goto $stack10 = 0,45,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack3 = this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts>,92,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack3 = this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts>, 92)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack3 == -1 goto $stack16 = 1,92,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,withinMaxRetries = $stack16,92,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, withinMaxRetries = $stack16, 92)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if withinMaxRetries == 0 goto $stack6 = 1,94,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringPolicy: int getMaxAttempts()>,$stack1 = this.<net.jodah.lyra.internal.RecurringPolicy: int maxAttempts>,60,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack2 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: int getMaxAttempts()>(), 27)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack2 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: int getMaxAttempts()>(),27,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack2 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: int getMaxAttempts()>(), 27)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts> = $stack2,27,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts> = $stack2, 27)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack3 = this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts>,92,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack3 = this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts>, 92)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack3 == -1 goto $stack16 = 1,92,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack14 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: int getIntervalMultiplier()>(),40,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack14 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: int getIntervalMultiplier()>(), 40)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack15 = (double) $stack14,40,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack15 = (double) $stack14, 40)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier> = $stack15,40,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier> = $stack15, 40)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack20 = this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier>,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack20 = this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier>, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack22 = $stack21 * $stack20,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack22 = $stack21 * $stack20, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack23 = (long) $stack22,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack23 = (long) $stack22, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack25 = staticinvoke <java.lang.Math: long min(long,long)>($stack24, $stack23),78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack25 = staticinvoke <java.lang.Math: long min(long,long)>($stack24, $stack23), 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack25,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack25, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack5 = $stack4 cmp -1L,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack5 = $stack4 cmp -1L, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack5 == 0 goto $stack12 = 1,93,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryStats = $stack30,76,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>,this := @this: net.jodah.lyra.internal.RecurringStats,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: int attemptCount>,67,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: int attemptCount>, 67)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>,$stack2 = $stack1 + 1,67,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, $stack2 = $stack1 + 1, 67)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>,this.<net.jodah.lyra.internal.RecurringStats: int attemptCount> = $stack2,67,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, this.<net.jodah.lyra.internal.RecurringStats: int attemptCount> = $stack2, 67)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack15 = this.<net.jodah.lyra.internal.RecurringStats: int attemptCount>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack15 = this.<net.jodah.lyra.internal.RecurringStats: int attemptCount>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack15 >= $stack14 goto $stack16 = 0,94,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,command = (com.rabbitmq.client.Command) reason,99,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, command = (com.rabbitmq.client.Command) reason, 99)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack14 = (com.rabbitmq.client.AMQP$Connection$Close) method,102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack14 = (com.rabbitmq.client.AMQP$Connection$Close) method, 102)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack15 = interfaceinvoke $stack14.<com.rabbitmq.client.AMQP$Connection$Close: int getReplyCode()>(),102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack15 = interfaceinvoke $stack14.<com.rabbitmq.client.AMQP$Connection$Close: int getReplyCode()>(), 102)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack16 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack15),102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,return $stack16,102,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack10 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,80,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack10 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 80)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack11 = $stack10 cmp $stack9,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack11 = $stack10 cmp $stack9, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack11 >= 0 goto $stack12 = 0,94,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack2 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: int getMaxAttempts()>(),27,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack2 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: int getMaxAttempts()>(), 27)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts> = $stack2,27,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts> = $stack2, 27)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack3 = this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts>,92,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack3 = this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts>, 92)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack3 == -1 goto $stack16 = 1,92,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack16 = staticinvoke <java.lang.Math: long min(long,long)>($stack15, $stack14),82,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack16 = staticinvoke <java.lang.Math: long min(long,long)>($stack15, $stack14), 82)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack16,82,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack16, 82)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack5 = $stack4 cmp -1L,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack5 = $stack4 cmp -1L, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack5 == 0 goto $stack12 = 1,93,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringPolicy: int getIntervalMultiplier()>,$stack1 = this.<net.jodah.lyra.internal.RecurringPolicy: int intervalMultiplier>,51,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack14 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: int getIntervalMultiplier()>(), 40)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack14 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: int getIntervalMultiplier()>(),40,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack14 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: int getIntervalMultiplier()>(), 40)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack15 = (double) $stack14,40,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack15 = (double) $stack14, 40)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier> = $stack15,40,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier> = $stack15, 40)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack20 = this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier>,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack20 = this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier>, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack22 = $stack21 * $stack20,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack22 = $stack21 * $stack20, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack23 = (long) $stack22,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack23 = (long) $stack22, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack25 = staticinvoke <java.lang.Math: long min(long,long)>($stack24, $stack23),78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack25 = staticinvoke <java.lang.Math: long min(long,long)>($stack24, $stack23), 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack25,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack25, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack5 = $stack4 cmp -1L,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack5 = $stack4 cmp -1L, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack5 == 0 goto $stack12 = 1,93,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack11,35,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack11, 35)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack19 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack19 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack5 = $stack4 cmp -1L,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack5 = $stack4 cmp -1L, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack5 == 0 goto $stack12 = 1,93,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,command = (com.rabbitmq.client.Command) reason,99,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, command = (com.rabbitmq.client.Command) reason, 99)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack8 = method instanceof com.rabbitmq.client.AMQP$Connection$Close,101,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack8 = method instanceof com.rabbitmq.client.AMQP$Connection$Close, 101)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,if $stack8 == 0 goto $stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close,101,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,command = (com.rabbitmq.client.Command) reason,99,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, command = (com.rabbitmq.client.Command) reason, 99)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method,104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method, 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(), 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack13 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack12),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,$stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse),45,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,if $stack9 == 0 goto $stack10 = 0,45,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringPolicy: net.jodah.lyra.util.Duration getMaxDuration()>,$stack1 = this.<net.jodah.lyra.internal.RecurringPolicy: net.jodah.lyra.util.Duration maxDuration>,69,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack33 = virtualinvoke recurringPolicy.<net.jodah.lyra.internal.RecurringPolicy: net.jodah.lyra.util.Duration getMaxDuration()>(), 66)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack7 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: net.jodah.lyra.util.Duration getMaxDuration()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack7 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: net.jodah.lyra.util.Duration getMaxDuration()>(), 34)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,this := @this: net.jodah.lyra.util.Duration,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack1 = this.<net.jodah.lyra.util.Duration: java.util.concurrent.TimeUnit timeUnit>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack1 = this.<net.jodah.lyra.util.Duration: java.util.concurrent.TimeUnit timeUnit>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack11 = $stack10 cmp $stack9,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack11 = $stack10 cmp $stack9, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack11 >= 0 goto $stack12 = 0,94,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long interval> = $stack5,28,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long interval> = $stack5, 28)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack18 = this.<net.jodah.lyra.internal.RecurringStats: long interval>,31,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack18 = this.<net.jodah.lyra.internal.RecurringStats: long interval>, 31)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack18,31,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack18, 31)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack19 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack19 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack5 = $stack4 cmp -1L,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack5 = $stack4 cmp -1L, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack5 == 0 goto $stack12 = 1,93,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryStats = $stack30,76,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>,this := @this: net.jodah.lyra.internal.RecurringStats,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,this := @this: net.jodah.lyra.internal.RecurringStats,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long startTime>,81,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long startTime>, 81)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,elapsedNanos = now - $stack12,81,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, elapsedNanos = now - $stack12, 81)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack14 = $stack13 - elapsedNanos,82,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack14 = $stack13 - elapsedNanos, 82)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack16 = staticinvoke <java.lang.Math: long min(long,long)>($stack15, $stack14),82,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack16 = staticinvoke <java.lang.Math: long min(long,long)>($stack15, $stack14), 82)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack16,82,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack16, 82)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack5 = $stack4 cmp -1L,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack5 = $stack4 cmp -1L, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack5 == 0 goto $stack12 = 1,93,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,now = staticinvoke <java.lang.System: long nanoTime()>(),72,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, now = staticinvoke <java.lang.System: long nanoTime()>(), 72)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,elapsedNanos = now - $stack12,81,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, elapsedNanos = now - $stack12, 81)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack14 = $stack13 - elapsedNanos,82,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack14 = $stack13 - elapsedNanos, 82)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack16 = staticinvoke <java.lang.Math: long min(long,long)>($stack15, $stack14),82,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack16 = staticinvoke <java.lang.Math: long min(long,long)>($stack15, $stack14), 82)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack16,82,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack16, 82)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack11 = $stack10 cmp $stack9,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack11 = $stack10 cmp $stack9, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack11 >= 0 goto $stack12 = 0,94,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringPolicy: net.jodah.lyra.util.Duration getMaxDuration()>,$stack1 = this.<net.jodah.lyra.internal.RecurringPolicy: net.jodah.lyra.util.Duration maxDuration>,69,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack33 = virtualinvoke recurringPolicy.<net.jodah.lyra.internal.RecurringPolicy: net.jodah.lyra.util.Duration getMaxDuration()>(), 66)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack7 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: net.jodah.lyra.util.Duration getMaxDuration()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack7 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: net.jodah.lyra.util.Duration getMaxDuration()>(), 34)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,this := @this: net.jodah.lyra.util.Duration,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack1 = this.<net.jodah.lyra.util.Duration: java.util.concurrent.TimeUnit timeUnit>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack1 = this.<net.jodah.lyra.util.Duration: java.util.concurrent.TimeUnit timeUnit>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack5 = $stack4 cmp -1L,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack5 = $stack4 cmp -1L, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack5 == 0 goto $stack12 = 1,93,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,command = (com.rabbitmq.client.Command) reason,99,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, command = (com.rabbitmq.client.Command) reason, 99)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close,103,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close, 103)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,if $stack9 == 0 goto return 0,103,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,reason = virtualinvoke e.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object getReason()>(),97,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, reason = virtualinvoke e.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object getReason()>(), 97)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack6 = reason instanceof com.rabbitmq.client.Command,98,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack6 = reason instanceof com.rabbitmq.client.Command, 98)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,if $stack6 == 0 goto return 0,98,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack14 = (com.rabbitmq.client.AMQP$Connection$Close) method,102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack14 = (com.rabbitmq.client.AMQP$Connection$Close) method, 102)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack15 = interfaceinvoke $stack14.<com.rabbitmq.client.AMQP$Connection$Close: int getReplyCode()>(),102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack15 = interfaceinvoke $stack14.<com.rabbitmq.client.AMQP$Connection$Close: int getReplyCode()>(), 102)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack16 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack15),102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,return $stack16,102,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack25 = staticinvoke <java.lang.Math: long min(long,long)>($stack24, $stack23),78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack25 = staticinvoke <java.lang.Math: long min(long,long)>($stack24, $stack23), 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack25,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack25, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack11 = $stack10 cmp $stack9,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack11 = $stack10 cmp $stack9, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack11 >= 0 goto $stack12 = 0,94,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryStats = $stack30,76,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,this := @this: net.jodah.lyra.internal.RecurringStats,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack3 = this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts>,92,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack3 = this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts>, 92)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack3 == -1 goto $stack16 = 1,92,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: int attemptCount>,67,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: int attemptCount>, 67)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>,$stack2 = $stack1 + 1,67,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, $stack2 = $stack1 + 1, 67)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>,this.<net.jodah.lyra.internal.RecurringStats: int attemptCount> = $stack2,67,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, this.<net.jodah.lyra.internal.RecurringStats: int attemptCount> = $stack2, 67)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack15 = this.<net.jodah.lyra.internal.RecurringStats: int attemptCount>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack15 = this.<net.jodah.lyra.internal.RecurringStats: int attemptCount>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack15 >= $stack14 goto $stack16 = 0,94,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long startTime>,81,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long startTime>, 81)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack8 = this.<net.jodah.lyra.internal.RecurringStats: long startTime>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack8 = this.<net.jodah.lyra.internal.RecurringStats: long startTime>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack10 = $stack7 - $stack8,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack10 = $stack7 - $stack8, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack11 = $stack10 cmp $stack9,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack11 = $stack10 cmp $stack9, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack11 >= 0 goto $stack12 = 0,94,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long startTime>,81,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long startTime>, 81)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,elapsedNanos = now - $stack12,81,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, elapsedNanos = now - $stack12, 81)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack14 = $stack13 - elapsedNanos,82,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack14 = $stack13 - elapsedNanos, 82)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack16 = staticinvoke <java.lang.Math: long min(long,long)>($stack15, $stack14),82,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack16 = staticinvoke <java.lang.Math: long min(long,long)>($stack15, $stack14), 82)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack16,82,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack16, 82)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack5 = $stack4 cmp -1L,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack5 = $stack4 cmp -1L, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack5 == 0 goto $stack12 = 1,93,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack25 = staticinvoke <java.lang.Math: long min(long,long)>($stack24, $stack23),78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack25 = staticinvoke <java.lang.Math: long min(long,long)>($stack24, $stack23), 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack25,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack25, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack5 = $stack4 cmp -1L,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack5 = $stack4 cmp -1L, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack5 == 0 goto $stack12 = 1,93,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method,104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method, 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(), 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack13 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack12),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,return $stack13,104,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack16 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack15),102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,$stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse),45,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,if $stack9 == 0 goto $stack10 = 0,45,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,$stack5 = e instanceof com.rabbitmq.client.AlreadyClosedException,42,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack5 = e instanceof com.rabbitmq.client.AlreadyClosedException, 42)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,if $stack5 != 0 goto return 1,42,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close,103,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close, 103)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,if $stack9 == 0 goto return 0,103,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack8 = method instanceof com.rabbitmq.client.AMQP$Connection$Close,101,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack8 = method instanceof com.rabbitmq.client.AMQP$Connection$Close, 101)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,if $stack8 == 0 goto $stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close,101,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack11 = $stack10 cmp $stack9,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack11 = $stack10 cmp $stack9, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack11 >= 0 goto $stack12 = 0,94,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack11 = $stack10 cmp $stack9,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack11 = $stack10 cmp $stack9, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack11 >= 0 goto $stack12 = 0,94,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,$stack2 = e instanceof java.net.SocketTimeoutException,40,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack2 = e instanceof java.net.SocketTimeoutException, 40)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,if $stack2 != 0 goto return 1,40,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,now = staticinvoke <java.lang.System: long nanoTime()>(),72,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, now = staticinvoke <java.lang.System: long nanoTime()>(), 72)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,elapsedNanos = now - $stack12,81,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, elapsedNanos = now - $stack12, 81)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack14 = $stack13 - elapsedNanos,82,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack14 = $stack13 - elapsedNanos, 82)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack16 = staticinvoke <java.lang.Math: long min(long,long)>($stack15, $stack14),82,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack16 = staticinvoke <java.lang.Math: long min(long,long)>($stack15, $stack14), 82)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack16,82,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack16, 82)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack5 = $stack4 cmp -1L,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack5 = $stack4 cmp -1L, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack5 == 0 goto $stack12 = 1,93,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,reason = virtualinvoke e.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object getReason()>(),97,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, reason = virtualinvoke e.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object getReason()>(), 97)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,command = (com.rabbitmq.client.Command) reason,99,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, command = (com.rabbitmq.client.Command) reason, 99)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method,104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method, 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(), 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack13 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack12),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,$stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse),45,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,if $stack9 == 0 goto $stack10 = 0,45,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,reason = virtualinvoke e.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object getReason()>(),97,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, reason = virtualinvoke e.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object getReason()>(), 97)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,command = (com.rabbitmq.client.Command) reason,99,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, command = (com.rabbitmq.client.Command) reason, 99)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack14 = (com.rabbitmq.client.AMQP$Connection$Close) method,102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack14 = (com.rabbitmq.client.AMQP$Connection$Close) method, 102)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack15 = interfaceinvoke $stack14.<com.rabbitmq.client.AMQP$Connection$Close: int getReplyCode()>(),102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack15 = interfaceinvoke $stack14.<com.rabbitmq.client.AMQP$Connection$Close: int getReplyCode()>(), 102)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack16 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack15),102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,return $stack16,102,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack5 = $stack4 cmp -1L,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack5 = $stack4 cmp -1L, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack5 == 0 goto $stack12 = 1,93,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack11,35,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack11, 35)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack19 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack19 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack11 = $stack10 cmp $stack9,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack11 = $stack10 cmp $stack9, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack11 >= 0 goto $stack12 = 0,94,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,reason = virtualinvoke e.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object getReason()>(),97,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, reason = virtualinvoke e.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object getReason()>(), 97)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,command = (com.rabbitmq.client.Command) reason,99,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, command = (com.rabbitmq.client.Command) reason, 99)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close,103,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close, 103)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,if $stack9 == 0 goto return 0,103,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack10 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,80,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack10 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 80)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack5 = $stack4 cmp -1L,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack5 = $stack4 cmp -1L, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack5 == 0 goto $stack12 = 1,93,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier> = -1.0,18,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier> = -1.0, 18)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack20 = this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier>,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack20 = this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier>, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack22 = $stack21 * $stack20,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack22 = $stack21 * $stack20, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack23 = (long) $stack22,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack23 = (long) $stack22, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack25 = staticinvoke <java.lang.Math: long min(long,long)>($stack24, $stack23),78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack25 = staticinvoke <java.lang.Math: long min(long,long)>($stack24, $stack23), 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack25,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack25, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack11 = $stack10 cmp $stack9,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack11 = $stack10 cmp $stack9, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack11 >= 0 goto $stack12 = 0,94,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack5 = 0L,39,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long interval> = $stack5, 28)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long interval> = $stack5,28,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long interval> = $stack5, 28)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack18 = this.<net.jodah.lyra.internal.RecurringStats: long interval>,31,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack18 = this.<net.jodah.lyra.internal.RecurringStats: long interval>, 31)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack18,31,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack18, 31)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack19 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack19 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack5 = $stack4 cmp -1L,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack5 = $stack4 cmp -1L, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack5 == 0 goto $stack12 = 1,93,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = -1L,30,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = -1L, 30)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack11 = $stack10 cmp $stack9,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack11 = $stack10 cmp $stack9, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack11 >= 0 goto $stack12 = 0,94,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,$stack8 = e instanceof com.rabbitmq.client.PossibleAuthenticationFailureException,43,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack8 = e instanceof com.rabbitmq.client.PossibleAuthenticationFailureException, 43)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,if $stack8 == 0 goto (branch),43,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method,104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method, 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(), 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack13 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack12),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,$stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse),45,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,if $stack9 == 0 goto $stack10 = 0,45,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack16 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: net.jodah.lyra.util.Duration getMaxInterval()>(),41,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack16 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: net.jodah.lyra.util.Duration getMaxInterval()>(), 41)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack17 = virtualinvoke $stack16.<net.jodah.lyra.util.Duration: long toNanos()>(),41,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack17 = virtualinvoke $stack16.<net.jodah.lyra.util.Duration: long toNanos()>(), 41)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxInterval> = $stack17,41,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxInterval> = $stack17, 41)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack24 = this.<net.jodah.lyra.internal.RecurringStats: long maxInterval>,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack24 = this.<net.jodah.lyra.internal.RecurringStats: long maxInterval>, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack25 = staticinvoke <java.lang.Math: long min(long,long)>($stack24, $stack23),78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack25 = staticinvoke <java.lang.Math: long min(long,long)>($stack24, $stack23), 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack25,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack25, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack11 = $stack10 cmp $stack9,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack11 = $stack10 cmp $stack9, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack11 >= 0 goto $stack12 = 0,94,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long interval> = $stack5,28,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long interval> = $stack5, 28)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack18 = this.<net.jodah.lyra.internal.RecurringStats: long interval>,31,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack18 = this.<net.jodah.lyra.internal.RecurringStats: long interval>, 31)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack18,31,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack18, 31)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack19 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack19 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack11 = $stack10 cmp $stack9,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack11 = $stack10 cmp $stack9, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack11 >= 0 goto $stack12 = 0,94,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,command = (com.rabbitmq.client.Command) reason,99,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, command = (com.rabbitmq.client.Command) reason, 99)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method,104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method, 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(), 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack13 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack12),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,return $stack13,104,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringPolicy: int getIntervalMultiplier()>,$stack1 = this.<net.jodah.lyra.internal.RecurringPolicy: int intervalMultiplier>,51,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack14 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: int getIntervalMultiplier()>(), 40)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack14 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: int getIntervalMultiplier()>(),40,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack14 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: int getIntervalMultiplier()>(), 40)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack15 = (double) $stack14,40,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack15 = (double) $stack14, 40)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier> = $stack15,40,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier> = $stack15, 40)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack20 = this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier>,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack20 = this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier>, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack22 = $stack21 * $stack20,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack22 = $stack21 * $stack20, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack23 = (long) $stack22,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack23 = (long) $stack22, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack25 = staticinvoke <java.lang.Math: long min(long,long)>($stack24, $stack23),78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack25 = staticinvoke <java.lang.Math: long min(long,long)>($stack24, $stack23), 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack25,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack25, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack11 = $stack10 cmp $stack9,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack11 = $stack10 cmp $stack9, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack11 >= 0 goto $stack12 = 0,94,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack18 = this.<net.jodah.lyra.internal.RecurringStats: long interval>,31,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack18 = this.<net.jodah.lyra.internal.RecurringStats: long interval>, 31)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack18,31,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack18, 31)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack19 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack19 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack5 = $stack4 cmp -1L,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack5 = $stack4 cmp -1L, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack5 == 0 goto $stack12 = 1,93,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringPolicy: int getMaxAttempts()>,$stack1 = this.<net.jodah.lyra.internal.RecurringPolicy: int maxAttempts>,60,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack2 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: int getMaxAttempts()>(), 27)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack2 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: int getMaxAttempts()>(),27,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack2 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: int getMaxAttempts()>(), 27)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts> = $stack2,27,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts> = $stack2, 27)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack14 = this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack14 = this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack15 >= $stack14 goto $stack16 = 0,94,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack16 = staticinvoke <java.lang.Math: long min(long,long)>($stack15, $stack14),82,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack16 = staticinvoke <java.lang.Math: long min(long,long)>($stack15, $stack14), 82)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack16,82,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack16, 82)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack11 = $stack10 cmp $stack9,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack11 = $stack10 cmp $stack9, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack11 >= 0 goto $stack12 = 0,94,SinkNode, path: ))

List(Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1), 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack11 = $stack10 cmp $stack9,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack11 = $stack10 cmp $stack9, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack11 >= 0 goto $stack12 = 0,94,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack17 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,83,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack17 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 83)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack5 = $stack4 cmp -1L,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack5 = $stack4 cmp -1L, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack5 == 0 goto $stack12 = 1,93,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack2 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: int getMaxAttempts()>(),27,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack2 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: int getMaxAttempts()>(), 27)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts> = $stack2,27,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts> = $stack2, 27)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack14 = this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack14 = this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack15 >= $stack14 goto $stack16 = 0,94,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method,104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method, 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(), 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack13 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack12),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,return $stack13,104,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack16 = 1,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, withinMaxRetries = $stack16, 92)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,withinMaxRetries = $stack16,92,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, withinMaxRetries = $stack16, 92)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if withinMaxRetries == 0 goto $stack6 = 1,94,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,reason = virtualinvoke e.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object getReason()>(),97,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, reason = virtualinvoke e.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object getReason()>(), 97)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,command = (com.rabbitmq.client.Command) reason,99,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, command = (com.rabbitmq.client.Command) reason, 99)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack8 = method instanceof com.rabbitmq.client.AMQP$Connection$Close,101,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack8 = method instanceof com.rabbitmq.client.AMQP$Connection$Close, 101)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,if $stack8 == 0 goto $stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close,101,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack18 = this.<net.jodah.lyra.internal.RecurringStats: long interval>,31,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack18 = this.<net.jodah.lyra.internal.RecurringStats: long interval>, 31)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack18,31,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack18, 31)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack19 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack19 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack11 = $stack10 cmp $stack9,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack11 = $stack10 cmp $stack9, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack11 >= 0 goto $stack12 = 0,94,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close,103,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close, 103)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,if $stack9 == 0 goto return 0,103,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack8 = method instanceof com.rabbitmq.client.AMQP$Connection$Close,101,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack8 = method instanceof com.rabbitmq.client.AMQP$Connection$Close, 101)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,if $stack8 == 0 goto $stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close,101,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = -1L,30,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = -1L, 30)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack5 = $stack4 cmp -1L,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack5 = $stack4 cmp -1L, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack5 == 0 goto $stack12 = 1,93,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,$stack7 = $stack6 instanceof java.io.EOFException,41,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack7 = $stack6 instanceof java.io.EOFException, 41)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,if $stack7 == 0 goto $stack8 = e instanceof com.rabbitmq.client.PossibleAuthenticationFailureException,41,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack16 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack15),102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,return $stack16,102,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,reason = virtualinvoke e.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object getReason()>(),97,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, reason = virtualinvoke e.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object getReason()>(), 97)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,command = (com.rabbitmq.client.Command) reason,99,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, command = (com.rabbitmq.client.Command) reason, 99)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method,104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method, 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(), 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack13 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack12),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,return $stack13,104,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack14 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: int getIntervalMultiplier()>(),40,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack14 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: int getIntervalMultiplier()>(), 40)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack15 = (double) $stack14,40,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack15 = (double) $stack14, 40)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier> = $stack15,40,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier> = $stack15, 40)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack20 = this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier>,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack20 = this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier>, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack22 = $stack21 * $stack20,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack22 = $stack21 * $stack20, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack23 = (long) $stack22,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack23 = (long) $stack22, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack25 = staticinvoke <java.lang.Math: long min(long,long)>($stack24, $stack23),78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack25 = staticinvoke <java.lang.Math: long min(long,long)>($stack24, $stack23), 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack25,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack25, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack11 = $stack10 cmp $stack9,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack11 = $stack10 cmp $stack9, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack11 >= 0 goto $stack12 = 0,94,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack17 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,83,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack17 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 83)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack11 = $stack10 cmp $stack9,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack11 = $stack10 cmp $stack9, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack11 >= 0 goto $stack12 = 0,94,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack5 = $stack4 cmp -1L,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack5 = $stack4 cmp -1L, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack5 == 0 goto $stack12 = 1,93,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack13 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack12),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,return $stack13,104,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,$stack10 = 1,45,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,return $stack10,45,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack6 = reason instanceof com.rabbitmq.client.Command,98,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack6 = reason instanceof com.rabbitmq.client.Command, 98)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,if $stack6 == 0 goto return 0,98,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack5 = $stack4 cmp -1L,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack5 = $stack4 cmp -1L, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack5 == 0 goto $stack12 = 1,93,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,withinMaxDuration = $stack12,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, withinMaxDuration = $stack12, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if withinMaxDuration != 0 goto $stack6 = 0,94,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack3 = this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts>,92,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack3 = this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts>, 92)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack3 == -1 goto $stack16 = 1,92,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack14 = (com.rabbitmq.client.AMQP$Connection$Close) method,102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack14 = (com.rabbitmq.client.AMQP$Connection$Close) method, 102)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack15 = interfaceinvoke $stack14.<com.rabbitmq.client.AMQP$Connection$Close: int getReplyCode()>(),102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack15 = interfaceinvoke $stack14.<com.rabbitmq.client.AMQP$Connection$Close: int getReplyCode()>(), 102)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack16 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack15),102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,$stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse),45,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,if $stack9 == 0 goto $stack10 = 0,45,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,command = (com.rabbitmq.client.Command) reason,99,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, command = (com.rabbitmq.client.Command) reason, 99)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack14 = (com.rabbitmq.client.AMQP$Connection$Close) method,102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack14 = (com.rabbitmq.client.AMQP$Connection$Close) method, 102)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack15 = interfaceinvoke $stack14.<com.rabbitmq.client.AMQP$Connection$Close: int getReplyCode()>(),102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack15 = interfaceinvoke $stack14.<com.rabbitmq.client.AMQP$Connection$Close: int getReplyCode()>(), 102)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack16 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack15),102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,return $stack16,102,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack14 = (com.rabbitmq.client.AMQP$Connection$Close) method,102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack14 = (com.rabbitmq.client.AMQP$Connection$Close) method, 102)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack15 = interfaceinvoke $stack14.<com.rabbitmq.client.AMQP$Connection$Close: int getReplyCode()>(),102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack15 = interfaceinvoke $stack14.<com.rabbitmq.client.AMQP$Connection$Close: int getReplyCode()>(), 102)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack16 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack15),102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,return $stack16,102,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,command = (com.rabbitmq.client.Command) reason,99,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, command = (com.rabbitmq.client.Command) reason, 99)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack8 = method instanceof com.rabbitmq.client.AMQP$Connection$Close,101,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack8 = method instanceof com.rabbitmq.client.AMQP$Connection$Close, 101)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,if $stack8 == 0 goto $stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close,101,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,command = (com.rabbitmq.client.Command) reason,99,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, command = (com.rabbitmq.client.Command) reason, 99)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method,104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method, 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(), 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack13 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack12),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,$stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse),45,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,if $stack9 == 0 goto $stack10 = 0,45,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,command = (com.rabbitmq.client.Command) reason,99,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, command = (com.rabbitmq.client.Command) reason, 99)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close,103,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close, 103)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,if $stack9 == 0 goto return 0,103,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,reason = virtualinvoke e.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object getReason()>(),97,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, reason = virtualinvoke e.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object getReason()>(), 97)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack6 = reason instanceof com.rabbitmq.client.Command,98,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack6 = reason instanceof com.rabbitmq.client.Command, 98)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,if $stack6 == 0 goto return 0,98,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack14 = (com.rabbitmq.client.AMQP$Connection$Close) method,102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack14 = (com.rabbitmq.client.AMQP$Connection$Close) method, 102)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack15 = interfaceinvoke $stack14.<com.rabbitmq.client.AMQP$Connection$Close: int getReplyCode()>(),102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack15 = interfaceinvoke $stack14.<com.rabbitmq.client.AMQP$Connection$Close: int getReplyCode()>(), 102)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack16 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack15),102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,return $stack16,102,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method,104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method, 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(), 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack13 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack12),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,return $stack13,104,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close,103,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close, 103)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,if $stack9 == 0 goto return 0,103,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack8 = method instanceof com.rabbitmq.client.AMQP$Connection$Close,101,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack8 = method instanceof com.rabbitmq.client.AMQP$Connection$Close, 101)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,if $stack8 == 0 goto $stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close,101,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack13 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack12),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,$stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse),45,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,if $stack9 == 0 goto $stack10 = 0,45,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,$stack2 = e instanceof java.net.SocketTimeoutException,40,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack2 = e instanceof java.net.SocketTimeoutException, 40)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,if $stack2 != 0 goto return 1,40,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,reason = virtualinvoke e.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object getReason()>(),97,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, reason = virtualinvoke e.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object getReason()>(), 97)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,command = (com.rabbitmq.client.Command) reason,99,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, command = (com.rabbitmq.client.Command) reason, 99)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method,104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method, 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(), 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack13 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack12),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,$stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse),45,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,if $stack9 == 0 goto $stack10 = 0,45,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,reason = virtualinvoke e.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object getReason()>(),97,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, reason = virtualinvoke e.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object getReason()>(), 97)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,command = (com.rabbitmq.client.Command) reason,99,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, command = (com.rabbitmq.client.Command) reason, 99)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack14 = (com.rabbitmq.client.AMQP$Connection$Close) method,102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack14 = (com.rabbitmq.client.AMQP$Connection$Close) method, 102)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack15 = interfaceinvoke $stack14.<com.rabbitmq.client.AMQP$Connection$Close: int getReplyCode()>(),102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack15 = interfaceinvoke $stack14.<com.rabbitmq.client.AMQP$Connection$Close: int getReplyCode()>(), 102)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack16 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack15),102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,return $stack16,102,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack41 = 1,63,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, retryable = $stack41, 59)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryable = $stack41,59,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, retryable = $stack41, 59)))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,reason = virtualinvoke e.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object getReason()>(),97,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, reason = virtualinvoke e.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object getReason()>(), 97)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,command = (com.rabbitmq.client.Command) reason,99,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, command = (com.rabbitmq.client.Command) reason, 99)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close,103,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close, 103)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,if $stack9 == 0 goto return 0,103,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,$stack3 = e instanceof java.net.ConnectException,42,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack3 = e instanceof java.net.ConnectException, 42)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,if $stack3 != 0 goto return 1,42,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,$stack8 = e instanceof com.rabbitmq.client.PossibleAuthenticationFailureException,43,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack8 = e instanceof com.rabbitmq.client.PossibleAuthenticationFailureException, 43)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,if $stack8 == 0 goto (branch),43,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method,104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method, 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(), 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack13 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack12),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,$stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse),45,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,if $stack9 == 0 goto $stack10 = 0,45,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,command = (com.rabbitmq.client.Command) reason,99,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, command = (com.rabbitmq.client.Command) reason, 99)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method,104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method, 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(), 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack13 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack12),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,return $stack13,104,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack3 = this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts>,92,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack3 = this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts>, 92)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack14 = this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack14 = this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack15 >= $stack14 goto $stack16 = 0,94,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,reason = virtualinvoke e.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object getReason()>(),97,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, reason = virtualinvoke e.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object getReason()>(), 97)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,command = (com.rabbitmq.client.Command) reason,99,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, command = (com.rabbitmq.client.Command) reason, 99)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack8 = method instanceof com.rabbitmq.client.AMQP$Connection$Close,101,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack8 = method instanceof com.rabbitmq.client.AMQP$Connection$Close, 101)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,if $stack8 == 0 goto $stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close,101,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack15 = this.<net.jodah.lyra.internal.RecurringStats: int attemptCount>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack15 = this.<net.jodah.lyra.internal.RecurringStats: int attemptCount>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack15 >= $stack14 goto $stack16 = 0,94,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close,103,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close, 103)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,if $stack9 == 0 goto return 0,103,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack8 = method instanceof com.rabbitmq.client.AMQP$Connection$Close,101,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack8 = method instanceof com.rabbitmq.client.AMQP$Connection$Close, 101)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,if $stack8 == 0 goto $stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close,101,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,$stack7 = $stack6 instanceof java.io.EOFException,41,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack7 = $stack6 instanceof java.io.EOFException, 41)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,if $stack7 == 0 goto $stack8 = e instanceof com.rabbitmq.client.PossibleAuthenticationFailureException,41,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,reason = virtualinvoke e.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object getReason()>(),97,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, reason = virtualinvoke e.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object getReason()>(), 97)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,command = (com.rabbitmq.client.Command) reason,99,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, command = (com.rabbitmq.client.Command) reason, 99)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method,104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method, 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(), 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack13 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack12),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,return $stack13,104,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if sse == null goto $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,53,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recovery != 0 goto throw e,63,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recoverable != 0 goto $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,54,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,56,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>, 56)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if $stack19 != 0 goto throw e,56,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryable = $stack41,59,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, retryable = $stack41, 59)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryable == 0 goto (branch),63,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if sse == null goto (branch),65,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryStats != null goto virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(),75,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryStats = $stack30,76,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(),77,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77)))

List(Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryStats == null goto $stack15 = 0,42,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack15 = 1,46,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, recovery = $stack15, 42)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,recovery = $stack15,42,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, recovery = $stack15, 42)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recovery != 0 goto throw e,63,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recoverable != 0 goto $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,54,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,56,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>, 56)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if $stack19 != 0 goto throw e,56,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recurringPolicy == null goto $stack41 = 0,59,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryStats == null goto $stack15 = 0,42,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack15 = 1,46,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, recovery = $stack15, 42)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,recovery = $stack15,42,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, recovery = $stack15, 42)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recovery != 0 goto throw e,63,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recoverable != 0 goto $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,54,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,56,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>, 56)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if $stack19 != 0 goto throw e,56,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryable = $stack41,59,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, retryable = $stack41, 59)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryable == 0 goto (branch),63,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if sse == null goto (branch),65,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryStats != null goto virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(),75,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryStats = $stack30,76,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(),77,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77)))

List(Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if sse == null goto $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,53,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recovery != 0 goto throw e,63,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recoverable != 0 goto $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,54,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,56,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>, 56)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if $stack19 != 0 goto throw e,56,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryable = $stack41,59,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, retryable = $stack41, 59)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryable == 0 goto (branch),63,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if sse == null goto (branch),65,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryStats != null goto virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(),75,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryStats = $stack30,76,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68)))

List(Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if sse == null goto $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,53,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recovery != 0 goto throw e,63,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recoverable != 0 goto $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,54,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,56,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>, 56)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if $stack19 != 0 goto throw e,56,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recurringPolicy == null goto $stack41 = 0,59,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if sse == null goto (branch),65,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if $stack33 != null goto $stack34 = this.<net.jodah.lyra.internal.RetryableResource: net.jodah.lyra.internal.util.concurrent.ReentrantCircuit circuit>,66,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if $stack43 == 0 goto $stack41 = 0,60,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack41 = 1,63,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, retryable = $stack41, 59)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack41 = 0,75,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, retryable = $stack41, 59)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryable = $stack41,59,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, retryable = $stack41, 59)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryable == 0 goto (branch),63,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if sse == null goto (branch),65,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryStats != null goto virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(),75,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryStats = $stack30,76,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(),77,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77)))

List(Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recovery != 0 goto throw e,63,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recoverable != 0 goto $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,54,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,56,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>, 56)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if $stack19 != 0 goto throw e,56,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryable = $stack41,59,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, retryable = $stack41, 59)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryable == 0 goto (branch),63,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if sse == null goto (branch),65,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if $stack33 != null goto $stack34 = this.<net.jodah.lyra.internal.RetryableResource: net.jodah.lyra.internal.util.concurrent.ReentrantCircuit circuit>,66,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recovery != 0 goto throw e,63,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recoverable != 0 goto $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,54,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,56,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>, 56)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if $stack19 != 0 goto throw e,56,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recurringPolicy == null goto $stack41 = 0,59,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if $stack43 == 0 goto $stack41 = 0,60,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack41 = 1,63,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, retryable = $stack41, 59)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack41 = 0,75,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, retryable = $stack41, 59)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryable = $stack41,59,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, retryable = $stack41, 59)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryable == 0 goto (branch),63,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if sse == null goto (branch),65,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryStats != null goto virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(),75,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryStats = $stack30,76,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68)))

List(Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryStats == null goto $stack15 = 0,42,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack15 = 1,46,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, recovery = $stack15, 42)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,recovery = $stack15,42,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, recovery = $stack15, 42)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recovery != 0 goto throw e,63,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recoverable != 0 goto $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,54,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,56,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>, 56)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if $stack19 != 0 goto throw e,56,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryable = $stack41,59,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, retryable = $stack41, 59)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryable == 0 goto (branch),63,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if sse == null goto (branch),65,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryStats != null goto virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(),75,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryStats = $stack30,76,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68)))

List(Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if $stack43 == 0 goto $stack41 = 0,60,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack41 = 1,63,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, retryable = $stack41, 59)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack41 = 0,75,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, retryable = $stack41, 59)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryable = $stack41,59,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, retryable = $stack41, 59)))

List(Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if sse == null goto $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,53,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recovery != 0 goto throw e,63,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recoverable != 0 goto $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,54,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,56,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>, 56)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if $stack19 != 0 goto throw e,56,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryable = $stack41,59,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, retryable = $stack41, 59)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryable == 0 goto (branch),63,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if sse == null goto (branch),65,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if $stack33 != null goto $stack34 = this.<net.jodah.lyra.internal.RetryableResource: net.jodah.lyra.internal.util.concurrent.ReentrantCircuit circuit>,66,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if $stack43 == 0 goto $stack41 = 0,60,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack41 = 1,63,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, retryable = $stack41, 59)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack41 = 0,75,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, retryable = $stack41, 59)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryable = $stack41,59,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, retryable = $stack41, 59)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryable == 0 goto (branch),63,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if sse == null goto (branch),65,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if $stack33 != null goto $stack34 = this.<net.jodah.lyra.internal.RetryableResource: net.jodah.lyra.internal.util.concurrent.ReentrantCircuit circuit>,66,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if sse == null goto (branch),65,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryStats != null goto virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(),75,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryStats = $stack30,76,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(),77,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77)))

List(Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryStats == null goto $stack15 = 0,42,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack15 = 1,46,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, recovery = $stack15, 42)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,recovery = $stack15,42,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, recovery = $stack15, 42)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recovery != 0 goto throw e,63,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recoverable != 0 goto $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,54,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,56,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>, 56)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if $stack19 != 0 goto throw e,56,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryable = $stack41,59,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, retryable = $stack41, 59)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryable == 0 goto (branch),63,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if sse == null goto (branch),65,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if $stack33 != null goto $stack34 = this.<net.jodah.lyra.internal.RetryableResource: net.jodah.lyra.internal.util.concurrent.ReentrantCircuit circuit>,66,SinkNode, path: ))

List(Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recurringPolicy == null goto (branch),53,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack47 = virtualinvoke recurringPolicy.<net.jodah.lyra.internal.RecurringPolicy: boolean allowsAttempts()>(),50,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack47 = virtualinvoke recurringPolicy.<net.jodah.lyra.internal.RecurringPolicy: boolean allowsAttempts()>(), 50)))

List(Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if sse == null goto (branch),65,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryStats != null goto virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(),75,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryStats = $stack30,76,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68)))

List(Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recovery != 0 goto throw e,63,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recoverable != 0 goto $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,54,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,56,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>, 56)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if $stack19 != 0 goto throw e,56,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryable = $stack41,59,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, retryable = $stack41, 59)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryable == 0 goto (branch),63,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if sse == null goto (branch),65,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryStats != null goto virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(),75,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryStats = $stack30,76,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68)))

List(Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recovery != 0 goto throw e,63,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recoverable != 0 goto $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,54,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,56,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>, 56)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if $stack19 != 0 goto throw e,56,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryable = $stack41,59,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, retryable = $stack41, 59)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryable == 0 goto (branch),63,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if sse == null goto (branch),65,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryStats != null goto virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(),75,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryStats = $stack30,76,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(),77,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77)))

