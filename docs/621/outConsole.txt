Running soot scenario lyra;net.jodah.lyra.internal.RetryableResource;callWithRetries(Callable<T>, RetryPolicy, boolean, boolean);14e69c369afca578a1fd2796c2f6588f2cfe90b8
Running ConflictDetectionAlgorithm{name='Confluence Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/lyra/14e69c369afca578a1fd2796c2f6588f2cfe90b8/original-without-dependencies/lyra-0.3.2-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot Confluence 1 Inter 0,55200
Time to perform Confluence 1 Inter 0,96600
Configure Soot Confluence 2 Inter 0,15500
Time to perform Confluence 2 Inter 0,27700
Visited methods: 54
Depth limit: 5
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running ConflictDetectionAlgorithm{name='OA Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/lyra/14e69c369afca578a1fd2796c2f6588f2cfe90b8/original-without-dependencies/lyra-0.3.2-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Depth limit: 5
Configure Soot OA Inter 0,73600
Runtime: 0.033s
OA interference in class RetryableResource, method java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean), execution of line 60 overrides 60, assigning to variable command, 
Caused by line 60 flow:
at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:60)
at net.jodah.lyra.internal.util.Exceptions.isRetryable(Exceptions.java:45)
at net.jodah.lyra.internal.util.Exceptions.isRetryable(Exceptions.java:99)
And line 60 flow:
at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:60)
at net.jodah.lyra.internal.util.Exceptions.isRetryable(Exceptions.java:45)
at net.jodah.lyra.internal.util.Exceptions.isRetryable(Exceptions.java:99)
 
OA interference in class RetryableResource, method java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean), execution of line 42 overrides 42, assigning to variable recovery, 
Caused by line 42 flow:
at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:42)
And line 42 flow:
at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:42)
 
OA interference in class RetryableResource, method java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean), execution of line 78 overrides 78, assigning to variable withinMaxRetries, 
Caused by line 78 flow:
at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:78)
at net.jodah.lyra.internal.RecurringStats.isPolicyExceeded(RecurringStats.java:92)
And line 78 flow:
at net.jodah.lyra.internal.RetryableResource.callWithRetries(RetryableResource.java:78)
at net.jodah.lyra.internal.RecurringStats.isPolicyExceeded(RecurringStats.java:92)
 
Time to perform OA Inter 0,91500
OA Inter Visited methods: 54
 Analysis results
----------------------------
 Number of conflicts: 35
 Results exported to out.txt
Error getting the previous content of the JSON file out.json
 JSON Results exported to out.json
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/lyra/14e69c369afca578a1fd2796c2f6588f2cfe90b8/original-without-dependencies/lyra-0.3.2-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,52300
Time to perform DFP Inter 0,97300
Depth limit: 5
CONFLICTS: DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
[List(Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack8 = this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier>,77,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack8 = this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier>, 77)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack20 = this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier>,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack20 = this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier>, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack22 = $stack21 * $stack20,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack22 = $stack21 * $stack20, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack23 = (long) $stack22,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack23 = (long) $stack22, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack25 = staticinvoke <java.lang.Math: long min(long,long)>($stack24, $stack23),78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack25 = staticinvoke <java.lang.Math: long min(long,long)>($stack24, $stack23), 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack25,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack25, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack5 = $stack4 cmp -1L,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack5 = $stack4 cmp -1L, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack5 == 0 goto $stack12 = 1,93,SinkNode, path: )), List(Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1), 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack5 = $stack4 cmp -1L,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack5 = $stack4 cmp -1L, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack5 == 0 goto $stack12 = 1,93,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack6 = reason instanceof com.rabbitmq.client.Command,98,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack6 = reason instanceof com.rabbitmq.client.Command, 98)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,if $stack6 == 0 goto return 0,98,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack11 = $stack10 cmp $stack9,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack11 = $stack10 cmp $stack9, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack11 >= 0 goto $stack12 = 0,94,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack5 = 0L,39,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long interval> = $stack5, 28)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long interval> = $stack5,28,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long interval> = $stack5, 28)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack18 = this.<net.jodah.lyra.internal.RecurringStats: long interval>,31,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack18 = this.<net.jodah.lyra.internal.RecurringStats: long interval>, 31)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack18,31,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack18, 31)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack19 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack19 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack11 = $stack10 cmp $stack9,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack11 = $stack10 cmp $stack9, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack11 >= 0 goto $stack12 = 0,94,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack16 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: net.jodah.lyra.util.Duration getMaxInterval()>(),41,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack16 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: net.jodah.lyra.util.Duration getMaxInterval()>(), 41)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack17 = virtualinvoke $stack16.<net.jodah.lyra.util.Duration: long toNanos()>(),41,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack17 = virtualinvoke $stack16.<net.jodah.lyra.util.Duration: long toNanos()>(), 41)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxInterval> = $stack17,41,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxInterval> = $stack17, 41)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack24 = this.<net.jodah.lyra.internal.RecurringStats: long maxInterval>,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack24 = this.<net.jodah.lyra.internal.RecurringStats: long maxInterval>, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack25 = staticinvoke <java.lang.Math: long min(long,long)>($stack24, $stack23),78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack25 = staticinvoke <java.lang.Math: long min(long,long)>($stack24, $stack23), 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack25,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack25, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack5 = $stack4 cmp -1L,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack5 = $stack4 cmp -1L, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack5 == 0 goto $stack12 = 1,93,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier> = -1.0,18,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier> = -1.0, 18)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack20 = this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier>,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack20 = this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier>, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack22 = $stack21 * $stack20,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack22 = $stack21 * $stack20, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack23 = (long) $stack22,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack23 = (long) $stack22, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack25 = staticinvoke <java.lang.Math: long min(long,long)>($stack24, $stack23),78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack25 = staticinvoke <java.lang.Math: long min(long,long)>($stack24, $stack23), 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack25,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack25, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack5 = $stack4 cmp -1L,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack5 = $stack4 cmp -1L, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack5 == 0 goto $stack12 = 1,93,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method,104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method, 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(), 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack13 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack12),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,$stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse),45,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,if $stack9 == 0 goto $stack10 = 0,45,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack5 = $stack4 cmp -1L,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack5 = $stack4 cmp -1L, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack5 == 0 goto $stack12 = 1,93,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack8 = this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier>,77,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack8 = this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier>, 77)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack20 = this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier>,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack20 = this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier>, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack22 = $stack21 * $stack20,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack22 = $stack21 * $stack20, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack23 = (long) $stack22,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack23 = (long) $stack22, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack25 = staticinvoke <java.lang.Math: long min(long,long)>($stack24, $stack23),78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack25 = staticinvoke <java.lang.Math: long min(long,long)>($stack24, $stack23), 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack25,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack25, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack11 = $stack10 cmp $stack9,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack11 = $stack10 cmp $stack9, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack11 >= 0 goto $stack12 = 0,94,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,$stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse),45,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,if $stack9 == 0 goto $stack10 = 0,45,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack3 = this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts>,92,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack3 = this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts>, 92)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack3 == -1 goto $stack16 = 1,92,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,withinMaxRetries = $stack16,92,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, withinMaxRetries = $stack16, 92)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if withinMaxRetries == 0 goto $stack6 = 1,94,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringPolicy: int getMaxAttempts()>,$stack1 = this.<net.jodah.lyra.internal.RecurringPolicy: int maxAttempts>,60,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack2 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: int getMaxAttempts()>(), 27)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack2 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: int getMaxAttempts()>(),27,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack2 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: int getMaxAttempts()>(), 27)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts> = $stack2,27,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts> = $stack2, 27)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack3 = this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts>,92,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack3 = this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts>, 92)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack3 == -1 goto $stack16 = 1,92,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack14 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: int getIntervalMultiplier()>(),40,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack14 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: int getIntervalMultiplier()>(), 40)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack15 = (double) $stack14,40,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack15 = (double) $stack14, 40)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier> = $stack15,40,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier> = $stack15, 40)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack20 = this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier>,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack20 = this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier>, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack22 = $stack21 * $stack20,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack22 = $stack21 * $stack20, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack23 = (long) $stack22,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack23 = (long) $stack22, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack25 = staticinvoke <java.lang.Math: long min(long,long)>($stack24, $stack23),78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack25 = staticinvoke <java.lang.Math: long min(long,long)>($stack24, $stack23), 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack25,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack25, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack5 = $stack4 cmp -1L,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack5 = $stack4 cmp -1L, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack5 == 0 goto $stack12 = 1,93,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryStats = $stack30,76,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>,this := @this: net.jodah.lyra.internal.RecurringStats,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: int attemptCount>,67,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: int attemptCount>, 67)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>,$stack2 = $stack1 + 1,67,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, $stack2 = $stack1 + 1, 67)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>,this.<net.jodah.lyra.internal.RecurringStats: int attemptCount> = $stack2,67,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, this.<net.jodah.lyra.internal.RecurringStats: int attemptCount> = $stack2, 67)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack15 = this.<net.jodah.lyra.internal.RecurringStats: int attemptCount>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack15 = this.<net.jodah.lyra.internal.RecurringStats: int attemptCount>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack15 >= $stack14 goto $stack16 = 0,94,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,command = (com.rabbitmq.client.Command) reason,99,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, command = (com.rabbitmq.client.Command) reason, 99)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack14 = (com.rabbitmq.client.AMQP$Connection$Close) method,102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack14 = (com.rabbitmq.client.AMQP$Connection$Close) method, 102)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack15 = interfaceinvoke $stack14.<com.rabbitmq.client.AMQP$Connection$Close: int getReplyCode()>(),102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack15 = interfaceinvoke $stack14.<com.rabbitmq.client.AMQP$Connection$Close: int getReplyCode()>(), 102)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack16 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack15),102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,return $stack16,102,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack10 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,80,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack10 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 80)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack11 = $stack10 cmp $stack9,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack11 = $stack10 cmp $stack9, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack11 >= 0 goto $stack12 = 0,94,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack2 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: int getMaxAttempts()>(),27,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack2 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: int getMaxAttempts()>(), 27)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts> = $stack2,27,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts> = $stack2, 27)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack3 = this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts>,92,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack3 = this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts>, 92)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack3 == -1 goto $stack16 = 1,92,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack16 = staticinvoke <java.lang.Math: long min(long,long)>($stack15, $stack14),82,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack16 = staticinvoke <java.lang.Math: long min(long,long)>($stack15, $stack14), 82)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack16,82,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack16, 82)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack5 = $stack4 cmp -1L,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack5 = $stack4 cmp -1L, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack5 == 0 goto $stack12 = 1,93,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringPolicy: int getIntervalMultiplier()>,$stack1 = this.<net.jodah.lyra.internal.RecurringPolicy: int intervalMultiplier>,51,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack14 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: int getIntervalMultiplier()>(), 40)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack14 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: int getIntervalMultiplier()>(),40,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack14 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: int getIntervalMultiplier()>(), 40)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack15 = (double) $stack14,40,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack15 = (double) $stack14, 40)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier> = $stack15,40,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier> = $stack15, 40)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack20 = this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier>,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack20 = this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier>, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack22 = $stack21 * $stack20,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack22 = $stack21 * $stack20, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack23 = (long) $stack22,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack23 = (long) $stack22, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack25 = staticinvoke <java.lang.Math: long min(long,long)>($stack24, $stack23),78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack25 = staticinvoke <java.lang.Math: long min(long,long)>($stack24, $stack23), 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack25,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack25, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack5 = $stack4 cmp -1L,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack5 = $stack4 cmp -1L, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack5 == 0 goto $stack12 = 1,93,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack11,35,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack11, 35)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack19 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack19 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack5 = $stack4 cmp -1L,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack5 = $stack4 cmp -1L, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack5 == 0 goto $stack12 = 1,93,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,command = (com.rabbitmq.client.Command) reason,99,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, command = (com.rabbitmq.client.Command) reason, 99)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack8 = method instanceof com.rabbitmq.client.AMQP$Connection$Close,101,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack8 = method instanceof com.rabbitmq.client.AMQP$Connection$Close, 101)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,if $stack8 == 0 goto $stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close,101,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,command = (com.rabbitmq.client.Command) reason,99,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, command = (com.rabbitmq.client.Command) reason, 99)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method,104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method, 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(), 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack13 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack12),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,$stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse),45,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,if $stack9 == 0 goto $stack10 = 0,45,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringPolicy: net.jodah.lyra.util.Duration getMaxDuration()>,$stack1 = this.<net.jodah.lyra.internal.RecurringPolicy: net.jodah.lyra.util.Duration maxDuration>,69,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack33 = virtualinvoke recurringPolicy.<net.jodah.lyra.internal.RecurringPolicy: net.jodah.lyra.util.Duration getMaxDuration()>(), 66)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack7 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: net.jodah.lyra.util.Duration getMaxDuration()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack7 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: net.jodah.lyra.util.Duration getMaxDuration()>(), 34)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,this := @this: net.jodah.lyra.util.Duration,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack1 = this.<net.jodah.lyra.util.Duration: java.util.concurrent.TimeUnit timeUnit>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack1 = this.<net.jodah.lyra.util.Duration: java.util.concurrent.TimeUnit timeUnit>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack11 = $stack10 cmp $stack9,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack11 = $stack10 cmp $stack9, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack11 >= 0 goto $stack12 = 0,94,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long interval> = $stack5,28,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long interval> = $stack5, 28)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack18 = this.<net.jodah.lyra.internal.RecurringStats: long interval>,31,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack18 = this.<net.jodah.lyra.internal.RecurringStats: long interval>, 31)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack18,31,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack18, 31)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack19 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack19 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack5 = $stack4 cmp -1L,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack5 = $stack4 cmp -1L, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack5 == 0 goto $stack12 = 1,93,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryStats = $stack30,76,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>,this := @this: net.jodah.lyra.internal.RecurringStats,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,this := @this: net.jodah.lyra.internal.RecurringStats,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long startTime>,81,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long startTime>, 81)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,elapsedNanos = now - $stack12,81,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, elapsedNanos = now - $stack12, 81)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack14 = $stack13 - elapsedNanos,82,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack14 = $stack13 - elapsedNanos, 82)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack16 = staticinvoke <java.lang.Math: long min(long,long)>($stack15, $stack14),82,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack16 = staticinvoke <java.lang.Math: long min(long,long)>($stack15, $stack14), 82)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack16,82,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack16, 82)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack5 = $stack4 cmp -1L,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack5 = $stack4 cmp -1L, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack5 == 0 goto $stack12 = 1,93,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,now = staticinvoke <java.lang.System: long nanoTime()>(),72,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, now = staticinvoke <java.lang.System: long nanoTime()>(), 72)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,elapsedNanos = now - $stack12,81,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, elapsedNanos = now - $stack12, 81)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack14 = $stack13 - elapsedNanos,82,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack14 = $stack13 - elapsedNanos, 82)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack16 = staticinvoke <java.lang.Math: long min(long,long)>($stack15, $stack14),82,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack16 = staticinvoke <java.lang.Math: long min(long,long)>($stack15, $stack14), 82)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack16,82,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack16, 82)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack11 = $stack10 cmp $stack9,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack11 = $stack10 cmp $stack9, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack11 >= 0 goto $stack12 = 0,94,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringPolicy: net.jodah.lyra.util.Duration getMaxDuration()>,$stack1 = this.<net.jodah.lyra.internal.RecurringPolicy: net.jodah.lyra.util.Duration maxDuration>,69,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack33 = virtualinvoke recurringPolicy.<net.jodah.lyra.internal.RecurringPolicy: net.jodah.lyra.util.Duration getMaxDuration()>(), 66)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack7 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: net.jodah.lyra.util.Duration getMaxDuration()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack7 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: net.jodah.lyra.util.Duration getMaxDuration()>(), 34)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,this := @this: net.jodah.lyra.util.Duration,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack1 = this.<net.jodah.lyra.util.Duration: java.util.concurrent.TimeUnit timeUnit>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack1 = this.<net.jodah.lyra.util.Duration: java.util.concurrent.TimeUnit timeUnit>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack5 = $stack4 cmp -1L,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack5 = $stack4 cmp -1L, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack5 == 0 goto $stack12 = 1,93,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,command = (com.rabbitmq.client.Command) reason,99,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, command = (com.rabbitmq.client.Command) reason, 99)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close,103,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close, 103)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,if $stack9 == 0 goto return 0,103,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,reason = virtualinvoke e.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object getReason()>(),97,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, reason = virtualinvoke e.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object getReason()>(), 97)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack6 = reason instanceof com.rabbitmq.client.Command,98,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack6 = reason instanceof com.rabbitmq.client.Command, 98)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,if $stack6 == 0 goto return 0,98,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack14 = (com.rabbitmq.client.AMQP$Connection$Close) method,102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack14 = (com.rabbitmq.client.AMQP$Connection$Close) method, 102)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack15 = interfaceinvoke $stack14.<com.rabbitmq.client.AMQP$Connection$Close: int getReplyCode()>(),102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack15 = interfaceinvoke $stack14.<com.rabbitmq.client.AMQP$Connection$Close: int getReplyCode()>(), 102)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack16 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack15),102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,return $stack16,102,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack25 = staticinvoke <java.lang.Math: long min(long,long)>($stack24, $stack23),78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack25 = staticinvoke <java.lang.Math: long min(long,long)>($stack24, $stack23), 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack25,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack25, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack11 = $stack10 cmp $stack9,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack11 = $stack10 cmp $stack9, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack11 >= 0 goto $stack12 = 0,94,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryStats = $stack30,76,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,this := @this: net.jodah.lyra.internal.RecurringStats,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack3 = this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts>,92,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack3 = this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts>, 92)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack3 == -1 goto $stack16 = 1,92,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: int attemptCount>,67,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: int attemptCount>, 67)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>,$stack2 = $stack1 + 1,67,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, $stack2 = $stack1 + 1, 67)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>,this.<net.jodah.lyra.internal.RecurringStats: int attemptCount> = $stack2,67,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, this.<net.jodah.lyra.internal.RecurringStats: int attemptCount> = $stack2, 67)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack15 = this.<net.jodah.lyra.internal.RecurringStats: int attemptCount>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack15 = this.<net.jodah.lyra.internal.RecurringStats: int attemptCount>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack15 >= $stack14 goto $stack16 = 0,94,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long startTime>,81,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long startTime>, 81)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack8 = this.<net.jodah.lyra.internal.RecurringStats: long startTime>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack8 = this.<net.jodah.lyra.internal.RecurringStats: long startTime>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack10 = $stack7 - $stack8,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack10 = $stack7 - $stack8, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack11 = $stack10 cmp $stack9,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack11 = $stack10 cmp $stack9, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack11 >= 0 goto $stack12 = 0,94,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long startTime>,81,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long startTime>, 81)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,elapsedNanos = now - $stack12,81,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, elapsedNanos = now - $stack12, 81)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack14 = $stack13 - elapsedNanos,82,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack14 = $stack13 - elapsedNanos, 82)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack16 = staticinvoke <java.lang.Math: long min(long,long)>($stack15, $stack14),82,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack16 = staticinvoke <java.lang.Math: long min(long,long)>($stack15, $stack14), 82)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack16,82,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack16, 82)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack5 = $stack4 cmp -1L,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack5 = $stack4 cmp -1L, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack5 == 0 goto $stack12 = 1,93,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack25 = staticinvoke <java.lang.Math: long min(long,long)>($stack24, $stack23),78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack25 = staticinvoke <java.lang.Math: long min(long,long)>($stack24, $stack23), 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack25,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack25, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack5 = $stack4 cmp -1L,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack5 = $stack4 cmp -1L, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack5 == 0 goto $stack12 = 1,93,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method,104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method, 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(), 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack13 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack12),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,return $stack13,104,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack16 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack15),102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,$stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse),45,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,if $stack9 == 0 goto $stack10 = 0,45,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,$stack5 = e instanceof com.rabbitmq.client.AlreadyClosedException,42,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack5 = e instanceof com.rabbitmq.client.AlreadyClosedException, 42)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,if $stack5 != 0 goto return 1,42,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close,103,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close, 103)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,if $stack9 == 0 goto return 0,103,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack8 = method instanceof com.rabbitmq.client.AMQP$Connection$Close,101,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack8 = method instanceof com.rabbitmq.client.AMQP$Connection$Close, 101)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,if $stack8 == 0 goto $stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close,101,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack11 = $stack10 cmp $stack9,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack11 = $stack10 cmp $stack9, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack11 >= 0 goto $stack12 = 0,94,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack11 = $stack10 cmp $stack9,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack11 = $stack10 cmp $stack9, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack11 >= 0 goto $stack12 = 0,94,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,$stack2 = e instanceof java.net.SocketTimeoutException,40,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack2 = e instanceof java.net.SocketTimeoutException, 40)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,if $stack2 != 0 goto return 1,40,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,now = staticinvoke <java.lang.System: long nanoTime()>(),72,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, now = staticinvoke <java.lang.System: long nanoTime()>(), 72)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,elapsedNanos = now - $stack12,81,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, elapsedNanos = now - $stack12, 81)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack14 = $stack13 - elapsedNanos,82,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack14 = $stack13 - elapsedNanos, 82)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack16 = staticinvoke <java.lang.Math: long min(long,long)>($stack15, $stack14),82,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack16 = staticinvoke <java.lang.Math: long min(long,long)>($stack15, $stack14), 82)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack16,82,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack16, 82)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack5 = $stack4 cmp -1L,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack5 = $stack4 cmp -1L, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack5 == 0 goto $stack12 = 1,93,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,reason = virtualinvoke e.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object getReason()>(),97,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, reason = virtualinvoke e.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object getReason()>(), 97)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,command = (com.rabbitmq.client.Command) reason,99,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, command = (com.rabbitmq.client.Command) reason, 99)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method,104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method, 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(), 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack13 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack12),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,$stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse),45,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,if $stack9 == 0 goto $stack10 = 0,45,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,reason = virtualinvoke e.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object getReason()>(),97,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, reason = virtualinvoke e.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object getReason()>(), 97)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,command = (com.rabbitmq.client.Command) reason,99,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, command = (com.rabbitmq.client.Command) reason, 99)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack14 = (com.rabbitmq.client.AMQP$Connection$Close) method,102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack14 = (com.rabbitmq.client.AMQP$Connection$Close) method, 102)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack15 = interfaceinvoke $stack14.<com.rabbitmq.client.AMQP$Connection$Close: int getReplyCode()>(),102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack15 = interfaceinvoke $stack14.<com.rabbitmq.client.AMQP$Connection$Close: int getReplyCode()>(), 102)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack16 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack15),102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,return $stack16,102,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack5 = $stack4 cmp -1L,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack5 = $stack4 cmp -1L, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack5 == 0 goto $stack12 = 1,93,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack11,35,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack11, 35)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack19 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack19 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack11 = $stack10 cmp $stack9,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack11 = $stack10 cmp $stack9, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack11 >= 0 goto $stack12 = 0,94,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,reason = virtualinvoke e.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object getReason()>(),97,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, reason = virtualinvoke e.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object getReason()>(), 97)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,command = (com.rabbitmq.client.Command) reason,99,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, command = (com.rabbitmq.client.Command) reason, 99)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close,103,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close, 103)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,if $stack9 == 0 goto return 0,103,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack10 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,80,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack10 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 80)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack5 = $stack4 cmp -1L,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack5 = $stack4 cmp -1L, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack5 == 0 goto $stack12 = 1,93,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier> = -1.0,18,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier> = -1.0, 18)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack20 = this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier>,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack20 = this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier>, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack22 = $stack21 * $stack20,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack22 = $stack21 * $stack20, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack23 = (long) $stack22,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack23 = (long) $stack22, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack25 = staticinvoke <java.lang.Math: long min(long,long)>($stack24, $stack23),78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack25 = staticinvoke <java.lang.Math: long min(long,long)>($stack24, $stack23), 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack25,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack25, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack11 = $stack10 cmp $stack9,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack11 = $stack10 cmp $stack9, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack11 >= 0 goto $stack12 = 0,94,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack5 = 0L,39,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long interval> = $stack5, 28)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long interval> = $stack5,28,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long interval> = $stack5, 28)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack18 = this.<net.jodah.lyra.internal.RecurringStats: long interval>,31,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack18 = this.<net.jodah.lyra.internal.RecurringStats: long interval>, 31)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack18,31,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack18, 31)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack19 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack19 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack5 = $stack4 cmp -1L,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack5 = $stack4 cmp -1L, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack5 == 0 goto $stack12 = 1,93,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = -1L,30,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = -1L, 30)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack11 = $stack10 cmp $stack9,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack11 = $stack10 cmp $stack9, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack11 >= 0 goto $stack12 = 0,94,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,$stack8 = e instanceof com.rabbitmq.client.PossibleAuthenticationFailureException,43,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack8 = e instanceof com.rabbitmq.client.PossibleAuthenticationFailureException, 43)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,if $stack8 == 0 goto (branch),43,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method,104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method, 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(), 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack13 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack12),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,$stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse),45,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,if $stack9 == 0 goto $stack10 = 0,45,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack16 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: net.jodah.lyra.util.Duration getMaxInterval()>(),41,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack16 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: net.jodah.lyra.util.Duration getMaxInterval()>(), 41)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack17 = virtualinvoke $stack16.<net.jodah.lyra.util.Duration: long toNanos()>(),41,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack17 = virtualinvoke $stack16.<net.jodah.lyra.util.Duration: long toNanos()>(), 41)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxInterval> = $stack17,41,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxInterval> = $stack17, 41)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack24 = this.<net.jodah.lyra.internal.RecurringStats: long maxInterval>,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack24 = this.<net.jodah.lyra.internal.RecurringStats: long maxInterval>, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack25 = staticinvoke <java.lang.Math: long min(long,long)>($stack24, $stack23),78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack25 = staticinvoke <java.lang.Math: long min(long,long)>($stack24, $stack23), 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack25,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack25, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack11 = $stack10 cmp $stack9,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack11 = $stack10 cmp $stack9, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack11 >= 0 goto $stack12 = 0,94,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long interval> = $stack5,28,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long interval> = $stack5, 28)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack18 = this.<net.jodah.lyra.internal.RecurringStats: long interval>,31,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack18 = this.<net.jodah.lyra.internal.RecurringStats: long interval>, 31)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack18,31,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack18, 31)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack19 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack19 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack11 = $stack10 cmp $stack9,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack11 = $stack10 cmp $stack9, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack11 >= 0 goto $stack12 = 0,94,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,command = (com.rabbitmq.client.Command) reason,99,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, command = (com.rabbitmq.client.Command) reason, 99)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method,104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method, 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(), 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack13 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack12),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,return $stack13,104,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringPolicy: int getIntervalMultiplier()>,$stack1 = this.<net.jodah.lyra.internal.RecurringPolicy: int intervalMultiplier>,51,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack14 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: int getIntervalMultiplier()>(), 40)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack14 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: int getIntervalMultiplier()>(),40,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack14 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: int getIntervalMultiplier()>(), 40)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack15 = (double) $stack14,40,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack15 = (double) $stack14, 40)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier> = $stack15,40,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier> = $stack15, 40)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack20 = this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier>,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack20 = this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier>, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack22 = $stack21 * $stack20,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack22 = $stack21 * $stack20, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack23 = (long) $stack22,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack23 = (long) $stack22, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack25 = staticinvoke <java.lang.Math: long min(long,long)>($stack24, $stack23),78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack25 = staticinvoke <java.lang.Math: long min(long,long)>($stack24, $stack23), 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack25,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack25, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack11 = $stack10 cmp $stack9,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack11 = $stack10 cmp $stack9, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack11 >= 0 goto $stack12 = 0,94,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack18 = this.<net.jodah.lyra.internal.RecurringStats: long interval>,31,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack18 = this.<net.jodah.lyra.internal.RecurringStats: long interval>, 31)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack18,31,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack18, 31)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack19 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack19 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack5 = $stack4 cmp -1L,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack5 = $stack4 cmp -1L, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack5 == 0 goto $stack12 = 1,93,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringPolicy: int getMaxAttempts()>,$stack1 = this.<net.jodah.lyra.internal.RecurringPolicy: int maxAttempts>,60,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack2 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: int getMaxAttempts()>(), 27)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack2 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: int getMaxAttempts()>(),27,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack2 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: int getMaxAttempts()>(), 27)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts> = $stack2,27,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts> = $stack2, 27)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack14 = this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack14 = this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack15 >= $stack14 goto $stack16 = 0,94,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack16 = staticinvoke <java.lang.Math: long min(long,long)>($stack15, $stack14),82,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack16 = staticinvoke <java.lang.Math: long min(long,long)>($stack15, $stack14), 82)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack16,82,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack16, 82)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack11 = $stack10 cmp $stack9,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack11 = $stack10 cmp $stack9, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack11 >= 0 goto $stack12 = 0,94,SinkNode, path: )), List(Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1), 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack11 = $stack10 cmp $stack9,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack11 = $stack10 cmp $stack9, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack11 >= 0 goto $stack12 = 0,94,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack17 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,83,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack17 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 83)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack5 = $stack4 cmp -1L,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack5 = $stack4 cmp -1L, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack5 == 0 goto $stack12 = 1,93,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack2 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: int getMaxAttempts()>(),27,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack2 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: int getMaxAttempts()>(), 27)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts> = $stack2,27,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts> = $stack2, 27)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack14 = this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack14 = this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack15 >= $stack14 goto $stack16 = 0,94,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method,104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method, 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(), 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack13 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack12),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,return $stack13,104,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack16 = 1,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, withinMaxRetries = $stack16, 92)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,withinMaxRetries = $stack16,92,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, withinMaxRetries = $stack16, 92)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if withinMaxRetries == 0 goto $stack6 = 1,94,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,reason = virtualinvoke e.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object getReason()>(),97,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, reason = virtualinvoke e.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object getReason()>(), 97)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,command = (com.rabbitmq.client.Command) reason,99,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, command = (com.rabbitmq.client.Command) reason, 99)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack8 = method instanceof com.rabbitmq.client.AMQP$Connection$Close,101,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack8 = method instanceof com.rabbitmq.client.AMQP$Connection$Close, 101)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,if $stack8 == 0 goto $stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close,101,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack18 = this.<net.jodah.lyra.internal.RecurringStats: long interval>,31,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack18 = this.<net.jodah.lyra.internal.RecurringStats: long interval>, 31)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack18,31,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack18, 31)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack19 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack19 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack11 = $stack10 cmp $stack9,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack11 = $stack10 cmp $stack9, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack11 >= 0 goto $stack12 = 0,94,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close,103,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close, 103)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,if $stack9 == 0 goto return 0,103,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack8 = method instanceof com.rabbitmq.client.AMQP$Connection$Close,101,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack8 = method instanceof com.rabbitmq.client.AMQP$Connection$Close, 101)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,if $stack8 == 0 goto $stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close,101,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = -1L,30,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = -1L, 30)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack5 = $stack4 cmp -1L,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack5 = $stack4 cmp -1L, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack5 == 0 goto $stack12 = 1,93,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,$stack7 = $stack6 instanceof java.io.EOFException,41,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack7 = $stack6 instanceof java.io.EOFException, 41)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,if $stack7 == 0 goto $stack8 = e instanceof com.rabbitmq.client.PossibleAuthenticationFailureException,41,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack16 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack15),102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,return $stack16,102,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,reason = virtualinvoke e.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object getReason()>(),97,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, reason = virtualinvoke e.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object getReason()>(), 97)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,command = (com.rabbitmq.client.Command) reason,99,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, command = (com.rabbitmq.client.Command) reason, 99)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method,104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method, 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(), 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack13 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack12),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,return $stack13,104,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack14 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: int getIntervalMultiplier()>(),40,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack14 = virtualinvoke retryPolicy.<net.jodah.lyra.internal.RecurringPolicy: int getIntervalMultiplier()>(), 40)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack15 = (double) $stack14,40,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack15 = (double) $stack14, 40)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier> = $stack15,40,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier> = $stack15, 40)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack20 = this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier>,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack20 = this.<net.jodah.lyra.internal.RecurringStats: double intervalMultiplier>, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack22 = $stack21 * $stack20,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack22 = $stack21 * $stack20, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack23 = (long) $stack22,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack23 = (long) $stack22, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack25 = staticinvoke <java.lang.Math: long min(long,long)>($stack24, $stack23),78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack25 = staticinvoke <java.lang.Math: long min(long,long)>($stack24, $stack23), 78)) => Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack25,78,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, this.<net.jodah.lyra.internal.RecurringStats: long waitTime> = $stack25, 78)) => Node(<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>,$stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>,60,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack23 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>(), 79) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getWaitTime()>, $stack1 = this.<net.jodah.lyra.internal.RecurringStats: long waitTime>, 60)) => Node(<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>,count := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,length := @parameter0: long,-1,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246)) => Node(<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>,this.<net.jodah.lyra.util.Duration: long length> = length,67,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>, $stack4 = staticinvoke <net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>($stack3), 51) => (<net.jodah.lyra.util.Duration: net.jodah.lyra.util.Duration nanos(long)>, specialinvoke $stack2.<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>(count, $stack3), 246) => (<net.jodah.lyra.util.Duration: void <init>(long,java.util.concurrent.TimeUnit)>, this.<net.jodah.lyra.util.Duration: long length> = length, 67)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack2 = this.<net.jodah.lyra.util.Duration: long length>,147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71) => (<net.jodah.lyra.util.Duration: long toNanos()>, $stack2 = this.<net.jodah.lyra.util.Duration: long length>, 147)) => Node(<net.jodah.lyra.util.Duration: long toNanos()>,$stack4 = virtualinvoke $stack3.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($stack2, $stack1),147,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack36 = virtualinvoke $stack34.<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>($stack35), 68) => (<net.jodah.lyra.internal.util.concurrent.ReentrantCircuit: boolean await(net.jodah.lyra.util.Duration)>, $stack4 = virtualinvoke waitDuration.<net.jodah.lyra.util.Duration: long toNanos()>(), 71)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(),34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack8 = virtualinvoke $stack7.<net.jodah.lyra.util.Duration: long toNanos()>(), 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack11 = $stack10 cmp $stack9,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack11 = $stack10 cmp $stack9, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack11 >= 0 goto $stack12 = 0,94,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringStats: void incrementTime()>,$stack17 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,83,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77) => (<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>, virtualinvoke this.<net.jodah.lyra.internal.RecurringStats: void incrementTime()>(), 68) => (<net.jodah.lyra.internal.RecurringStats: void incrementTime()>, $stack17 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 83)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack9 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack11 = $stack10 cmp $stack9,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack11 = $stack10 cmp $stack9, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack11 >= 0 goto $stack12 = 0,94,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8,34,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, this.<net.jodah.lyra.internal.RecurringStats: long maxDuration> = $stack8, 34)) => Node(<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>,$stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,36,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, specialinvoke $stack30.<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>(recurringPolicy), 76) => (<net.jodah.lyra.internal.RecurringStats: void <init>(net.jodah.lyra.internal.RecurringPolicy)>, $stack12 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 36)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack4 = this.<net.jodah.lyra.internal.RecurringStats: long maxDuration>, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack5 = $stack4 cmp -1L,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack5 = $stack4 cmp -1L, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack5 == 0 goto $stack12 = 1,93,SinkNode, path: ))]
Visited methods: 27
 Analysis results
----------------------------
 Number of conflicts: 81
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/lyra/14e69c369afca578a1fd2796c2f6588f2cfe90b8/original-without-dependencies/lyra-0.3.2-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,45500
Time to perform DFP Inter 0,90500
Depth limit: 5
CONFLICTS: DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Data flows from execution of line 59 to 59, defined in $stack41 = 1 and propagated in retryable = $stack41
Caused by line 59 flow: path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, retryable = $stack41, 59)
Caused by line 59 flow: path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, retryable = $stack41, 59)
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>
Empty list for reporting data flow! Error: head of empty list
[List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack13 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack12),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,return $stack13,104,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,$stack10 = 1,45,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,return $stack10,45,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack6 = reason instanceof com.rabbitmq.client.Command,98,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack6 = reason instanceof com.rabbitmq.client.Command, 98)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,if $stack6 == 0 goto return 0,98,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack5 = $stack4 cmp -1L,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack5 = $stack4 cmp -1L, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack5 == 0 goto $stack12 = 1,93,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,withinMaxDuration = $stack12,93,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, withinMaxDuration = $stack12, 93)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if withinMaxDuration != 0 goto $stack6 = 0,94,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack3 = this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts>,92,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack3 = this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts>, 92)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack3 == -1 goto $stack16 = 1,92,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack14 = (com.rabbitmq.client.AMQP$Connection$Close) method,102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack14 = (com.rabbitmq.client.AMQP$Connection$Close) method, 102)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack15 = interfaceinvoke $stack14.<com.rabbitmq.client.AMQP$Connection$Close: int getReplyCode()>(),102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack15 = interfaceinvoke $stack14.<com.rabbitmq.client.AMQP$Connection$Close: int getReplyCode()>(), 102)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack16 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack15),102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,$stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse),45,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,if $stack9 == 0 goto $stack10 = 0,45,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,command = (com.rabbitmq.client.Command) reason,99,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, command = (com.rabbitmq.client.Command) reason, 99)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack14 = (com.rabbitmq.client.AMQP$Connection$Close) method,102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack14 = (com.rabbitmq.client.AMQP$Connection$Close) method, 102)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack15 = interfaceinvoke $stack14.<com.rabbitmq.client.AMQP$Connection$Close: int getReplyCode()>(),102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack15 = interfaceinvoke $stack14.<com.rabbitmq.client.AMQP$Connection$Close: int getReplyCode()>(), 102)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack16 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack15),102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,return $stack16,102,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack14 = (com.rabbitmq.client.AMQP$Connection$Close) method,102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack14 = (com.rabbitmq.client.AMQP$Connection$Close) method, 102)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack15 = interfaceinvoke $stack14.<com.rabbitmq.client.AMQP$Connection$Close: int getReplyCode()>(),102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack15 = interfaceinvoke $stack14.<com.rabbitmq.client.AMQP$Connection$Close: int getReplyCode()>(), 102)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack16 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack15),102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,return $stack16,102,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,command = (com.rabbitmq.client.Command) reason,99,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, command = (com.rabbitmq.client.Command) reason, 99)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack8 = method instanceof com.rabbitmq.client.AMQP$Connection$Close,101,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack8 = method instanceof com.rabbitmq.client.AMQP$Connection$Close, 101)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,if $stack8 == 0 goto $stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close,101,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,command = (com.rabbitmq.client.Command) reason,99,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, command = (com.rabbitmq.client.Command) reason, 99)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method,104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method, 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(), 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack13 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack12),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,$stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse),45,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,if $stack9 == 0 goto $stack10 = 0,45,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,command = (com.rabbitmq.client.Command) reason,99,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, command = (com.rabbitmq.client.Command) reason, 99)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close,103,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close, 103)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,if $stack9 == 0 goto return 0,103,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,reason = virtualinvoke e.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object getReason()>(),97,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, reason = virtualinvoke e.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object getReason()>(), 97)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack6 = reason instanceof com.rabbitmq.client.Command,98,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack6 = reason instanceof com.rabbitmq.client.Command, 98)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,if $stack6 == 0 goto return 0,98,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack14 = (com.rabbitmq.client.AMQP$Connection$Close) method,102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack14 = (com.rabbitmq.client.AMQP$Connection$Close) method, 102)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack15 = interfaceinvoke $stack14.<com.rabbitmq.client.AMQP$Connection$Close: int getReplyCode()>(),102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack15 = interfaceinvoke $stack14.<com.rabbitmq.client.AMQP$Connection$Close: int getReplyCode()>(), 102)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack16 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack15),102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,return $stack16,102,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method,104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method, 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(), 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack13 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack12),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,return $stack13,104,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close,103,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close, 103)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,if $stack9 == 0 goto return 0,103,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack8 = method instanceof com.rabbitmq.client.AMQP$Connection$Close,101,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack8 = method instanceof com.rabbitmq.client.AMQP$Connection$Close, 101)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,if $stack8 == 0 goto $stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close,101,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack13 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack12),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,$stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse),45,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,if $stack9 == 0 goto $stack10 = 0,45,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,$stack2 = e instanceof java.net.SocketTimeoutException,40,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack2 = e instanceof java.net.SocketTimeoutException, 40)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,if $stack2 != 0 goto return 1,40,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,reason = virtualinvoke e.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object getReason()>(),97,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, reason = virtualinvoke e.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object getReason()>(), 97)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,command = (com.rabbitmq.client.Command) reason,99,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, command = (com.rabbitmq.client.Command) reason, 99)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method,104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method, 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(), 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack13 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack12),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,$stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse),45,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,if $stack9 == 0 goto $stack10 = 0,45,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,reason = virtualinvoke e.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object getReason()>(),97,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, reason = virtualinvoke e.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object getReason()>(), 97)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,command = (com.rabbitmq.client.Command) reason,99,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, command = (com.rabbitmq.client.Command) reason, 99)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack14 = (com.rabbitmq.client.AMQP$Connection$Close) method,102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack14 = (com.rabbitmq.client.AMQP$Connection$Close) method, 102)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack15 = interfaceinvoke $stack14.<com.rabbitmq.client.AMQP$Connection$Close: int getReplyCode()>(),102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack15 = interfaceinvoke $stack14.<com.rabbitmq.client.AMQP$Connection$Close: int getReplyCode()>(), 102)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack16 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack15),102,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,return $stack16,102,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack41 = 1,63,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, retryable = $stack41, 59)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryable = $stack41,59,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, retryable = $stack41, 59))), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,reason = virtualinvoke e.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object getReason()>(),97,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, reason = virtualinvoke e.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object getReason()>(), 97)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,command = (com.rabbitmq.client.Command) reason,99,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, command = (com.rabbitmq.client.Command) reason, 99)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close,103,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close, 103)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,if $stack9 == 0 goto return 0,103,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,$stack3 = e instanceof java.net.ConnectException,42,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack3 = e instanceof java.net.ConnectException, 42)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,if $stack3 != 0 goto return 1,42,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,$stack8 = e instanceof com.rabbitmq.client.PossibleAuthenticationFailureException,43,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack8 = e instanceof com.rabbitmq.client.PossibleAuthenticationFailureException, 43)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,if $stack8 == 0 goto (branch),43,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method,104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method, 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(), 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack13 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack12),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,$stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse),45,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,if $stack9 == 0 goto $stack10 = 0,45,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,command = (com.rabbitmq.client.Command) reason,99,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, command = (com.rabbitmq.client.Command) reason, 99)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method,104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method, 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(), 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack13 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack12),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,return $stack13,104,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack3 = this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts>,92,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack3 = this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts>, 92)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack14 = this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack14 = this.<net.jodah.lyra.internal.RecurringStats: int maxAttempts>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack15 >= $stack14 goto $stack16 = 0,94,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,reason = virtualinvoke e.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object getReason()>(),97,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, reason = virtualinvoke e.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object getReason()>(), 97)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,command = (com.rabbitmq.client.Command) reason,99,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, command = (com.rabbitmq.client.Command) reason, 99)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack8 = method instanceof com.rabbitmq.client.AMQP$Connection$Close,101,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack8 = method instanceof com.rabbitmq.client.AMQP$Connection$Close, 101)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,if $stack8 == 0 goto $stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close,101,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,$stack15 = this.<net.jodah.lyra.internal.RecurringStats: int attemptCount>,94,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack22 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>(), 78) => (<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>, $stack15 = this.<net.jodah.lyra.internal.RecurringStats: int attemptCount>, 94)) => Node(<net.jodah.lyra.internal.RecurringStats: boolean isPolicyExceeded()>,if $stack15 >= $stack14 goto $stack16 = 0,94,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close,103,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close, 103)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,if $stack9 == 0 goto return 0,103,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack8 = method instanceof com.rabbitmq.client.AMQP$Connection$Close,101,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack8 = method instanceof com.rabbitmq.client.AMQP$Connection$Close, 101)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,if $stack8 == 0 goto $stack9 = method instanceof com.rabbitmq.client.AMQP$Channel$Close,101,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,$stack7 = $stack6 instanceof java.io.EOFException,41,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack7 = $stack6 instanceof java.io.EOFException, 41)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>,if $stack7 == 0 goto $stack8 = e instanceof com.rabbitmq.client.PossibleAuthenticationFailureException,41,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,reason = virtualinvoke e.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object getReason()>(),97,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, reason = virtualinvoke e.<com.rabbitmq.client.ShutdownSignalException: java.lang.Object getReason()>(), 97)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,command = (com.rabbitmq.client.Command) reason,99,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, command = (com.rabbitmq.client.Command) reason, 99)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(),100,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, method = interfaceinvoke command.<com.rabbitmq.client.Command: com.rabbitmq.client.Method getMethod()>(), 100)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method,104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack11 = (com.rabbitmq.client.AMQP$Channel$Close) method, 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>, $stack12 = interfaceinvoke $stack11.<com.rabbitmq.client.AMQP$Channel$Close: int getReplyCode()>(), 104)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,$stack13 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(int)>($stack12),104,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack43 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>(e, sse), 60) => (<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(java.lang.Exception,com.rabbitmq.client.ShutdownSignalException)>, $stack9 = staticinvoke <net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>(sse), 45)) => Node(<net.jodah.lyra.internal.util.Exceptions: boolean isRetryable(com.rabbitmq.client.ShutdownSignalException)>,return $stack13,104,SinkNode, path: ))]
Visited methods: 27
 Analysis results
----------------------------
 Number of conflicts: 34
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/lyra/14e69c369afca578a1fd2796c2f6588f2cfe90b8/original-without-dependencies/lyra-0.3.2-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,41500
Time to perform PDG 0,46600
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/lyra/14e69c369afca578a1fd2796c2f6588f2cfe90b8/original-without-dependencies/lyra-0.3.2-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,39500
Time to perform PDG 0,54700
CONFLICTS: [List(Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if sse == null goto $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,53,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recovery != 0 goto throw e,63,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recoverable != 0 goto $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,54,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,56,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>, 56)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if $stack19 != 0 goto throw e,56,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryable = $stack41,59,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, retryable = $stack41, 59)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryable == 0 goto (branch),63,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if sse == null goto (branch),65,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryStats != null goto virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(),75,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryStats = $stack30,76,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(),77,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77))), List(Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryStats == null goto $stack15 = 0,42,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack15 = 1,46,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, recovery = $stack15, 42)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,recovery = $stack15,42,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, recovery = $stack15, 42)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recovery != 0 goto throw e,63,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recoverable != 0 goto $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,54,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,56,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>, 56)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if $stack19 != 0 goto throw e,56,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recurringPolicy == null goto $stack41 = 0,59,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryStats == null goto $stack15 = 0,42,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack15 = 1,46,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, recovery = $stack15, 42)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,recovery = $stack15,42,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, recovery = $stack15, 42)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recovery != 0 goto throw e,63,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recoverable != 0 goto $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,54,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,56,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>, 56)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if $stack19 != 0 goto throw e,56,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryable = $stack41,59,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, retryable = $stack41, 59)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryable == 0 goto (branch),63,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if sse == null goto (branch),65,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryStats != null goto virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(),75,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryStats = $stack30,76,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(),77,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77))), List(Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if sse == null goto $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,53,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recovery != 0 goto throw e,63,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recoverable != 0 goto $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,54,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,56,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>, 56)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if $stack19 != 0 goto throw e,56,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryable = $stack41,59,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, retryable = $stack41, 59)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryable == 0 goto (branch),63,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if sse == null goto (branch),65,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryStats != null goto virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(),75,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryStats = $stack30,76,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68))), List(Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if sse == null goto $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,53,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recovery != 0 goto throw e,63,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recoverable != 0 goto $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,54,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,56,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>, 56)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if $stack19 != 0 goto throw e,56,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recurringPolicy == null goto $stack41 = 0,59,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if sse == null goto (branch),65,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if $stack33 != null goto $stack34 = this.<net.jodah.lyra.internal.RetryableResource: net.jodah.lyra.internal.util.concurrent.ReentrantCircuit circuit>,66,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if $stack43 == 0 goto $stack41 = 0,60,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack41 = 1,63,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, retryable = $stack41, 59)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack41 = 0,75,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, retryable = $stack41, 59)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryable = $stack41,59,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, retryable = $stack41, 59)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryable == 0 goto (branch),63,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if sse == null goto (branch),65,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryStats != null goto virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(),75,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryStats = $stack30,76,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(),77,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77))), List(Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recovery != 0 goto throw e,63,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recoverable != 0 goto $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,54,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,56,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>, 56)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if $stack19 != 0 goto throw e,56,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryable = $stack41,59,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, retryable = $stack41, 59)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryable == 0 goto (branch),63,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if sse == null goto (branch),65,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if $stack33 != null goto $stack34 = this.<net.jodah.lyra.internal.RetryableResource: net.jodah.lyra.internal.util.concurrent.ReentrantCircuit circuit>,66,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recovery != 0 goto throw e,63,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recoverable != 0 goto $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,54,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,56,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>, 56)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if $stack19 != 0 goto throw e,56,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recurringPolicy == null goto $stack41 = 0,59,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if $stack43 == 0 goto $stack41 = 0,60,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack41 = 1,63,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, retryable = $stack41, 59)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack41 = 0,75,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, retryable = $stack41, 59)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryable = $stack41,59,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, retryable = $stack41, 59)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryable == 0 goto (branch),63,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if sse == null goto (branch),65,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryStats != null goto virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(),75,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryStats = $stack30,76,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68))), List(Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryStats == null goto $stack15 = 0,42,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack15 = 1,46,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, recovery = $stack15, 42)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,recovery = $stack15,42,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, recovery = $stack15, 42)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recovery != 0 goto throw e,63,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recoverable != 0 goto $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,54,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,56,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>, 56)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if $stack19 != 0 goto throw e,56,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryable = $stack41,59,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, retryable = $stack41, 59)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryable == 0 goto (branch),63,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if sse == null goto (branch),65,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryStats != null goto virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(),75,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryStats = $stack30,76,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68))), List(Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if $stack43 == 0 goto $stack41 = 0,60,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack41 = 1,63,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, retryable = $stack41, 59)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack41 = 0,75,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, retryable = $stack41, 59)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryable = $stack41,59,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, retryable = $stack41, 59))), List(Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if sse == null goto $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,53,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recovery != 0 goto throw e,63,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recoverable != 0 goto $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,54,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,56,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>, 56)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if $stack19 != 0 goto throw e,56,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryable = $stack41,59,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, retryable = $stack41, 59)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryable == 0 goto (branch),63,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if sse == null goto (branch),65,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if $stack33 != null goto $stack34 = this.<net.jodah.lyra.internal.RetryableResource: net.jodah.lyra.internal.util.concurrent.ReentrantCircuit circuit>,66,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if $stack43 == 0 goto $stack41 = 0,60,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack41 = 1,63,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, retryable = $stack41, 59)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack41 = 0,75,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, retryable = $stack41, 59)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryable = $stack41,59,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, retryable = $stack41, 59)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryable == 0 goto (branch),63,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if sse == null goto (branch),65,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if $stack33 != null goto $stack34 = this.<net.jodah.lyra.internal.RetryableResource: net.jodah.lyra.internal.util.concurrent.ReentrantCircuit circuit>,66,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if sse == null goto (branch),65,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryStats != null goto virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(),75,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryStats = $stack30,76,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(),77,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77))), List(Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryStats == null goto $stack15 = 0,42,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack15 = 1,46,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, recovery = $stack15, 42)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,recovery = $stack15,42,SourceNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, recovery = $stack15, 42)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recovery != 0 goto throw e,63,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recoverable != 0 goto $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,54,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,56,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>, 56)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if $stack19 != 0 goto throw e,56,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryable = $stack41,59,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, retryable = $stack41, 59)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryable == 0 goto (branch),63,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if sse == null goto (branch),65,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if $stack33 != null goto $stack34 = this.<net.jodah.lyra.internal.RetryableResource: net.jodah.lyra.internal.util.concurrent.ReentrantCircuit circuit>,66,SinkNode, path: )), List(Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recurringPolicy == null goto (branch),53,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack47 = virtualinvoke recurringPolicy.<net.jodah.lyra.internal.RecurringPolicy: boolean allowsAttempts()>(),50,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack47 = virtualinvoke recurringPolicy.<net.jodah.lyra.internal.RecurringPolicy: boolean allowsAttempts()>(), 50))), List(Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if sse == null goto (branch),65,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryStats != null goto virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(),75,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryStats = $stack30,76,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68))), List(Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recovery != 0 goto throw e,63,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recoverable != 0 goto $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,54,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,56,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>, 56)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if $stack19 != 0 goto throw e,56,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryable = $stack41,59,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, retryable = $stack41, 59)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryable == 0 goto (branch),63,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if sse == null goto (branch),65,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryStats != null goto virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(),75,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryStats = $stack30,76,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68))), List(Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recovery != 0 goto throw e,63,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if recoverable != 0 goto $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,54,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,$stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>,56,SimpleNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack19 = this.<net.jodah.lyra.internal.RetryableResource: boolean closed>, 56)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if $stack19 != 0 goto throw e,56,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryable = $stack41,59,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, retryable = $stack41, 59)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryable == 0 goto (branch),63,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if sse == null goto (branch),65,SourceNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,if retryStats != null goto virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(),75,SimpleNode, path: ) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,retryStats = $stack30,76,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, $stack35 = virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: net.jodah.lyra.util.Duration getMaxWaitTime()>(), 68)) => Node(<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>,virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(),77,SinkNode, path: (<net.jodah.lyra.internal.RetryableResource: java.lang.Object callWithRetries(java.util.concurrent.Callable,net.jodah.lyra.internal.RecurringPolicy,net.jodah.lyra.internal.RecurringStats,boolean,boolean)>, virtualinvoke retryStats.<net.jodah.lyra.internal.RecurringStats: void incrementAttempts()>(), 77)))]
 Analysis results
----------------------------
 Number of conflicts: 20
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
