[
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack5 = new java.lang.Exception,639,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack2,210,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack2, 210)) SINK=>BASE: Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack5 = new java.lang.Exception,639,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack2,210,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack2, 210))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack5 = new java.lang.Exception",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.ReferenceNozzle",
					"method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
					"line": 639
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
	"line": 639
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": 210
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack5 = new java.lang.Exception",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.ReferenceNozzle",
					"method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
					"line": 639
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
	"line": 639
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": 210
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack2",
				"location": {
					"file": "",
					"class": "java.lang.Throwable",
					"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
					"line": 210
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack5 = new java.lang.Exception,639,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(),265,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265)) SINK=>BASE: Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack5 = new java.lang.Exception,639,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(),265,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack5 = new java.lang.Exception",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.ReferenceNozzle",
					"method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
					"line": 639
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
	"line": 639
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": 265
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack5 = new java.lang.Exception",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.ReferenceNozzle",
					"method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
					"line": 639
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
	"line": 639
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": 265
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>()",
				"location": {
					"file": "",
					"class": "java.lang.Throwable",
					"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
					"line": 265
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack5 = new java.lang.Exception,639,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,specialinvoke l0.<java.lang.Object: void <init>()>(),264,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Object: void <init>()>(), 264)) SINK=>BASE: Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack5 = new java.lang.Exception,639,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,specialinvoke l0.<java.lang.Object: void <init>()>(),264,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Object: void <init>()>(), 264))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack5 = new java.lang.Exception",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.ReferenceNozzle",
					"method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
					"line": 639
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
	"line": 639
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": 264
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack5 = new java.lang.Exception",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.ReferenceNozzle",
					"method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
					"line": 639
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
	"line": 639
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": 264
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke l0.<java.lang.Object: void <init>()>()",
				"location": {
					"file": "",
					"class": "java.lang.Throwable",
					"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
					"line": 264
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Can\'t find vacuum actuator %s", $stack6),639,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, $stack8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>('Can\'t find vacuum actuator %s', $stack6), 639)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0.<java.lang.Throwable: java.lang.String detailMessage> = l1,266,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, l0.<java.lang.Throwable: java.lang.String detailMessage> = l1, 266)) SINK=>BASE: Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Can\'t find vacuum actuator %s", $stack6),639,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, $stack8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>('Can\'t find vacuum actuator %s', $stack6), 639)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0.<java.lang.Throwable: java.lang.String detailMessage> = l1,266,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, l0.<java.lang.Throwable: java.lang.String detailMessage> = l1, 266))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>('Can\'t find vacuum actuator %s', $stack6)",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.ReferenceNozzle",
					"method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
					"line": 639
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
	"line": 639
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": 266
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>('Can\'t find vacuum actuator %s', $stack6)",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.ReferenceNozzle",
					"method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
					"line": 639
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
	"line": 639
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": 266
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l0.<java.lang.Throwable: java.lang.String detailMessage> = l1",
				"location": {
					"file": "",
					"class": "java.lang.Throwable",
					"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
					"line": 266
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 673)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Actuator: java.lang.String read()>(),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Actuator: java.lang.String read()>(), 673)) => Node(<java.lang.Double: double parseDouble(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack3 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($stack2), 673)) => Node(<java.lang.Double: double parseDouble(java.lang.String)>,$stack1 = staticinvoke <sun.misc.FloatingDecimal: double parseDouble(java.lang.String)>(l0),538,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack3 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($stack2), 673)) SINK=>BASE: Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,51,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, $stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 637)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 673)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Actuator: java.lang.String read()>(),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Actuator: java.lang.String read()>(), 673)) => Node(<java.lang.Double: double parseDouble(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack3 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($stack2), 673)) => Node(<java.lang.Double: double parseDouble(java.lang.String)>,$stack1 = staticinvoke <sun.misc.FloatingDecimal: double parseDouble(java.lang.String)>(l0),538,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack3 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($stack2), 673))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
				"location": {
					"file": "",
					"class": "org.openpnp.spi.base.AbstractNozzle",
					"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
					"line": 51
				},
				"stackTrace": [{
	"class": "org.openpnp.spi.base.AbstractNozzle",
	"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
	"line": 51
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
	"line": 637
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
	"line": 637
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>",
	"line": 673
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>",
	"line": 673
},{
	"class": "java.lang.Double",
	"method": "<java.lang.Double: double parseDouble(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Double",
	"method": "<java.lang.Double: double parseDouble(java.lang.String)>",
	"line": 538
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3)",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.ReferenceNozzle",
					"method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
					"line": 637
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
	"line": 637
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>",
	"line": 673
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>",
	"line": 673
},{
	"class": "java.lang.Double",
	"method": "<java.lang.Double: double parseDouble(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Double",
	"method": "<java.lang.Double: double parseDouble(java.lang.String)>",
	"line": 538
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack1 = staticinvoke <sun.misc.FloatingDecimal: double parseDouble(java.lang.String)>(l0)",
				"location": {
					"file": "",
					"class": "java.lang.Double",
					"method": "<java.lang.Double: double parseDouble(java.lang.String)>",
					"line": 538
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Can\'t find vacuum actuator %s", $stack6),639,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, $stack8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>('Can\'t find vacuum actuator %s', $stack6), 639)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1),66,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) SINK=>BASE: Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Can\'t find vacuum actuator %s", $stack6),639,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, $stack8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>('Can\'t find vacuum actuator %s', $stack6), 639)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1),66,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>('Can\'t find vacuum actuator %s', $stack6)",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.ReferenceNozzle",
					"method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
					"line": 639
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
	"line": 639
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.String)>",
	"line": 66
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>('Can\'t find vacuum actuator %s', $stack6)",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.ReferenceNozzle",
					"method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
					"line": 639
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
	"line": 639
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.String)>",
	"line": 66
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1)",
				"location": {
					"file": "",
					"class": "java.lang.Exception",
					"method": "<java.lang.Exception: void <init>(java.lang.String)>",
					"line": 66
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack5 = new java.lang.Exception,639,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $stack3,227,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $stack3, 227)) SINK=>BASE: Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack5 = new java.lang.Exception,639,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $stack3,227,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $stack3, 227))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack5 = new java.lang.Exception",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.ReferenceNozzle",
					"method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
					"line": 639
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
	"line": 639
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": 227
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack5 = new java.lang.Exception",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.ReferenceNozzle",
					"method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
					"line": 639
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
	"line": 639
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": 227
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $stack3",
				"location": {
					"file": "",
					"class": "java.lang.Throwable",
					"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
					"line": 227
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,51,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, $stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 637)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 673)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Actuator: java.lang.String read()>(),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Actuator: java.lang.String read()>(), 673)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack3 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($stack2),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>,vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(),691,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>,$stack16 = vacuumLevel cmpg $stack15,693,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, $stack16 = vacuumLevel cmpg $stack15, 693)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>,if $stack16 > 0 goto $stack17 = 0,693,SinkNode, path: ) SINK=>BASE: Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,51,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, $stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 637)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 673)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Actuator: java.lang.String read()>(),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Actuator: java.lang.String read()>(), 673)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack3 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($stack2),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>,vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(),691,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>,$stack16 = vacuumLevel cmpg $stack15,693,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, $stack16 = vacuumLevel cmpg $stack15, 693))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
				"location": {
					"file": "",
					"class": "org.openpnp.spi.base.AbstractNozzle",
					"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
					"line": 51
				},
				"stackTrace": [{
	"class": "org.openpnp.spi.base.AbstractNozzle",
	"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
	"line": 51
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
	"line": 637
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
	"line": 637
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>",
	"line": 673
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>",
	"line": 673
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>",
	"line": 673
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>",
	"line": 691
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>",
	"line": 693
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
				"location": {
					"file": "",
					"class": "org.openpnp.spi.base.AbstractNozzle",
					"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
					"line": 51
				},
				"stackTrace": [{
	"class": "org.openpnp.spi.base.AbstractNozzle",
	"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
	"line": 51
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
	"line": 637
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
	"line": 637
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>",
	"line": 673
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>",
	"line": 673
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>",
	"line": 673
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>",
	"line": 691
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>",
	"line": 693
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>",
	"line": 693
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "if $stack16 > 0 goto $stack17 = 0",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.ReferenceNozzle",
					"method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>",
					"line": 693
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack5 = new java.lang.Exception,639,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0.<java.lang.Throwable: java.lang.Throwable cause> = l0,197,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, l0.<java.lang.Throwable: java.lang.Throwable cause> = l0, 197)) SINK=>BASE: Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack5 = new java.lang.Exception,639,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0.<java.lang.Throwable: java.lang.Throwable cause> = l0,197,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, l0.<java.lang.Throwable: java.lang.Throwable cause> = l0, 197))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack5 = new java.lang.Exception",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.ReferenceNozzle",
					"method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
					"line": 639
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
	"line": 639
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": 197
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack5 = new java.lang.Exception",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.ReferenceNozzle",
					"method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
					"line": 639
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
	"line": 639
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
	"line": 197
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l0.<java.lang.Throwable: java.lang.Throwable cause> = l0",
				"location": {
					"file": "",
					"class": "java.lang.Throwable",
					"method": "<java.lang.Throwable: void <init>(java.lang.String)>",
					"line": 197
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,51,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, $stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 637)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 673)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Actuator: java.lang.String read()>(),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Actuator: java.lang.String read()>(), 673)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack3 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($stack2),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>,vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(),691,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691)) SINK=>BASE: Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,51,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, $stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 637)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 673)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Actuator: java.lang.String read()>(),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Actuator: java.lang.String read()>(), 673)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack3 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($stack2),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>,vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(),691,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
				"location": {
					"file": "",
					"class": "org.openpnp.spi.base.AbstractNozzle",
					"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
					"line": 51
				},
				"stackTrace": [{
	"class": "org.openpnp.spi.base.AbstractNozzle",
	"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
	"line": 51
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
	"line": 637
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
	"line": 637
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>",
	"line": 673
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>",
	"line": 673
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>",
	"line": 673
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>",
	"line": 691
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
				"location": {
					"file": "",
					"class": "org.openpnp.spi.base.AbstractNozzle",
					"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
					"line": 51
				},
				"stackTrace": [{
	"class": "org.openpnp.spi.base.AbstractNozzle",
	"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
	"line": 51
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
	"line": 637
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
	"line": 637
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>",
	"line": 673
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>",
	"line": 673
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>",
	"line": 673
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>",
	"line": 691
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.ReferenceNozzle",
					"method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>",
					"line": 691
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,51,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, $stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 637)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 673)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Actuator: java.lang.String read()>(),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Actuator: java.lang.String read()>(), 673)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack3 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($stack2),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691)) SINK=>BASE: Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack3 = this.<org.openpnp.machine.reference.ReferenceNozzle: java.lang.String vacuumActuatorName>,637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, $stack3 = this.<org.openpnp.machine.reference.ReferenceNozzle: java.lang.String vacuumActuatorName>, 637)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 673)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Actuator: java.lang.String read()>(),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Actuator: java.lang.String read()>(), 673)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack3 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($stack2),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack3 = this.<org.openpnp.machine.reference.ReferenceNozzle: java.lang.String vacuumActuatorName>",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.ReferenceNozzle",
					"method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
					"line": 637
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
	"line": 637
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
	"line": 637
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>",
	"line": 673
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>",
	"line": 673
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>",
	"line": 673
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
				"location": {
					"file": "",
					"class": "org.openpnp.spi.base.AbstractNozzle",
					"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
					"line": 51
				},
				"stackTrace": [{
	"class": "org.openpnp.spi.base.AbstractNozzle",
	"method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
	"line": 51
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
	"line": 637
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
	"line": 637
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>",
	"line": 673
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>",
	"line": 673
},{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>",
	"line": 673
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack3 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($stack2)",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.ReferenceNozzle",
					"method": "<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>",
					"line": 673
				}
			}
		]
	}
}

,

{
	"type": "OAINTER",
	"label": "OA conflict",
	"body": {
		"description": "l5 - l5",
		"interference": [
			{
				"type": "declaration",
				"branch": "L",
				"text": "l5 = $stack21",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.ReferenceNozzle",
					"method": "isPartOff",
					"line": 696
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "isPartOff",
	"line": 696
}]
			},
			{
				"type": "override",
				"branch": "R",
				"text": "l5 = $stack21",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.ReferenceNozzle",
					"method": "isPartOff",
					"line": 696
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.ReferenceNozzle",
	"method": "isPartOff",
	"line": 696
}]
			}
		]
	}
}

,

{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "666"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack6 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 666)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack6 != 0 goto return",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "666"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "51"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "645"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 645)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: java.util.List getNozzles()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "645"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 645)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "645"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 645)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = interfaceinvoke l1.<java.util.Iterator: boolean hasNext()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "645"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack6 = interfaceinvoke l1.<java.util.Iterator: boolean hasNext()>(), 645)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack6 == 0 goto return 0",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "645"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "51"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "656"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "656"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>(), 656)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke pump.<org.openpnp.spi.Actuator: void actuate(boolean)>(0)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "667"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, interfaceinvoke pump.<org.openpnp.spi.Actuator: void actuate(boolean)>(0), 667)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: java.util.List getNozzles()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "645"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 645)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "645"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 645)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = interfaceinvoke l1.<java.util.Iterator: boolean hasNext()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "645"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack6 = interfaceinvoke l1.<java.util.Iterator: boolean hasNext()>(), 645)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack6 == 0 goto return 0",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "645"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: java.util.List getNozzles()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "645"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 645)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "645"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 645)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "652"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 652)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "nozzle = (org.openpnp.spi.Nozzle) $stack7",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "652"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, nozzle = (org.openpnp.spi.Nozzle) $stack7, 652)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if nozzle == this goto (branch)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "646"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "51"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "656"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "656"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>(), 656)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke pump.<org.openpnp.spi.Actuator: void actuate(boolean)>(1)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "659"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, interfaceinvoke pump.<org.openpnp.spi.Actuator: void actuate(boolean)>(1), 659)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "51"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "656"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "656"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>(), 656)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if pump == null goto return",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "665"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "51"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "645"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 645)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: java.util.List getNozzles()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "645"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 645)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "645"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 645)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "652"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 652)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "nozzle = (org.openpnp.spi.Nozzle) $stack7",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "652"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, nozzle = (org.openpnp.spi.Nozzle) $stack7, 652)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if nozzle == this goto (branch)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "646"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "51"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
  "line": "637"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, $stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 637)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
  "line": "637"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return actuator",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
  "line": "641"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "656"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "656"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>(), 656)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke pump.<org.openpnp.spi.Actuator: void actuate(boolean)>(1)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "659"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, interfaceinvoke pump.<org.openpnp.spi.Actuator: void actuate(boolean)>(1), 659)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "51"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "656"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "656"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>(), 656)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if pump == null goto $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "657"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "51"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
  "line": "637"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, $stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 637)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
  "line": "637"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if actuator != null goto return actuator",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
  "line": "638"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: java.util.List getNozzles()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "645"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 645)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "645"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 645)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "652"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 652)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "nozzle = (org.openpnp.spi.Nozzle) $stack7",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "652"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, nozzle = (org.openpnp.spi.Nozzle) $stack7, 652)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "647"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack9 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>(), 647)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack9 == null goto (branch)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "647"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "658"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack10 != 0 goto $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "658"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "51"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "51"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "51"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
  "line": "637"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, $stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 637)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
  "line": "637"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "663"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke $stack5.<org.openpnp.spi.Actuator: void actuate(boolean)>(on)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "663"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, interfaceinvoke $stack5.<org.openpnp.spi.Actuator: void actuate(boolean)>(on), 663)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
  "line": "637"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "663"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke $stack5.<org.openpnp.spi.Actuator: void actuate(boolean)>(on)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "663"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, interfaceinvoke $stack5.<org.openpnp.spi.Actuator: void actuate(boolean)>(on), 663)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "663"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke $stack5.<org.openpnp.spi.Actuator: void actuate(boolean)>(on)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "663"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, interfaceinvoke $stack5.<org.openpnp.spi.Actuator: void actuate(boolean)>(on), 663)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "51"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "645"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 645)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: java.util.List getNozzles()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "645"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 645)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "645"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 645)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "652"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 652)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "nozzle = (org.openpnp.spi.Nozzle) $stack7",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "652"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, nozzle = (org.openpnp.spi.Nozzle) $stack7, 652)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "647"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack9 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>(), 647)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack9 == null goto (branch)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "647"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "nozzle = (org.openpnp.spi.Nozzle) $stack7",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "652"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, nozzle = (org.openpnp.spi.Nozzle) $stack7, 652)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if nozzle == this goto (branch)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "646"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
  "line": "637"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if actuator != null goto return actuator",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
  "line": "638"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "656"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "656"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>(), 656)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke pump.<org.openpnp.spi.Actuator: void actuate(boolean)>(0)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "667"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, interfaceinvoke pump.<org.openpnp.spi.Actuator: void actuate(boolean)>(0), 667)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "656"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "656"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>(), 656)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if pump == null goto $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "657"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "647"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack9 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>(), 647)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack9 == null goto (branch)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "647"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "656"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "656"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>(), 656)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if pump == null goto return",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "665"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
  "line": "637"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return actuator",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
  "line": "641"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = new java.lang.Exception",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
  "line": "639"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
  "line": "639"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "nozzle = (org.openpnp.spi.Nozzle) $stack7",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "652"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, nozzle = (org.openpnp.spi.Nozzle) $stack7, 652)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "647"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack9 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>(), 647)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack9 == null goto (branch)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "647"
},
"stackTrace": [""]
}]
}
}

,

{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "666"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack6 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 666)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack6 != 0 goto return",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "666"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "51"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "645"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 645)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: java.util.List getNozzles()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "645"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 645)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "645"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 645)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = interfaceinvoke l1.<java.util.Iterator: boolean hasNext()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "645"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack6 = interfaceinvoke l1.<java.util.Iterator: boolean hasNext()>(), 645)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack6 == 0 goto return 0",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "645"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "51"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "656"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "656"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>(), 656)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke pump.<org.openpnp.spi.Actuator: void actuate(boolean)>(0)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "667"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, interfaceinvoke pump.<org.openpnp.spi.Actuator: void actuate(boolean)>(0), 667)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: java.util.List getNozzles()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "645"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 645)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "645"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 645)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = interfaceinvoke l1.<java.util.Iterator: boolean hasNext()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "645"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack6 = interfaceinvoke l1.<java.util.Iterator: boolean hasNext()>(), 645)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack6 == 0 goto return 0",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "645"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: java.util.List getNozzles()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "645"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 645)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "645"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 645)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "652"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 652)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "nozzle = (org.openpnp.spi.Nozzle) $stack7",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "652"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, nozzle = (org.openpnp.spi.Nozzle) $stack7, 652)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if nozzle == this goto (branch)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "646"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "51"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "656"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "656"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>(), 656)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke pump.<org.openpnp.spi.Actuator: void actuate(boolean)>(1)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "659"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, interfaceinvoke pump.<org.openpnp.spi.Actuator: void actuate(boolean)>(1), 659)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "51"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "656"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "656"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>(), 656)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if pump == null goto return",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "665"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "51"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "645"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 645)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: java.util.List getNozzles()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "645"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 645)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "645"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 645)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "652"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 652)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "nozzle = (org.openpnp.spi.Nozzle) $stack7",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "652"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, nozzle = (org.openpnp.spi.Nozzle) $stack7, 652)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if nozzle == this goto (branch)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "646"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "51"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
  "line": "637"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, $stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 637)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
  "line": "637"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return actuator",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
  "line": "641"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "656"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "656"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>(), 656)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke pump.<org.openpnp.spi.Actuator: void actuate(boolean)>(1)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "659"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, interfaceinvoke pump.<org.openpnp.spi.Actuator: void actuate(boolean)>(1), 659)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "51"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "656"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "656"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>(), 656)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if pump == null goto $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "657"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "51"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
  "line": "637"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, $stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 637)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
  "line": "637"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if actuator != null goto return actuator",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
  "line": "638"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: java.util.List getNozzles()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "645"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 645)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "645"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 645)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "652"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 652)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "nozzle = (org.openpnp.spi.Nozzle) $stack7",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "652"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, nozzle = (org.openpnp.spi.Nozzle) $stack7, 652)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "647"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack9 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>(), 647)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack9 == null goto (branch)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "647"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "658"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack10 != 0 goto $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "658"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "51"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "51"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "51"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
  "line": "637"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, $stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 637)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
  "line": "637"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "663"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke $stack5.<org.openpnp.spi.Actuator: void actuate(boolean)>(on)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "663"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, interfaceinvoke $stack5.<org.openpnp.spi.Actuator: void actuate(boolean)>(on), 663)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
  "line": "637"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "663"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke $stack5.<org.openpnp.spi.Actuator: void actuate(boolean)>(on)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "663"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, interfaceinvoke $stack5.<org.openpnp.spi.Actuator: void actuate(boolean)>(on), 663)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "663"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke $stack5.<org.openpnp.spi.Actuator: void actuate(boolean)>(on)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "663"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, interfaceinvoke $stack5.<org.openpnp.spi.Actuator: void actuate(boolean)>(on), 663)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>",
"location": {
  "file": "",
  "class": "org.openpnp.spi.base.AbstractNozzle",
  "method": "<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>",
  "line": "51"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "645"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 645)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: java.util.List getNozzles()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "645"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 645)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "645"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 645)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "652"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 652)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "nozzle = (org.openpnp.spi.Nozzle) $stack7",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "652"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, nozzle = (org.openpnp.spi.Nozzle) $stack7, 652)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "647"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack9 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>(), 647)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack9 == null goto (branch)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "647"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "nozzle = (org.openpnp.spi.Nozzle) $stack7",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "652"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, nozzle = (org.openpnp.spi.Nozzle) $stack7, 652)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if nozzle == this goto (branch)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "646"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
  "line": "637"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if actuator != null goto return actuator",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
  "line": "638"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "656"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "656"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>(), 656)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke pump.<org.openpnp.spi.Actuator: void actuate(boolean)>(0)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "667"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, interfaceinvoke pump.<org.openpnp.spi.Actuator: void actuate(boolean)>(0), 667)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "656"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "656"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>(), 656)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if pump == null goto $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "657"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "647"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack9 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>(), 647)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack9 == null goto (branch)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "647"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "656"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "656"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>(), 656)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if pump == null goto return",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>",
  "line": "665"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
  "line": "637"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return actuator",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
  "line": "641"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = new java.lang.Exception",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
  "line": "639"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>",
  "line": "639"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)","(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "nozzle = (org.openpnp.spi.Nozzle) $stack7",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "652"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, nozzle = (org.openpnp.spi.Nozzle) $stack7, 652)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "647"
},
"stackTrace": ["(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687)","(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)","(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack9 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>(), 647)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack9 == null goto (branch)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.ReferenceNozzle",
  "method": "<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>",
  "line": "647"
},
"stackTrace": [""]
}]
}
}

]
