Running soot scenario openpnp;org.openpnp.machine.reference.ReferenceNozzle;isPartOff();f1d9c747ac3d7f0376b56e1c81f4da617f396e98
Running ConflictDetectionAlgorithm{name='Confluence Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/openpnp/f1d9c747ac3d7f0376b56e1c81f4da617f396e98/original-without-dependencies/openpnp-gui-0.0.1-alpha-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot Confluence 1 Inter 1,07100
Time to perform Confluence 1 Inter 0,55900
Configure Soot Confluence 2 Inter 0,88500
Time to perform Confluence 2 Inter 0,15800
Visited methods: 30
Depth limit: 5
CONFLICTS: [SOURCE=>BASE: Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,51,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, $stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 637)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 673)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Actuator: java.lang.String read()>(),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Actuator: java.lang.String read()>(), 673)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack3 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($stack2),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>,vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(),691,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691))
SINK=>BASE: Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack3 = this.<org.openpnp.machine.reference.ReferenceNozzle: java.lang.String vacuumActuatorName>,637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, $stack3 = this.<org.openpnp.machine.reference.ReferenceNozzle: java.lang.String vacuumActuatorName>, 637)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 673)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Actuator: java.lang.String read()>(),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Actuator: java.lang.String read()>(), 673)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack3 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($stack2),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>,vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(),691,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691)), SOURCE=>BASE: Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 673)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Actuator: java.lang.String read()>(),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Actuator: java.lang.String read()>(), 673)) => Node(<java.lang.Double: double parseDouble(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack3 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($stack2), 673)) => Node(<java.lang.Double: double parseDouble(java.lang.String)>,$stack1 = staticinvoke <sun.misc.FloatingDecimal: double parseDouble(java.lang.String)>(l0),538,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack3 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($stack2), 673))
SINK=>BASE: Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack3 = this.<org.openpnp.machine.reference.ReferenceNozzle: java.lang.String vacuumActuatorName>,637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, $stack3 = this.<org.openpnp.machine.reference.ReferenceNozzle: java.lang.String vacuumActuatorName>, 637)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 673)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Actuator: java.lang.String read()>(),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Actuator: java.lang.String read()>(), 673)) => Node(<java.lang.Double: double parseDouble(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack3 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($stack2), 673)) => Node(<java.lang.Double: double parseDouble(java.lang.String)>,$stack1 = staticinvoke <sun.misc.FloatingDecimal: double parseDouble(java.lang.String)>(l0),538,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack3 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($stack2), 673)), SOURCE=>BASE: Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,51,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, $stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 637)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 673)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Actuator: java.lang.String read()>(),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Actuator: java.lang.String read()>(), 673)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack3 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($stack2),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691))
SINK=>BASE: Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,51,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, $stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 637)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 673)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Actuator: java.lang.String read()>(),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Actuator: java.lang.String read()>(), 673)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack3 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($stack2),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691)), SOURCE=>BASE: Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack5 = new java.lang.Exception,639,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(),265,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265))
SINK=>BASE: Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack5 = new java.lang.Exception,639,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(),265,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265)), SOURCE=>BASE: Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Can\'t find vacuum actuator %s", $stack6),639,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, $stack8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>('Can\'t find vacuum actuator %s', $stack6), 639)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0.<java.lang.Throwable: java.lang.String detailMessage> = l1,266,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, l0.<java.lang.Throwable: java.lang.String detailMessage> = l1, 266))
SINK=>BASE: Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Can\'t find vacuum actuator %s", $stack6),639,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, $stack8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>('Can\'t find vacuum actuator %s', $stack6), 639)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0.<java.lang.Throwable: java.lang.String detailMessage> = l1,266,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, l0.<java.lang.Throwable: java.lang.String detailMessage> = l1, 266)), SOURCE=>BASE: Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 673)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Actuator: java.lang.String read()>(),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Actuator: java.lang.String read()>(), 673)) => Node(<java.lang.Double: double parseDouble(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack3 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($stack2), 673)) => Node(<java.lang.Double: double parseDouble(java.lang.String)>,$stack1 = staticinvoke <sun.misc.FloatingDecimal: double parseDouble(java.lang.String)>(l0),538,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack3 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($stack2), 673))
SINK=>BASE: Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,51,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, $stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 637)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 673)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Actuator: java.lang.String read()>(),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Actuator: java.lang.String read()>(), 673)) => Node(<java.lang.Double: double parseDouble(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack3 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($stack2), 673)) => Node(<java.lang.Double: double parseDouble(java.lang.String)>,$stack1 = staticinvoke <sun.misc.FloatingDecimal: double parseDouble(java.lang.String)>(l0),538,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack3 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($stack2), 673)), SOURCE=>BASE: Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,51,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, $stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 637)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 673)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Actuator: java.lang.String read()>(),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Actuator: java.lang.String read()>(), 673)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack3 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($stack2),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>,vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(),691,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>,$stack16 = vacuumLevel cmpg $stack15,693,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, $stack16 = vacuumLevel cmpg $stack15, 693)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>,if $stack16 > 0 goto $stack17 = 0,693,SinkNode, path: )
SINK=>BASE: Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack3 = this.<org.openpnp.machine.reference.ReferenceNozzle: java.lang.String vacuumActuatorName>,637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, $stack3 = this.<org.openpnp.machine.reference.ReferenceNozzle: java.lang.String vacuumActuatorName>, 637)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 673)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Actuator: java.lang.String read()>(),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Actuator: java.lang.String read()>(), 673)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack3 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($stack2),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>,vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(),691,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>,$stack16 = vacuumLevel cmpg $stack15,693,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, $stack16 = vacuumLevel cmpg $stack15, 693)), SOURCE=>BASE: Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,51,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, $stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 637)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 673)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Actuator: java.lang.String read()>(),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Actuator: java.lang.String read()>(), 673)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack3 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($stack2),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691))
SINK=>BASE: Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack3 = this.<org.openpnp.machine.reference.ReferenceNozzle: java.lang.String vacuumActuatorName>,637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, $stack3 = this.<org.openpnp.machine.reference.ReferenceNozzle: java.lang.String vacuumActuatorName>, 637)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 673)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Actuator: java.lang.String read()>(),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Actuator: java.lang.String read()>(), 673)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack3 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($stack2),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691)), SOURCE=>BASE: Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack5 = new java.lang.Exception,639,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack2,210,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack2, 210))
SINK=>BASE: Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack5 = new java.lang.Exception,639,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack2,210,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack2, 210)), SOURCE=>BASE: Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack5 = new java.lang.Exception,639,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,specialinvoke l0.<java.lang.Object: void <init>()>(),264,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Object: void <init>()>(), 264))
SINK=>BASE: Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack5 = new java.lang.Exception,639,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,specialinvoke l0.<java.lang.Object: void <init>()>(),264,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Object: void <init>()>(), 264)), SOURCE=>BASE: Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Can\'t find vacuum actuator %s", $stack6),639,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, $stack8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>('Can\'t find vacuum actuator %s', $stack6), 639)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1),66,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66))
SINK=>BASE: Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Can\'t find vacuum actuator %s", $stack6),639,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, $stack8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>('Can\'t find vacuum actuator %s', $stack6), 639)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1),66,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)), SOURCE=>BASE: Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack5 = new java.lang.Exception,639,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $stack3,227,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $stack3, 227))
SINK=>BASE: Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack5 = new java.lang.Exception,639,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $stack3,227,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $stack3, 227)), SOURCE=>BASE: Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,51,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, $stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 637)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 673)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Actuator: java.lang.String read()>(),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Actuator: java.lang.String read()>(), 673)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack3 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($stack2),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>,vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(),691,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>,$stack16 = vacuumLevel cmpg $stack15,693,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, $stack16 = vacuumLevel cmpg $stack15, 693)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>,if $stack16 > 0 goto $stack17 = 0,693,SinkNode, path: )
SINK=>BASE: Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,51,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, $stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 637)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 673)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Actuator: java.lang.String read()>(),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Actuator: java.lang.String read()>(), 673)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack3 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($stack2),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>,vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(),691,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>,$stack16 = vacuumLevel cmpg $stack15,693,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, $stack16 = vacuumLevel cmpg $stack15, 693)), SOURCE=>BASE: Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack5 = new java.lang.Exception,639,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0.<java.lang.Throwable: java.lang.Throwable cause> = l0,197,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, l0.<java.lang.Throwable: java.lang.Throwable cause> = l0, 197))
SINK=>BASE: Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack5 = new java.lang.Exception,639,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0.<java.lang.Throwable: java.lang.Throwable cause> = l0,197,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, l0.<java.lang.Throwable: java.lang.Throwable cause> = l0, 197)), SOURCE=>BASE: Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,51,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, $stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 637)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 673)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Actuator: java.lang.String read()>(),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Actuator: java.lang.String read()>(), 673)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack3 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($stack2),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>,vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(),691,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691))
SINK=>BASE: Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,51,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, $stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 637)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack1 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 673)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Actuator: java.lang.String read()>(),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691) => (<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>, $stack2 = interfaceinvoke $stack1.<org.openpnp.spi.Actuator: java.lang.String read()>(), 673)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>,$stack3 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($stack2),673,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>,vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(),691,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691))]
Confluence interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Confluence flows from execution of lines 687 and 687 to line 691, defined in virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1) and virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1) and used in vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>()
Caused by line 687 flow: path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)
Caused by line 687 flow: path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, $stack3 = this.<org.openpnp.machine.reference.ReferenceNozzle: java.lang.String vacuumActuatorName>, 637)
Caused by line 691 flow: path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, vacuumLevel = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: double readVacuumLevel()>(), 691)
Confluence interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Confluence flows from execution of lines 687 and 687 to line 687, defined in virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1) and virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1) and used in virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1)
Caused by line 687 flow: path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)
Caused by line 687 flow: path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)
Caused by line 687 flow: path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265)
Confluence interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Confluence flows from execution of lines 687 and 687 to line 693, defined in virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1) and virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1) and used in $stack16 = vacuumLevel cmpg $stack15
Caused by line 687 flow: path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)
Caused by line 687 flow: path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, $stack3 = this.<org.openpnp.machine.reference.ReferenceNozzle: java.lang.String vacuumActuatorName>, 637)
Caused by line 693 flow: path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, $stack16 = vacuumLevel cmpg $stack15, 693)
 Analysis results
----------------------------
 Number of conflicts: 15
 Results exported to out.txt
Error getting the previous content of the JSON file out.json
 JSON Results exported to out.json
----------------------------
Running ConflictDetectionAlgorithm{name='OA Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/openpnp/f1d9c747ac3d7f0376b56e1c81f4da617f396e98/original-without-dependencies/openpnp-gui-0.0.1-alpha-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Depth limit: 5
Configure Soot OA Inter 1,45900
Runtime: 0.007s
OA interference in class ReferenceNozzle, method boolean isPartOff(), execution of line 696 overrides 696, assigning to variable l5, 
Caused by line 696 flow:
at org.openpnp.machine.reference.ReferenceNozzle.isPartOff(ReferenceNozzle.java:696)
And line 696 flow:
at org.openpnp.machine.reference.ReferenceNozzle.isPartOff(ReferenceNozzle.java:696)
 
Time to perform OA Inter 1,50600
OA Inter Visited methods: 6
 Analysis results
----------------------------
 Number of conflicts: 1
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/openpnp/f1d9c747ac3d7f0376b56e1c81f4da617f396e98/original-without-dependencies/openpnp-gui-0.0.1-alpha-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,92300
Time to perform DFP Inter 0,52000
Depth limit: 5
CONFLICTS: DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Data flows from execution of line 687 to 687, defined in $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>() and propagated in interfaceinvoke $stack5.<org.openpnp.spi.Actuator: void actuate(boolean)>(on)
Caused by line 687 flow: path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)
Caused by line 687 flow: path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, interfaceinvoke $stack5.<org.openpnp.spi.Actuator: void actuate(boolean)>(on), 663)
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Data flows from execution of line 687 to 687, defined in $stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head> and propagated in interfaceinvoke $stack5.<org.openpnp.spi.Actuator: void actuate(boolean)>(on)
Caused by line 687 flow: path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)
Caused by line 687 flow: path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, interfaceinvoke $stack5.<org.openpnp.spi.Actuator: void actuate(boolean)>(on), 663)
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Data flows from execution of line 687 to 687, defined in actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3) and propagated in interfaceinvoke $stack5.<org.openpnp.spi.Actuator: void actuate(boolean)>(on)
Caused by line 687 flow: path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)
Caused by line 687 flow: path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, interfaceinvoke $stack5.<org.openpnp.spi.Actuator: void actuate(boolean)>(on), 663)
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Data flows from execution of line 687 to 687, defined in $stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head> and propagated in interfaceinvoke pump.<org.openpnp.spi.Actuator: void actuate(boolean)>(0)
Caused by line 687 flow: path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)
Caused by line 687 flow: path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, interfaceinvoke pump.<org.openpnp.spi.Actuator: void actuate(boolean)>(0), 667)
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Data flows from execution of line 687 to 687, defined in $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>() and propagated in interfaceinvoke pump.<org.openpnp.spi.Actuator: void actuate(boolean)>(1)
Caused by line 687 flow: path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)
Caused by line 687 flow: path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, interfaceinvoke pump.<org.openpnp.spi.Actuator: void actuate(boolean)>(1), 659)
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Data flows from execution of line 687 to 687, defined in $stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head> and propagated in interfaceinvoke pump.<org.openpnp.spi.Actuator: void actuate(boolean)>(1)
Caused by line 687 flow: path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)
Caused by line 687 flow: path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, interfaceinvoke pump.<org.openpnp.spi.Actuator: void actuate(boolean)>(1), 659)
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Data flows from execution of line 687 to 687, defined in $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>() and propagated in interfaceinvoke pump.<org.openpnp.spi.Actuator: void actuate(boolean)>(0)
Caused by line 687 flow: path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)
Caused by line 687 flow: path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, interfaceinvoke pump.<org.openpnp.spi.Actuator: void actuate(boolean)>(0), 667)
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Data flows from execution of line 687 to 687, defined in $stack5 = new java.lang.Exception and propagated in specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8)
Caused by line 687 flow: path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)
Caused by line 687 flow: path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)
[List(Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,$stack9 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>(),647,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack9 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>(), 647)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,if $stack9 == null goto (branch),647,SinkNode, path: )), List(Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,$stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),656,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>(),656,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,if pump == null goto $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(),657,SinkNode, path: )), List(Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,51,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,$stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),656,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>(),656,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,if pump == null goto return,665,SinkNode, path: )), List(Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,51,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,$stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),656,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>(),656,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,interfaceinvoke pump.<org.openpnp.spi.Actuator: void actuate(boolean)>(0),667,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, interfaceinvoke pump.<org.openpnp.spi.Actuator: void actuate(boolean)>(0), 667))), List(Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,51,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,return $stack1,51,SinkNode, path: )), List(Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,nozzle = (org.openpnp.spi.Nozzle) $stack7,652,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, nozzle = (org.openpnp.spi.Nozzle) $stack7, 652)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,$stack9 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>(),647,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack9 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>(), 647)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,if $stack9 == null goto (branch),647,SinkNode, path: )), List(Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,51,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,$stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),645,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 645)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: java.util.List getNozzles()>(),645,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 645)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),645,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 645)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,$stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(),652,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 652)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,nozzle = (org.openpnp.spi.Nozzle) $stack7,652,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, nozzle = (org.openpnp.spi.Nozzle) $stack7, 652)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,if nozzle == this goto (branch),646,SinkNode, path: )), List(Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,51,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,$stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),645,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 645)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: java.util.List getNozzles()>(),645,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 645)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),645,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 645)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,$stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(),652,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 652)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,nozzle = (org.openpnp.spi.Nozzle) $stack7,652,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, nozzle = (org.openpnp.spi.Nozzle) $stack7, 652)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,$stack9 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>(),647,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack9 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>(), 647)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,if $stack9 == null goto (branch),647,SinkNode, path: )), List(Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,$stack6 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(),666,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack6 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 666)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,if $stack6 != 0 goto return,666,SinkNode, path: )), List(Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,nozzle = (org.openpnp.spi.Nozzle) $stack7,652,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, nozzle = (org.openpnp.spi.Nozzle) $stack7, 652)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,if nozzle == this goto (branch),646,SinkNode, path: )), List(Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,51,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,$stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),656,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>(),656,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,interfaceinvoke pump.<org.openpnp.spi.Actuator: void actuate(boolean)>(1),659,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, interfaceinvoke pump.<org.openpnp.spi.Actuator: void actuate(boolean)>(1), 659))), List(Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,51,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, $stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 637)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,return actuator,641,SinkNode, path: )), List(Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,$stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),656,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>(),656,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,interfaceinvoke pump.<org.openpnp.spi.Actuator: void actuate(boolean)>(1),659,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, interfaceinvoke pump.<org.openpnp.spi.Actuator: void actuate(boolean)>(1), 659))), List(Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,$stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),656,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>(),656,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,interfaceinvoke pump.<org.openpnp.spi.Actuator: void actuate(boolean)>(0),667,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, interfaceinvoke pump.<org.openpnp.spi.Actuator: void actuate(boolean)>(0), 667))), List(Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,51,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,$stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),656,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>(),656,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,if pump == null goto $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(),657,SinkNode, path: )), List(Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,$stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(),663,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,interfaceinvoke $stack5.<org.openpnp.spi.Actuator: void actuate(boolean)>(on),663,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, interfaceinvoke $stack5.<org.openpnp.spi.Actuator: void actuate(boolean)>(on), 663))), List(Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,$stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(),658,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,if $stack10 != 0 goto $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(),658,SinkNode, path: )), List(Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,$stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),656,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>(),656,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,if pump == null goto return,665,SinkNode, path: )), List(Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,return actuator,641,SinkNode, path: )), List(Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: java.util.List getNozzles()>(),645,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 645)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),645,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 645)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,$stack6 = interfaceinvoke l1.<java.util.Iterator: boolean hasNext()>(),645,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack6 = interfaceinvoke l1.<java.util.Iterator: boolean hasNext()>(), 645)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,if $stack6 == 0 goto return 0,645,SinkNode, path: )), List(Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,$stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(),663,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,interfaceinvoke $stack5.<org.openpnp.spi.Actuator: void actuate(boolean)>(on),663,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, interfaceinvoke $stack5.<org.openpnp.spi.Actuator: void actuate(boolean)>(on), 663))), List(Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: java.util.List getNozzles()>(),645,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 645)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),645,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 645)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,$stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(),652,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 652)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,nozzle = (org.openpnp.spi.Nozzle) $stack7,652,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, nozzle = (org.openpnp.spi.Nozzle) $stack7, 652)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,$stack9 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>(),647,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack9 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>(), 647)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,if $stack9 == null goto (branch),647,SinkNode, path: )), List(Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,51,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, $stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 637)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,if actuator != null goto return actuator,638,SinkNode, path: )), List(Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,if actuator != null goto return actuator,638,SinkNode, path: )), List(Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,51,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, $stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 637)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,$stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(),663,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,interfaceinvoke $stack5.<org.openpnp.spi.Actuator: void actuate(boolean)>(on),663,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, interfaceinvoke $stack5.<org.openpnp.spi.Actuator: void actuate(boolean)>(on), 663))), List(Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: java.util.List getNozzles()>(),645,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 645)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),645,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 645)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,$stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(),652,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 652)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,nozzle = (org.openpnp.spi.Nozzle) $stack7,652,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, nozzle = (org.openpnp.spi.Nozzle) $stack7, 652)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,if nozzle == this goto (branch),646,SinkNode, path: )), List(Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack5 = new java.lang.Exception,639,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8),639,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639))), List(Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,51,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,$stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),645,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 645)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: java.util.List getNozzles()>(),645,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 645)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),645,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 645)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,$stack6 = interfaceinvoke l1.<java.util.Iterator: boolean hasNext()>(),645,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack6 = interfaceinvoke l1.<java.util.Iterator: boolean hasNext()>(), 645)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,if $stack6 == 0 goto return 0,645,SinkNode, path: ))]
Visited methods: 15
 Analysis results
----------------------------
 Number of conflicts: 28
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/openpnp/f1d9c747ac3d7f0376b56e1c81f4da617f396e98/original-without-dependencies/openpnp-gui-0.0.1-alpha-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 1,04400
Time to perform DFP Inter 0,59900
Depth limit: 5
CONFLICTS: DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Data flows from execution of line 687 to 687, defined in $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>() and propagated in interfaceinvoke $stack5.<org.openpnp.spi.Actuator: void actuate(boolean)>(on)
Caused by line 687 flow: path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)
Caused by line 687 flow: path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, interfaceinvoke $stack5.<org.openpnp.spi.Actuator: void actuate(boolean)>(on), 663)
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Data flows from execution of line 687 to 687, defined in $stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head> and propagated in interfaceinvoke $stack5.<org.openpnp.spi.Actuator: void actuate(boolean)>(on)
Caused by line 687 flow: path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)
Caused by line 687 flow: path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, interfaceinvoke $stack5.<org.openpnp.spi.Actuator: void actuate(boolean)>(on), 663)
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Data flows from execution of line 687 to 687, defined in actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3) and propagated in interfaceinvoke $stack5.<org.openpnp.spi.Actuator: void actuate(boolean)>(on)
Caused by line 687 flow: path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)
Caused by line 687 flow: path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, interfaceinvoke $stack5.<org.openpnp.spi.Actuator: void actuate(boolean)>(on), 663)
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Data flows from execution of line 687 to 687, defined in $stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head> and propagated in interfaceinvoke pump.<org.openpnp.spi.Actuator: void actuate(boolean)>(0)
Caused by line 687 flow: path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)
Caused by line 687 flow: path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, interfaceinvoke pump.<org.openpnp.spi.Actuator: void actuate(boolean)>(0), 667)
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Data flows from execution of line 687 to 687, defined in $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>() and propagated in interfaceinvoke pump.<org.openpnp.spi.Actuator: void actuate(boolean)>(1)
Caused by line 687 flow: path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)
Caused by line 687 flow: path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, interfaceinvoke pump.<org.openpnp.spi.Actuator: void actuate(boolean)>(1), 659)
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Data flows from execution of line 687 to 687, defined in $stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head> and propagated in interfaceinvoke pump.<org.openpnp.spi.Actuator: void actuate(boolean)>(1)
Caused by line 687 flow: path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)
Caused by line 687 flow: path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, interfaceinvoke pump.<org.openpnp.spi.Actuator: void actuate(boolean)>(1), 659)
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Data flows from execution of line 687 to 687, defined in $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>() and propagated in interfaceinvoke pump.<org.openpnp.spi.Actuator: void actuate(boolean)>(0)
Caused by line 687 flow: path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)
Caused by line 687 flow: path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, interfaceinvoke pump.<org.openpnp.spi.Actuator: void actuate(boolean)>(0), 667)
DF interference in <org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>
Data flows from execution of line 687 to 687, defined in $stack5 = new java.lang.Exception and propagated in specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8)
Caused by line 687 flow: path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)
Caused by line 687 flow: path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)
[List(Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,$stack9 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>(),647,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack9 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>(), 647)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,if $stack9 == null goto (branch),647,SinkNode, path: )), List(Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,$stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),656,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>(),656,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,if pump == null goto $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(),657,SinkNode, path: )), List(Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,51,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,$stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),656,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>(),656,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,if pump == null goto return,665,SinkNode, path: )), List(Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,51,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,$stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),656,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>(),656,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,interfaceinvoke pump.<org.openpnp.spi.Actuator: void actuate(boolean)>(0),667,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, interfaceinvoke pump.<org.openpnp.spi.Actuator: void actuate(boolean)>(0), 667))), List(Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,51,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,return $stack1,51,SinkNode, path: )), List(Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,nozzle = (org.openpnp.spi.Nozzle) $stack7,652,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, nozzle = (org.openpnp.spi.Nozzle) $stack7, 652)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,$stack9 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>(),647,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack9 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>(), 647)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,if $stack9 == null goto (branch),647,SinkNode, path: )), List(Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,51,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,$stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),645,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 645)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: java.util.List getNozzles()>(),645,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 645)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),645,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 645)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,$stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(),652,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 652)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,nozzle = (org.openpnp.spi.Nozzle) $stack7,652,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, nozzle = (org.openpnp.spi.Nozzle) $stack7, 652)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,if nozzle == this goto (branch),646,SinkNode, path: )), List(Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,51,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,$stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),645,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 645)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: java.util.List getNozzles()>(),645,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 645)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),645,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 645)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,$stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(),652,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 652)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,nozzle = (org.openpnp.spi.Nozzle) $stack7,652,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, nozzle = (org.openpnp.spi.Nozzle) $stack7, 652)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,$stack9 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>(),647,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack9 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>(), 647)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,if $stack9 == null goto (branch),647,SinkNode, path: )), List(Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,$stack6 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(),666,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack6 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 666)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,if $stack6 != 0 goto return,666,SinkNode, path: )), List(Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,nozzle = (org.openpnp.spi.Nozzle) $stack7,652,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, nozzle = (org.openpnp.spi.Nozzle) $stack7, 652)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,if nozzle == this goto (branch),646,SinkNode, path: )), List(Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,51,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,$stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),656,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>(),656,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,interfaceinvoke pump.<org.openpnp.spi.Actuator: void actuate(boolean)>(1),659,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, interfaceinvoke pump.<org.openpnp.spi.Actuator: void actuate(boolean)>(1), 659))), List(Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,51,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, $stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 637)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,return actuator,641,SinkNode, path: )), List(Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,$stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),656,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>(),656,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,interfaceinvoke pump.<org.openpnp.spi.Actuator: void actuate(boolean)>(1),659,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, interfaceinvoke pump.<org.openpnp.spi.Actuator: void actuate(boolean)>(1), 659))), List(Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,$stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),656,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>(),656,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,interfaceinvoke pump.<org.openpnp.spi.Actuator: void actuate(boolean)>(0),667,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, interfaceinvoke pump.<org.openpnp.spi.Actuator: void actuate(boolean)>(0), 667))), List(Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,51,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,$stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),656,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>(),656,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,if pump == null goto $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(),657,SinkNode, path: )), List(Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,$stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(),663,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,interfaceinvoke $stack5.<org.openpnp.spi.Actuator: void actuate(boolean)>(on),663,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, interfaceinvoke $stack5.<org.openpnp.spi.Actuator: void actuate(boolean)>(on), 663))), List(Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,$stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(),658,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,if $stack10 != 0 goto $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(),658,SinkNode, path: )), List(Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,$stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),656,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>(),656,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, pump = interfaceinvoke $stack3.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getPump()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,if pump == null goto return,665,SinkNode, path: )), List(Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,return actuator,641,SinkNode, path: )), List(Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: java.util.List getNozzles()>(),645,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 645)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),645,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 645)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,$stack6 = interfaceinvoke l1.<java.util.Iterator: boolean hasNext()>(),645,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack6 = interfaceinvoke l1.<java.util.Iterator: boolean hasNext()>(), 645)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,if $stack6 == 0 goto return 0,645,SinkNode, path: )), List(Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,$stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(),663,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,interfaceinvoke $stack5.<org.openpnp.spi.Actuator: void actuate(boolean)>(on),663,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, interfaceinvoke $stack5.<org.openpnp.spi.Actuator: void actuate(boolean)>(on), 663))), List(Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: java.util.List getNozzles()>(),645,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 645)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),645,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 645)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,$stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(),652,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 652)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,nozzle = (org.openpnp.spi.Nozzle) $stack7,652,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, nozzle = (org.openpnp.spi.Nozzle) $stack7, 652)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,$stack9 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>(),647,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack9 = interfaceinvoke nozzle.<org.openpnp.spi.Nozzle: org.openpnp.model.Part getPart()>(), 647)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,if $stack9 == null goto (branch),647,SinkNode, path: )), List(Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,51,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, $stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 637)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,if actuator != null goto return actuator,638,SinkNode, path: )), List(Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,if actuator != null goto return actuator,638,SinkNode, path: )), List(Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,51,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, $stack2 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 637)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,actuator = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Actuator getActuatorByName(java.lang.String)>($stack3),637,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,$stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(),663,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>,interfaceinvoke $stack5.<org.openpnp.spi.Actuator: void actuate(boolean)>(on),663,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, interfaceinvoke $stack5.<org.openpnp.spi.Actuator: void actuate(boolean)>(on), 663))), List(Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: java.util.List getNozzles()>(),645,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 645)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),645,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 645)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,$stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(),652,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>(), 652)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,nozzle = (org.openpnp.spi.Nozzle) $stack7,652,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, nozzle = (org.openpnp.spi.Nozzle) $stack7, 652)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,if nozzle == this goto (branch),646,SinkNode, path: )), List(Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,$stack5 = new java.lang.Exception,639,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>,specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8),639,SinkNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack5 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>(), 663) => (<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Actuator getVacuumActuator()>, specialinvoke $stack5.<java.lang.Exception: void <init>(java.lang.String)>($stack8), 639))), List(Node(<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head getHead()>,$stack1 = this.<org.openpnp.spi.base.AbstractNozzle: org.openpnp.spi.Head head>,51,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 656)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,$stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(),645,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack3 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: org.openpnp.spi.Head getHead()>(), 645)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: java.util.List getNozzles()>(),645,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Head: java.util.List getNozzles()>(), 645)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),645,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, l1 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 645)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,$stack6 = interfaceinvoke l1.<java.util.Iterator: boolean hasNext()>(),645,SourceNode, path: (<org.openpnp.machine.reference.ReferenceNozzle: boolean isPartOff()>, virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>(1), 687) => (<org.openpnp.machine.reference.ReferenceNozzle: void actuateVacuumValve(boolean)>, $stack10 = virtualinvoke this.<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>(), 658) => (<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>, $stack6 = interfaceinvoke l1.<java.util.Iterator: boolean hasNext()>(), 645)) => Node(<org.openpnp.machine.reference.ReferenceNozzle: boolean hasPartOnAnyOtherNozzle()>,if $stack6 == 0 goto return 0,645,SinkNode, path: ))]
Visited methods: 15
 Analysis results
----------------------------
 Number of conflicts: 28
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/openpnp/f1d9c747ac3d7f0376b56e1c81f4da617f396e98/original-without-dependencies/openpnp-gui-0.0.1-alpha-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 1,07400
Time to perform PDG 0,42800
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/openpnp/f1d9c747ac3d7f0376b56e1c81f4da617f396e98/original-without-dependencies/openpnp-gui-0.0.1-alpha-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 1,25300
Time to perform PDG 0,43000
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
