List(Node(<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String getClientId()>,$stack1 = this.<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String clientId>,50,SourceNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, valid = virtualinvoke clientSession.<io.moquette.spi.ClientSession: boolean subscribe(io.moquette.spi.impl.subscriptions.Subscription)>(newSubscription), 740) => (<io.moquette.spi.ClientSession: boolean subscribe(io.moquette.spi.impl.subscriptions.Subscription)>, $stack9 = virtualinvoke newSubscription.<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String getClientId()>(), 99)) => Node(<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>,$stack17 = virtualinvoke newSubscription.<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String getClientId()>(),782,SimpleNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, specialinvoke this.<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>(req#13, username), 760) => (<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>, $stack17 = virtualinvoke newSubscription.<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String getClientId()>(), 782)) => Node(<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>,targetSession = interfaceinvoke $stack16.<io.moquette.spi.ISessionsStore: io.moquette.spi.ClientSession sessionForClient(java.lang.String)>($stack17),782,SimpleNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, specialinvoke this.<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>(req#13, username), 760) => (<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>, targetSession = interfaceinvoke $stack16.<io.moquette.spi.ISessionsStore: io.moquette.spi.ClientSession sessionForClient(java.lang.String)>($stack17), 782)) => Node(<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>,targetSession := @parameter0: io.moquette.spi.ClientSession,-1,SimpleNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, specialinvoke this.<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>(clientSession), 723)) => Node(<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>,clientID = targetSession.<io.moquette.spi.ClientSession: java.lang.String clientID>,328,SinkNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, specialinvoke this.<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>(clientSession), 723) => (<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>, clientID = targetSession.<io.moquette.spi.ClientSession: java.lang.String clientID>, 328)))

List(Node(<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String getClientId()>,$stack1 = this.<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String clientId>,50,SourceNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, valid = virtualinvoke clientSession.<io.moquette.spi.ClientSession: boolean subscribe(io.moquette.spi.impl.subscriptions.Subscription)>(newSubscription), 740) => (<io.moquette.spi.ClientSession: boolean subscribe(io.moquette.spi.impl.subscriptions.Subscription)>, $stack9 = virtualinvoke newSubscription.<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String getClientId()>(), 99)) => Node(<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>,$stack17 = virtualinvoke newSubscription.<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String getClientId()>(),782,SimpleNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, specialinvoke this.<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>(req#13, username), 760) => (<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>, $stack17 = virtualinvoke newSubscription.<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String getClientId()>(), 782)) => Node(<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>,targetSession = interfaceinvoke $stack16.<io.moquette.spi.ISessionsStore: io.moquette.spi.ClientSession sessionForClient(java.lang.String)>($stack17),782,SimpleNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, specialinvoke this.<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>(req#13, username), 760) => (<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>, targetSession = interfaceinvoke $stack16.<io.moquette.spi.ISessionsStore: io.moquette.spi.ClientSession sessionForClient(java.lang.String)>($stack17), 782)) => Node(<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>,targetSession := @parameter0: io.moquette.spi.ClientSession,-1,SimpleNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, specialinvoke this.<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>(clientSession), 723)) => Node(<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>,clientID = targetSession.<io.moquette.spi.ClientSession: java.lang.String clientID>,328,SinkNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, specialinvoke this.<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>(clientSession), 723) => (<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>, clientID = targetSession.<io.moquette.spi.ClientSession: java.lang.String clientID>, 328)) => Node(<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>,$stack4 = interfaceinvoke $stack3.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(clientID),329,SinkNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, specialinvoke this.<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>(clientSession), 723) => (<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>, $stack4 = interfaceinvoke $stack3.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(clientID), 329)))

List(Node(<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String getClientId()>,$stack1 = this.<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String clientId>,50,SourceNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, valid = virtualinvoke clientSession.<io.moquette.spi.ClientSession: boolean subscribe(io.moquette.spi.impl.subscriptions.Subscription)>(newSubscription), 740) => (<io.moquette.spi.ClientSession: boolean subscribe(io.moquette.spi.impl.subscriptions.Subscription)>, $stack9 = virtualinvoke newSubscription.<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String getClientId()>(), 99)) => Node(<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>,$stack17 = virtualinvoke newSubscription.<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String getClientId()>(),782,SimpleNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, specialinvoke this.<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>(req#13, username), 760) => (<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>, $stack17 = virtualinvoke newSubscription.<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String getClientId()>(), 782)) => Node(<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>,targetSession = interfaceinvoke $stack16.<io.moquette.spi.ISessionsStore: io.moquette.spi.ClientSession sessionForClient(java.lang.String)>($stack17),782,SimpleNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, specialinvoke this.<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>(req#13, username), 760) => (<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>, targetSession = interfaceinvoke $stack16.<io.moquette.spi.ISessionsStore: io.moquette.spi.ClientSession sessionForClient(java.lang.String)>($stack17), 782)) => Node(<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>,targetSession := @parameter0: io.moquette.spi.ClientSession,-1,SimpleNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, specialinvoke this.<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>(clientSession), 723)) => Node(<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>,virtualinvoke targetSession.<io.moquette.spi.ClientSession: void activate()>(),330,SinkNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, specialinvoke this.<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>(clientSession), 723) => (<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>, virtualinvoke targetSession.<io.moquette.spi.ClientSession: void activate()>(), 330)))

List(Node(<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String getClientId()>,$stack1 = this.<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String clientId>,50,SourceNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, valid = virtualinvoke clientSession.<io.moquette.spi.ClientSession: boolean subscribe(io.moquette.spi.impl.subscriptions.Subscription)>(newSubscription), 740) => (<io.moquette.spi.ClientSession: boolean subscribe(io.moquette.spi.impl.subscriptions.Subscription)>, $stack9 = virtualinvoke newSubscription.<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String getClientId()>(), 99)) => Node(<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>,$stack17 = virtualinvoke newSubscription.<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String getClientId()>(),782,SimpleNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, specialinvoke this.<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>(req#13, username), 760) => (<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>, $stack17 = virtualinvoke newSubscription.<io.moquette.spi.impl.subscriptions.Subscription: java.lang.String getClientId()>(), 782)) => Node(<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>,targetSession = interfaceinvoke $stack16.<io.moquette.spi.ISessionsStore: io.moquette.spi.ClientSession sessionForClient(java.lang.String)>($stack17),782,SimpleNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, specialinvoke this.<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>(req#13, username), 760) => (<io.moquette.spi.impl.ProtocolProcessor: void publishStoredMessagesInSession(io.moquette.spi.impl.subscriptions.Subscription,java.lang.String)>, targetSession = interfaceinvoke $stack16.<io.moquette.spi.ISessionsStore: io.moquette.spi.ClientSession sessionForClient(java.lang.String)>($stack17), 782)) => Node(<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>,targetSession := @parameter0: io.moquette.spi.ClientSession,-1,SimpleNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, specialinvoke this.<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>(clientSession), 723)) => Node(<io.moquette.spi.ClientSession: void activate()>,this := @this: io.moquette.spi.ClientSession,-1,SimpleNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, specialinvoke this.<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>(clientSession), 723) => (<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>, virtualinvoke targetSession.<io.moquette.spi.ClientSession: void activate()>(), 330)) => Node(<io.moquette.spi.ClientSession: void activate()>,this.<io.moquette.spi.ClientSession: boolean active> = 1,158,SinkNode, path: (<io.moquette.spi.impl.ProtocolProcessor: void processSubscribe(io.netty.channel.Channel,io.moquette.parser.proto.messages.SubscribeMessage)>, specialinvoke this.<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>(clientSession), 723) => (<io.moquette.spi.impl.ProtocolProcessor: void verifyToActivate(io.moquette.spi.ClientSession)>, virtualinvoke targetSession.<io.moquette.spi.ClientSession: void activate()>(), 330) => (<io.moquette.spi.ClientSession: void activate()>, this.<io.moquette.spi.ClientSession: boolean active> = 1, 158)))

