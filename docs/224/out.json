[
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>,$stack11 = this.<com.akathist.maven.plugins.launch4j.Jre: int initialHeapPercent>,150,SourceNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack11 = this.<com.akathist.maven.plugins.launch4j.Jre: int initialHeapPercent>, 150)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0),832,SinkNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)) SINK=>BASE: Node(<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>,$stack15 = this.<com.akathist.maven.plugins.launch4j.Jre: int maxHeapPercent>,152,SourceNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack15 = this.<com.akathist.maven.plugins.launch4j.Jre: int maxHeapPercent>, 152)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0),832,SinkNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack15 = this.<com.akathist.maven.plugins.launch4j.Jre: int maxHeapPercent>",
				"location": {
					"file": "",
					"class": "com.akathist.maven.plugins.launch4j.Jre",
					"method": "<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>",
					"line": 152
				},
				"stackTrace": [{
	"class": "com.akathist.maven.plugins.launch4j.Jre",
	"method": "<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>",
	"line": 152
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
	"line": 832
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack11 = this.<com.akathist.maven.plugins.launch4j.Jre: int initialHeapPercent>",
				"location": {
					"file": "",
					"class": "com.akathist.maven.plugins.launch4j.Jre",
					"method": "<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>",
					"line": 150
				},
				"stackTrace": [{
	"class": "com.akathist.maven.plugins.launch4j.Jre",
	"method": "<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>",
	"line": 150
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
	"line": 832
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0)",
				"location": {
					"file": "",
					"class": "java.lang.Integer",
					"method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
					"line": 832
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>,$stack13 = this.<com.akathist.maven.plugins.launch4j.Jre: int maxHeapSize>,151,SourceNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack13 = this.<com.akathist.maven.plugins.launch4j.Jre: int maxHeapSize>, 151)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,$stack4 = l0 + 128,831,SinkNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, $stack4 = l0 + 128, 831)) SINK=>BASE: Node(<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>,$stack11 = this.<com.akathist.maven.plugins.launch4j.Jre: int initialHeapPercent>,150,SourceNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack11 = this.<com.akathist.maven.plugins.launch4j.Jre: int initialHeapPercent>, 150)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,$stack4 = l0 + 128,831,SinkNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, $stack4 = l0 + 128, 831))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack11 = this.<com.akathist.maven.plugins.launch4j.Jre: int initialHeapPercent>",
				"location": {
					"file": "",
					"class": "com.akathist.maven.plugins.launch4j.Jre",
					"method": "<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>",
					"line": 150
				},
				"stackTrace": [{
	"class": "com.akathist.maven.plugins.launch4j.Jre",
	"method": "<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>",
	"line": 150
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
	"line": 831
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack13 = this.<com.akathist.maven.plugins.launch4j.Jre: int maxHeapSize>",
				"location": {
					"file": "",
					"class": "com.akathist.maven.plugins.launch4j.Jre",
					"method": "<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>",
					"line": 151
				},
				"stackTrace": [{
	"class": "com.akathist.maven.plugins.launch4j.Jre",
	"method": "<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>",
	"line": 151
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
	"line": 831
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack4 = l0 + 128",
				"location": {
					"file": "",
					"class": "java.lang.Integer",
					"method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
					"line": 831
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>,$stack15 = this.<com.akathist.maven.plugins.launch4j.Jre: int maxHeapPercent>,152,SourceNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack15 = this.<com.akathist.maven.plugins.launch4j.Jre: int maxHeapPercent>, 152)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149)) => Node(<java.lang.Integer: void <init>(int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)) => Node(<java.lang.Integer: void <init>(int)>,l0.<java.lang.Integer: int value> = l1,850,SinkNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832) => (<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)) SINK=>BASE: Node(<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>,$stack11 = this.<com.akathist.maven.plugins.launch4j.Jre: int initialHeapPercent>,150,SourceNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack11 = this.<com.akathist.maven.plugins.launch4j.Jre: int initialHeapPercent>, 150)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149)) => Node(<java.lang.Integer: void <init>(int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)) => Node(<java.lang.Integer: void <init>(int)>,l0.<java.lang.Integer: int value> = l1,850,SinkNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832) => (<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack11 = this.<com.akathist.maven.plugins.launch4j.Jre: int initialHeapPercent>",
				"location": {
					"file": "",
					"class": "com.akathist.maven.plugins.launch4j.Jre",
					"method": "<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>",
					"line": 150
				},
				"stackTrace": [{
	"class": "com.akathist.maven.plugins.launch4j.Jre",
	"method": "<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>",
	"line": 150
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void <init>(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void <init>(int)>",
	"line": 850
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack15 = this.<com.akathist.maven.plugins.launch4j.Jre: int maxHeapPercent>",
				"location": {
					"file": "",
					"class": "com.akathist.maven.plugins.launch4j.Jre",
					"method": "<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>",
					"line": 152
				},
				"stackTrace": [{
	"class": "com.akathist.maven.plugins.launch4j.Jre",
	"method": "<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>",
	"line": 152
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void <init>(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void <init>(int)>",
	"line": 850
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l0.<java.lang.Integer: int value> = l1",
				"location": {
					"file": "",
					"class": "java.lang.Integer",
					"method": "<java.lang.Integer: void <init>(int)>",
					"line": 850
				}
			}
		]
	}
}

,

{
	"type": "OAINTER",
	"label": "OA conflict",
	"body": {
		"description": "<java.lang.Integer: int[] sizeTable> - <java.lang.Integer: int[] sizeTable>",
		"interference": [
			{
				"type": "declaration",
				"branch": "L",
				"text": "<java.lang.Integer: int[] sizeTable> = $stack4",
				"location": {
					"file": "",
					"class": "java.lang.Integer",
					"method": "<clinit>",
					"line": 467
				},
				"stackTrace": [{
	"class": "com.akathist.maven.plugins.launch4j.Jre",
	"method": "toL4j",
	"line": 149
},{
	"class": "java.lang.Integer",
	"method": "<clinit>",
	"line": 467
}]
			},
			{
				"type": "override",
				"branch": "R",
				"text": "<java.lang.Integer: int[] sizeTable> = $stack4",
				"location": {
					"file": "",
					"class": "java.lang.Integer",
					"method": "<clinit>",
					"line": 467
				},
				"stackTrace": [{
	"class": "com.akathist.maven.plugins.launch4j.Jre",
	"method": "toL4j",
	"line": 149
},{
	"class": "java.lang.Integer",
	"method": "<clinit>",
	"line": 467
}]
			}
		]
	}
}

]
