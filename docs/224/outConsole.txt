Running soot scenario launch4j-maven-plugin;com.akathist.maven.plugins.launch4j.Jre;toL4j();fa32ac37750ca59daf0bc99d03ab1bf20c2f03ea
Running ConflictDetectionAlgorithm{name='Confluence Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/launch4j-maven-plugin/fa32ac37750ca59daf0bc99d03ab1bf20c2f03ea/original-without-dependencies/launch4j-maven-plugin-1.7.9-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot Confluence 1 Inter 0,45200
Time to perform Confluence 1 Inter 0,46500
Configure Soot Confluence 2 Inter 0,12800
Time to perform Confluence 2 Inter 0,06000
Visited methods: 6
Depth limit: 5
CONFLICTS: [SOURCE=>BASE: Node(<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>,$stack13 = this.<com.akathist.maven.plugins.launch4j.Jre: int maxHeapSize>,151,SourceNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack13 = this.<com.akathist.maven.plugins.launch4j.Jre: int maxHeapSize>, 151)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,$stack4 = l0 + 128,831,SinkNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, $stack4 = l0 + 128, 831))
SINK=>BASE: Node(<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>,$stack15 = this.<com.akathist.maven.plugins.launch4j.Jre: int maxHeapPercent>,152,SourceNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack15 = this.<com.akathist.maven.plugins.launch4j.Jre: int maxHeapPercent>, 152)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,$stack4 = l0 + 128,831,SinkNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, $stack4 = l0 + 128, 831)), SOURCE=>BASE: Node(<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>,$stack13 = this.<com.akathist.maven.plugins.launch4j.Jre: int maxHeapSize>,151,SourceNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack13 = this.<com.akathist.maven.plugins.launch4j.Jre: int maxHeapSize>, 151)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,$stack4 = l0 + 128,831,SinkNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, $stack4 = l0 + 128, 831))
SINK=>BASE: Node(<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>,$stack13 = this.<com.akathist.maven.plugins.launch4j.Jre: int maxHeapSize>,151,SourceNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack13 = this.<com.akathist.maven.plugins.launch4j.Jre: int maxHeapSize>, 151)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,$stack4 = l0 + 128,831,SinkNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, $stack4 = l0 + 128, 831)), SOURCE=>BASE: Node(<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>,$stack11 = this.<com.akathist.maven.plugins.launch4j.Jre: int initialHeapPercent>,150,SourceNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack11 = this.<com.akathist.maven.plugins.launch4j.Jre: int initialHeapPercent>, 150)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0),832,SinkNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832))
SINK=>BASE: Node(<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>,$stack11 = this.<com.akathist.maven.plugins.launch4j.Jre: int initialHeapPercent>,150,SourceNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack11 = this.<com.akathist.maven.plugins.launch4j.Jre: int initialHeapPercent>, 150)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0),832,SinkNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)), SOURCE=>BASE: Node(<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>,$stack15 = this.<com.akathist.maven.plugins.launch4j.Jre: int maxHeapPercent>,152,SourceNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack15 = this.<com.akathist.maven.plugins.launch4j.Jre: int maxHeapPercent>, 152)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149)) => Node(<java.lang.Integer: void <init>(int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)) => Node(<java.lang.Integer: void <init>(int)>,l0.<java.lang.Integer: int value> = l1,850,SinkNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832) => (<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850))
SINK=>BASE: Node(<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>,$stack15 = this.<com.akathist.maven.plugins.launch4j.Jre: int maxHeapPercent>,152,SourceNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack15 = this.<com.akathist.maven.plugins.launch4j.Jre: int maxHeapPercent>, 152)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149)) => Node(<java.lang.Integer: void <init>(int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)) => Node(<java.lang.Integer: void <init>(int)>,l0.<java.lang.Integer: int value> = l1,850,SinkNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832) => (<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)), SOURCE=>BASE: Node(<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>,$stack15 = this.<com.akathist.maven.plugins.launch4j.Jre: int maxHeapPercent>,152,SourceNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack15 = this.<com.akathist.maven.plugins.launch4j.Jre: int maxHeapPercent>, 152)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149)) => Node(<java.lang.Integer: void <init>(int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)) => Node(<java.lang.Integer: void <init>(int)>,l0.<java.lang.Integer: int value> = l1,850,SinkNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832) => (<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850))
SINK=>BASE: Node(<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>,$stack13 = this.<com.akathist.maven.plugins.launch4j.Jre: int maxHeapSize>,151,SourceNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack13 = this.<com.akathist.maven.plugins.launch4j.Jre: int maxHeapSize>, 151)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149)) => Node(<java.lang.Integer: void <init>(int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)) => Node(<java.lang.Integer: void <init>(int)>,l0.<java.lang.Integer: int value> = l1,850,SinkNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832) => (<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)), SOURCE=>BASE: Node(<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>,$stack11 = this.<com.akathist.maven.plugins.launch4j.Jre: int initialHeapPercent>,150,SourceNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack11 = this.<com.akathist.maven.plugins.launch4j.Jre: int initialHeapPercent>, 150)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0),832,SinkNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832))
SINK=>BASE: Node(<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>,$stack9 = this.<com.akathist.maven.plugins.launch4j.Jre: int initialHeapSize>,149,SourceNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack9 = this.<com.akathist.maven.plugins.launch4j.Jre: int initialHeapSize>, 149)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0),832,SinkNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)), SOURCE=>BASE: Node(<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>,$stack11 = this.<com.akathist.maven.plugins.launch4j.Jre: int initialHeapPercent>,150,SourceNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack11 = this.<com.akathist.maven.plugins.launch4j.Jre: int initialHeapPercent>, 150)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0),832,SinkNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832))
SINK=>BASE: Node(<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>,$stack13 = this.<com.akathist.maven.plugins.launch4j.Jre: int maxHeapSize>,151,SourceNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack13 = this.<com.akathist.maven.plugins.launch4j.Jre: int maxHeapSize>, 151)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0),832,SinkNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)), SOURCE=>BASE: Node(<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>,$stack13 = this.<com.akathist.maven.plugins.launch4j.Jre: int maxHeapSize>,151,SourceNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack13 = this.<com.akathist.maven.plugins.launch4j.Jre: int maxHeapSize>, 151)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,$stack4 = l0 + 128,831,SinkNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, $stack4 = l0 + 128, 831))
SINK=>BASE: Node(<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>,$stack9 = this.<com.akathist.maven.plugins.launch4j.Jre: int initialHeapSize>,149,SourceNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack9 = this.<com.akathist.maven.plugins.launch4j.Jre: int initialHeapSize>, 149)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,$stack4 = l0 + 128,831,SinkNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, $stack4 = l0 + 128, 831)), SOURCE=>BASE: Node(<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>,$stack11 = this.<com.akathist.maven.plugins.launch4j.Jre: int initialHeapPercent>,150,SourceNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack11 = this.<com.akathist.maven.plugins.launch4j.Jre: int initialHeapPercent>, 150)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0),832,SinkNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832))
SINK=>BASE: Node(<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>,$stack15 = this.<com.akathist.maven.plugins.launch4j.Jre: int maxHeapPercent>,152,SourceNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack15 = this.<com.akathist.maven.plugins.launch4j.Jre: int maxHeapPercent>, 152)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0),832,SinkNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)), SOURCE=>BASE: Node(<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>,$stack15 = this.<com.akathist.maven.plugins.launch4j.Jre: int maxHeapPercent>,152,SourceNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack15 = this.<com.akathist.maven.plugins.launch4j.Jre: int maxHeapPercent>, 152)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149)) => Node(<java.lang.Integer: void <init>(int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)) => Node(<java.lang.Integer: void <init>(int)>,l0.<java.lang.Integer: int value> = l1,850,SinkNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832) => (<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850))
SINK=>BASE: Node(<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>,$stack9 = this.<com.akathist.maven.plugins.launch4j.Jre: int initialHeapSize>,149,SourceNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack9 = this.<com.akathist.maven.plugins.launch4j.Jre: int initialHeapSize>, 149)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149)) => Node(<java.lang.Integer: void <init>(int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)) => Node(<java.lang.Integer: void <init>(int)>,l0.<java.lang.Integer: int value> = l1,850,SinkNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832) => (<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)), SOURCE=>BASE: Node(<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>,$stack13 = this.<com.akathist.maven.plugins.launch4j.Jre: int maxHeapSize>,151,SourceNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack13 = this.<com.akathist.maven.plugins.launch4j.Jre: int maxHeapSize>, 151)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,$stack4 = l0 + 128,831,SinkNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, $stack4 = l0 + 128, 831))
SINK=>BASE: Node(<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>,$stack11 = this.<com.akathist.maven.plugins.launch4j.Jre: int initialHeapPercent>,150,SourceNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack11 = this.<com.akathist.maven.plugins.launch4j.Jre: int initialHeapPercent>, 150)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,$stack4 = l0 + 128,831,SinkNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, $stack4 = l0 + 128, 831)), SOURCE=>BASE: Node(<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>,$stack15 = this.<com.akathist.maven.plugins.launch4j.Jre: int maxHeapPercent>,152,SourceNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack15 = this.<com.akathist.maven.plugins.launch4j.Jre: int maxHeapPercent>, 152)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149)) => Node(<java.lang.Integer: void <init>(int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)) => Node(<java.lang.Integer: void <init>(int)>,l0.<java.lang.Integer: int value> = l1,850,SinkNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832) => (<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850))
SINK=>BASE: Node(<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>,$stack11 = this.<com.akathist.maven.plugins.launch4j.Jre: int initialHeapPercent>,150,SourceNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack11 = this.<com.akathist.maven.plugins.launch4j.Jre: int initialHeapPercent>, 150)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149)) => Node(<java.lang.Integer: void <init>(int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)) => Node(<java.lang.Integer: void <init>(int)>,l0.<java.lang.Integer: int value> = l1,850,SinkNode, path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832) => (<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850))]
Confluence interference in <com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>
Confluence flows from execution of lines 151 and 152 to line 149, defined in $stack13 = this.<com.akathist.maven.plugins.launch4j.Jre: int maxHeapSize> and $stack15 = this.<com.akathist.maven.plugins.launch4j.Jre: int maxHeapPercent> and used in $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9)
Caused by line 151 flow: path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack13 = this.<com.akathist.maven.plugins.launch4j.Jre: int maxHeapSize>, 151)
Caused by line 152 flow: path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack15 = this.<com.akathist.maven.plugins.launch4j.Jre: int maxHeapPercent>, 152)
Caused by line 149 flow: path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, $stack4 = l0 + 128, 831)
Confluence interference in <com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>
Confluence flows from execution of lines 151 and 151 to line 149, defined in $stack13 = this.<com.akathist.maven.plugins.launch4j.Jre: int maxHeapSize> and $stack13 = this.<com.akathist.maven.plugins.launch4j.Jre: int maxHeapSize> and used in $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9)
Caused by line 151 flow: path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack13 = this.<com.akathist.maven.plugins.launch4j.Jre: int maxHeapSize>, 151)
Caused by line 151 flow: path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack13 = this.<com.akathist.maven.plugins.launch4j.Jre: int maxHeapSize>, 151)
Caused by line 149 flow: path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, $stack4 = l0 + 128, 831)
Confluence interference in <com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>
Confluence flows from execution of lines 150 and 150 to line 149, defined in $stack11 = this.<com.akathist.maven.plugins.launch4j.Jre: int initialHeapPercent> and $stack11 = this.<com.akathist.maven.plugins.launch4j.Jre: int initialHeapPercent> and used in $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9)
Caused by line 150 flow: path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack11 = this.<com.akathist.maven.plugins.launch4j.Jre: int initialHeapPercent>, 150)
Caused by line 150 flow: path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack11 = this.<com.akathist.maven.plugins.launch4j.Jre: int initialHeapPercent>, 150)
Caused by line 149 flow: path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)
Confluence interference in <com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>
Confluence flows from execution of lines 152 and 152 to line 149, defined in $stack15 = this.<com.akathist.maven.plugins.launch4j.Jre: int maxHeapPercent> and $stack15 = this.<com.akathist.maven.plugins.launch4j.Jre: int maxHeapPercent> and used in $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9)
Caused by line 152 flow: path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack15 = this.<com.akathist.maven.plugins.launch4j.Jre: int maxHeapPercent>, 152)
Caused by line 152 flow: path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack15 = this.<com.akathist.maven.plugins.launch4j.Jre: int maxHeapPercent>, 152)
Caused by line 149 flow: path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832) => (<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)
Confluence interference in <com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>
Confluence flows from execution of lines 150 and 149 to line 149, defined in $stack11 = this.<com.akathist.maven.plugins.launch4j.Jre: int initialHeapPercent> and $stack9 = this.<com.akathist.maven.plugins.launch4j.Jre: int initialHeapSize> and used in $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9)
Caused by line 150 flow: path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack11 = this.<com.akathist.maven.plugins.launch4j.Jre: int initialHeapPercent>, 150)
Caused by line 149 flow: path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack9 = this.<com.akathist.maven.plugins.launch4j.Jre: int initialHeapSize>, 149)
Caused by line 149 flow: path: (<com.akathist.maven.plugins.launch4j.Jre: net.sf.launch4j.config.Jre toL4j()>, $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9), 149) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)
 Analysis results
----------------------------
 Number of conflicts: 12
 Results exported to out.txt
Error getting the previous content of the JSON file out.json
 JSON Results exported to out.json
----------------------------
Running ConflictDetectionAlgorithm{name='OA Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/launch4j-maven-plugin/fa32ac37750ca59daf0bc99d03ab1bf20c2f03ea/original-without-dependencies/launch4j-maven-plugin-1.7.9-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Depth limit: 5
Configure Soot OA Inter 0,47600
Runtime: 0.033s
OA interference in class Jre, method net.sf.launch4j.config.Jre toL4j(), execution of line 149 overrides 149, assigning to variable <java.lang.Integer: int[] sizeTable>, 
Caused by line 149 flow:
at com.akathist.maven.plugins.launch4j.Jre.toL4j(Jre.java:149)
at java.lang.Integer.<clinit>(Integer.java:467)
And line 149 flow:
at com.akathist.maven.plugins.launch4j.Jre.toL4j(Jre.java:149)
at java.lang.Integer.<clinit>(Integer.java:467)
 
Time to perform OA Inter 0,58200
OA Inter Visited methods: 13
 Analysis results
----------------------------
 Number of conflicts: 266
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/launch4j-maven-plugin/fa32ac37750ca59daf0bc99d03ab1bf20c2f03ea/original-without-dependencies/launch4j-maven-plugin-1.7.9-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,33800
Time to perform DFP Inter 0,26100
Depth limit: 5
CONFLICTS: []
Visited methods: 3
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/launch4j-maven-plugin/fa32ac37750ca59daf0bc99d03ab1bf20c2f03ea/original-without-dependencies/launch4j-maven-plugin-1.7.9-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,40700
Time to perform DFP Inter 0,31000
Depth limit: 5
CONFLICTS: []
Visited methods: 3
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/launch4j-maven-plugin/fa32ac37750ca59daf0bc99d03ab1bf20c2f03ea/original-without-dependencies/launch4j-maven-plugin-1.7.9-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,33500
Time to perform PDG 0,30400
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/launch4j-maven-plugin/fa32ac37750ca59daf0bc99d03ab1bf20c2f03ea/original-without-dependencies/launch4j-maven-plugin-1.7.9-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,44500
Time to perform PDG 0,41800
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
