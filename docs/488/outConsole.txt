Running soot scenario junit-rules;co.unruly.junit.IgnoreUntilRule;apply(Statement, Description);9f9e68b409b45bc46b8210c50964508e185dea8f
Running ConflictDetectionAlgorithm{name='Confluence Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/junit-rules/9f9e68b409b45bc46b8210c50964508e185dea8f/original-without-dependencies/junit-rules-1.1-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot Confluence 1 Inter 0,52000
Time to perform Confluence 1 Inter 0,63000
Configure Soot Confluence 2 Inter 0,12800
Time to perform Confluence 2 Inter 0,09400
Visited methods: 14
Depth limit: 5
CONFLICTS: [SOURCE=>BASE: Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack12 = virtualinvoke $stack11.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>(datetime),40,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32)) => Node(<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>,annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate),32,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32)) => Node(<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>,$stack9 = virtualinvoke annotationDate.<org.joda.time.DateTime: boolean isAfterNow()>(),34,SinkNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, $stack9 = virtualinvoke annotationDate.<org.joda.time.DateTime: boolean isAfterNow()>(), 34))
SINK=>BASE: Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack9 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>("yyyy-MM-dd\'T\'HH:mm:ss"),42,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32) => (<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>, $stack9 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>('yyyy-MM-dd\'T\'HH:mm:ss'), 42)) => Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack10 = virtualinvoke $stack9.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>(datetime),42,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32)) => Node(<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>,annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate),32,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32)) => Node(<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>,$stack9 = virtualinvoke annotationDate.<org.joda.time.DateTime: boolean isAfterNow()>(),34,SinkNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, $stack9 = virtualinvoke annotationDate.<org.joda.time.DateTime: boolean isAfterNow()>(), 34)), SOURCE=>BASE: Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack12 = virtualinvoke $stack11.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>(datetime),40,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32)) => Node(<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>,annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate),32,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32)) => Node(<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>,$stack9 = virtualinvoke annotationDate.<org.joda.time.DateTime: boolean isAfterNow()>(),34,SinkNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, $stack9 = virtualinvoke annotationDate.<org.joda.time.DateTime: boolean isAfterNow()>(), 34))
SINK=>BASE: Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack12 = virtualinvoke $stack11.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>(datetime),40,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32)) => Node(<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>,annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate),32,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32)) => Node(<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>,$stack9 = virtualinvoke annotationDate.<org.joda.time.DateTime: boolean isAfterNow()>(),34,SinkNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, $stack9 = virtualinvoke annotationDate.<org.joda.time.DateTime: boolean isAfterNow()>(), 34)), SOURCE=>BASE: Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack12 = virtualinvoke $stack11.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>(datetime),40,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32)) => Node(<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>,annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate),32,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32)) => Node(<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>,$stack9 = virtualinvoke annotationDate.<org.joda.time.DateTime: boolean isAfterNow()>(),34,SinkNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, $stack9 = virtualinvoke annotationDate.<org.joda.time.DateTime: boolean isAfterNow()>(), 34))
SINK=>BASE: Node(<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>,annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate),32,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32)) => Node(<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>,$stack9 = virtualinvoke annotationDate.<org.joda.time.DateTime: boolean isAfterNow()>(),34,SinkNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, $stack9 = virtualinvoke annotationDate.<org.joda.time.DateTime: boolean isAfterNow()>(), 34))]
Confluence interference in <co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>
Confluence flows from execution of lines 32 and 32 to line 34, defined in annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate) and annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate) and used in $stack9 = virtualinvoke annotationDate.<org.joda.time.DateTime: boolean isAfterNow()>()
Caused by line 32 flow: path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32)
Caused by line 32 flow: path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32) => (<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>, $stack9 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>('yyyy-MM-dd\'T\'HH:mm:ss'), 42)
Caused by line 34 flow: path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, $stack9 = virtualinvoke annotationDate.<org.joda.time.DateTime: boolean isAfterNow()>(), 34)
 Analysis results
----------------------------
 Number of conflicts: 3
 Results exported to out.txt
Error getting the previous content of the JSON file out.json
 JSON Results exported to out.json
----------------------------
Running ConflictDetectionAlgorithm{name='OA Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/junit-rules/9f9e68b409b45bc46b8210c50964508e185dea8f/original-without-dependencies/junit-rules-1.1-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Depth limit: 5
Configure Soot OA Inter 0,45200
Runtime: 0.006s
Time to perform OA Inter 0,49000
OA Inter Visited methods: 2
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/junit-rules/9f9e68b409b45bc46b8210c50964508e185dea8f/original-without-dependencies/junit-rules-1.1-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,34600
Time to perform DFP Inter 0,43500
Depth limit: 5
CONFLICTS: DF interference in <co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>
Data flows from execution of line 32 to 32, defined in $stack8 = new java.lang.IllegalArgumentException and propagated in specialinvoke $stack8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Please provide correct datetime pattern, one of: \nyyyy-MM-dd\nyyyy-MM-ddTHH:mm:ss")
Caused by line 32 flow: path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32) => (<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>, specialinvoke $stack8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>('Please provide correct datetime pattern, one of: \nyyyy-MM-dd\nyyyy-MM-ddTHH:mm:ss'), 44)
Caused by line 32 flow: path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32) => (<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>, specialinvoke $stack8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>('Please provide correct datetime pattern, one of: \nyyyy-MM-dd\nyyyy-MM-ddTHH:mm:ss'), 44)
DF interference in <co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>
Empty list for reporting data flow! Error: head of empty list
[List(Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack2 = <co.unruly.junit.IgnoreUntilRule: java.util.regex.Pattern DATE_REGEX>,39,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32) => (<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>, $stack3 = virtualinvoke $stack2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(datetime), 39)) => Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack3 = virtualinvoke $stack2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(datetime),39,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32) => (<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>, $stack3 = virtualinvoke $stack2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(datetime), 39)) => Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack4 = virtualinvoke $stack3.<java.util.regex.Matcher: boolean matches()>(),39,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32) => (<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>, $stack4 = virtualinvoke $stack3.<java.util.regex.Matcher: boolean matches()>(), 39)) => Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,if $stack4 == 0 goto $stack5 = <co.unruly.junit.IgnoreUntilRule: java.util.regex.Pattern DATETIME_REGEX>,39,SinkNode, path: )), List(Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack8 = new java.lang.IllegalArgumentException,44,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32) => (<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>, specialinvoke $stack8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>('Please provide correct datetime pattern, one of: \nyyyy-MM-dd\nyyyy-MM-ddTHH:mm:ss'), 44)) => Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,specialinvoke $stack8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Please provide correct datetime pattern, one of: \nyyyy-MM-dd\nyyyy-MM-ddTHH:mm:ss"),44,SinkNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32) => (<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>, specialinvoke $stack8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>('Please provide correct datetime pattern, one of: \nyyyy-MM-dd\nyyyy-MM-ddTHH:mm:ss'), 44))), List(Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack12 = virtualinvoke $stack11.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>(datetime),40,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32)) => Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,return $stack12,40,SinkNode, path: )), List(Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack5 = <co.unruly.junit.IgnoreUntilRule: java.util.regex.Pattern DATETIME_REGEX>,41,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32) => (<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>, $stack6 = virtualinvoke $stack5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(datetime), 41)) => Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack6 = virtualinvoke $stack5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(datetime),41,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32) => (<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>, $stack6 = virtualinvoke $stack5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(datetime), 41)) => Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack7 = virtualinvoke $stack6.<java.util.regex.Matcher: boolean matches()>(),41,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32) => (<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.util.regex.Matcher: boolean matches()>(), 41)) => Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,if $stack7 == 0 goto $stack8 = new java.lang.IllegalArgumentException,41,SinkNode, path: )), List(Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack9 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>("yyyy-MM-dd\'T\'HH:mm:ss"),42,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32) => (<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>, $stack9 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>('yyyy-MM-dd\'T\'HH:mm:ss'), 42)) => Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack10 = virtualinvoke $stack9.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>(datetime),42,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32)) => Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,return $stack10,42,SinkNode, path: ))]
Visited methods: 7
 Analysis results
----------------------------
 Number of conflicts: 5
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/junit-rules/9f9e68b409b45bc46b8210c50964508e185dea8f/original-without-dependencies/junit-rules-1.1-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,46100
Time to perform DFP Inter 0,46100
Depth limit: 5
CONFLICTS: DF interference in <co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>
Data flows from execution of line 32 to 32, defined in $stack8 = new java.lang.IllegalArgumentException and propagated in specialinvoke $stack8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Please provide correct datetime pattern, one of: \nyyyy-MM-dd\nyyyy-MM-ddTHH:mm:ss")
Caused by line 32 flow: path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32) => (<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>, specialinvoke $stack8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>('Please provide correct datetime pattern, one of: \nyyyy-MM-dd\nyyyy-MM-ddTHH:mm:ss'), 44)
Caused by line 32 flow: path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32) => (<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>, specialinvoke $stack8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>('Please provide correct datetime pattern, one of: \nyyyy-MM-dd\nyyyy-MM-ddTHH:mm:ss'), 44)
DF interference in <co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>
Empty list for reporting data flow! Error: head of empty list
[List(Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack2 = <co.unruly.junit.IgnoreUntilRule: java.util.regex.Pattern DATE_REGEX>,39,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32) => (<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>, $stack3 = virtualinvoke $stack2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(datetime), 39)) => Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack3 = virtualinvoke $stack2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(datetime),39,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32) => (<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>, $stack3 = virtualinvoke $stack2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(datetime), 39)) => Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack4 = virtualinvoke $stack3.<java.util.regex.Matcher: boolean matches()>(),39,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32) => (<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>, $stack4 = virtualinvoke $stack3.<java.util.regex.Matcher: boolean matches()>(), 39)) => Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,if $stack4 == 0 goto $stack5 = <co.unruly.junit.IgnoreUntilRule: java.util.regex.Pattern DATETIME_REGEX>,39,SinkNode, path: )), List(Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack8 = new java.lang.IllegalArgumentException,44,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32) => (<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>, specialinvoke $stack8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>('Please provide correct datetime pattern, one of: \nyyyy-MM-dd\nyyyy-MM-ddTHH:mm:ss'), 44)) => Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,specialinvoke $stack8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Please provide correct datetime pattern, one of: \nyyyy-MM-dd\nyyyy-MM-ddTHH:mm:ss"),44,SinkNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32) => (<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>, specialinvoke $stack8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>('Please provide correct datetime pattern, one of: \nyyyy-MM-dd\nyyyy-MM-ddTHH:mm:ss'), 44))), List(Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack12 = virtualinvoke $stack11.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>(datetime),40,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32)) => Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,return $stack12,40,SinkNode, path: )), List(Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack5 = <co.unruly.junit.IgnoreUntilRule: java.util.regex.Pattern DATETIME_REGEX>,41,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32) => (<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>, $stack6 = virtualinvoke $stack5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(datetime), 41)) => Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack6 = virtualinvoke $stack5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(datetime),41,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32) => (<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>, $stack6 = virtualinvoke $stack5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(datetime), 41)) => Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack7 = virtualinvoke $stack6.<java.util.regex.Matcher: boolean matches()>(),41,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32) => (<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.util.regex.Matcher: boolean matches()>(), 41)) => Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,if $stack7 == 0 goto $stack8 = new java.lang.IllegalArgumentException,41,SinkNode, path: )), List(Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack9 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>("yyyy-MM-dd\'T\'HH:mm:ss"),42,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32) => (<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>, $stack9 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>('yyyy-MM-dd\'T\'HH:mm:ss'), 42)) => Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack10 = virtualinvoke $stack9.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>(datetime),42,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32)) => Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,return $stack10,42,SinkNode, path: ))]
Visited methods: 7
 Analysis results
----------------------------
 Number of conflicts: 5
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/junit-rules/9f9e68b409b45bc46b8210c50964508e185dea8f/original-without-dependencies/junit-rules-1.1-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,36200
Time to perform PDG 0,30800
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/junit-rules/9f9e68b409b45bc46b8210c50964508e185dea8f/original-without-dependencies/junit-rules-1.1-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,39100
Time to perform PDG 0,42500
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
