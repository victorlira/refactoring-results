SOURCE=>BASE: Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack12 = virtualinvoke $stack11.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>(datetime),40,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32)) => Node(<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>,annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate),32,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32)) => Node(<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>,$stack9 = virtualinvoke annotationDate.<org.joda.time.DateTime: boolean isAfterNow()>(),34,SinkNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, $stack9 = virtualinvoke annotationDate.<org.joda.time.DateTime: boolean isAfterNow()>(), 34))
SINK=>BASE: Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack9 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>("yyyy-MM-dd\'T\'HH:mm:ss"),42,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32) => (<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>, $stack9 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>('yyyy-MM-dd\'T\'HH:mm:ss'), 42)) => Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack10 = virtualinvoke $stack9.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>(datetime),42,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32)) => Node(<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>,annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate),32,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32)) => Node(<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>,$stack9 = virtualinvoke annotationDate.<org.joda.time.DateTime: boolean isAfterNow()>(),34,SinkNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, $stack9 = virtualinvoke annotationDate.<org.joda.time.DateTime: boolean isAfterNow()>(), 34))

SOURCE=>BASE: Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack12 = virtualinvoke $stack11.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>(datetime),40,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32)) => Node(<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>,annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate),32,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32)) => Node(<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>,$stack9 = virtualinvoke annotationDate.<org.joda.time.DateTime: boolean isAfterNow()>(),34,SinkNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, $stack9 = virtualinvoke annotationDate.<org.joda.time.DateTime: boolean isAfterNow()>(), 34))
SINK=>BASE: Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack12 = virtualinvoke $stack11.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>(datetime),40,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32)) => Node(<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>,annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate),32,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32)) => Node(<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>,$stack9 = virtualinvoke annotationDate.<org.joda.time.DateTime: boolean isAfterNow()>(),34,SinkNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, $stack9 = virtualinvoke annotationDate.<org.joda.time.DateTime: boolean isAfterNow()>(), 34))

SOURCE=>BASE: Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack12 = virtualinvoke $stack11.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>(datetime),40,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32)) => Node(<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>,annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate),32,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32)) => Node(<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>,$stack9 = virtualinvoke annotationDate.<org.joda.time.DateTime: boolean isAfterNow()>(),34,SinkNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, $stack9 = virtualinvoke annotationDate.<org.joda.time.DateTime: boolean isAfterNow()>(), 34))
SINK=>BASE: Node(<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>,annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate),32,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32)) => Node(<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>,$stack9 = virtualinvoke annotationDate.<org.joda.time.DateTime: boolean isAfterNow()>(),34,SinkNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, $stack9 = virtualinvoke annotationDate.<org.joda.time.DateTime: boolean isAfterNow()>(), 34))

List(Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack2 = <co.unruly.junit.IgnoreUntilRule: java.util.regex.Pattern DATE_REGEX>,39,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32) => (<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>, $stack3 = virtualinvoke $stack2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(datetime), 39)) => Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack3 = virtualinvoke $stack2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(datetime),39,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32) => (<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>, $stack3 = virtualinvoke $stack2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(datetime), 39)) => Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack4 = virtualinvoke $stack3.<java.util.regex.Matcher: boolean matches()>(),39,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32) => (<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>, $stack4 = virtualinvoke $stack3.<java.util.regex.Matcher: boolean matches()>(), 39)) => Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,if $stack4 == 0 goto $stack5 = <co.unruly.junit.IgnoreUntilRule: java.util.regex.Pattern DATETIME_REGEX>,39,SinkNode, path: ))

List(Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack8 = new java.lang.IllegalArgumentException,44,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32) => (<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>, specialinvoke $stack8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>('Please provide correct datetime pattern, one of: \nyyyy-MM-dd\nyyyy-MM-ddTHH:mm:ss'), 44)) => Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,specialinvoke $stack8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Please provide correct datetime pattern, one of: \nyyyy-MM-dd\nyyyy-MM-ddTHH:mm:ss"),44,SinkNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32) => (<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>, specialinvoke $stack8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>('Please provide correct datetime pattern, one of: \nyyyy-MM-dd\nyyyy-MM-ddTHH:mm:ss'), 44)))

List(Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack12 = virtualinvoke $stack11.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>(datetime),40,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32)) => Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,return $stack12,40,SinkNode, path: ))

List(Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack5 = <co.unruly.junit.IgnoreUntilRule: java.util.regex.Pattern DATETIME_REGEX>,41,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32) => (<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>, $stack6 = virtualinvoke $stack5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(datetime), 41)) => Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack6 = virtualinvoke $stack5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(datetime),41,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32) => (<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>, $stack6 = virtualinvoke $stack5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(datetime), 41)) => Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack7 = virtualinvoke $stack6.<java.util.regex.Matcher: boolean matches()>(),41,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32) => (<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.util.regex.Matcher: boolean matches()>(), 41)) => Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,if $stack7 == 0 goto $stack8 = new java.lang.IllegalArgumentException,41,SinkNode, path: ))

List(Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack9 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>("yyyy-MM-dd\'T\'HH:mm:ss"),42,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32) => (<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>, $stack9 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>('yyyy-MM-dd\'T\'HH:mm:ss'), 42)) => Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack10 = virtualinvoke $stack9.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>(datetime),42,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32)) => Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,return $stack10,42,SinkNode, path: ))

List(Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack2 = <co.unruly.junit.IgnoreUntilRule: java.util.regex.Pattern DATE_REGEX>,39,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32) => (<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>, $stack3 = virtualinvoke $stack2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(datetime), 39)) => Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack3 = virtualinvoke $stack2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(datetime),39,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32) => (<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>, $stack3 = virtualinvoke $stack2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(datetime), 39)) => Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack4 = virtualinvoke $stack3.<java.util.regex.Matcher: boolean matches()>(),39,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32) => (<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>, $stack4 = virtualinvoke $stack3.<java.util.regex.Matcher: boolean matches()>(), 39)) => Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,if $stack4 == 0 goto $stack5 = <co.unruly.junit.IgnoreUntilRule: java.util.regex.Pattern DATETIME_REGEX>,39,SinkNode, path: ))

List(Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack8 = new java.lang.IllegalArgumentException,44,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32) => (<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>, specialinvoke $stack8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>('Please provide correct datetime pattern, one of: \nyyyy-MM-dd\nyyyy-MM-ddTHH:mm:ss'), 44)) => Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,specialinvoke $stack8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Please provide correct datetime pattern, one of: \nyyyy-MM-dd\nyyyy-MM-ddTHH:mm:ss"),44,SinkNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32) => (<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>, specialinvoke $stack8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>('Please provide correct datetime pattern, one of: \nyyyy-MM-dd\nyyyy-MM-ddTHH:mm:ss'), 44)))

List(Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack12 = virtualinvoke $stack11.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>(datetime),40,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32)) => Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,return $stack12,40,SinkNode, path: ))

List(Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack5 = <co.unruly.junit.IgnoreUntilRule: java.util.regex.Pattern DATETIME_REGEX>,41,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32) => (<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>, $stack6 = virtualinvoke $stack5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(datetime), 41)) => Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack6 = virtualinvoke $stack5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(datetime),41,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32) => (<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>, $stack6 = virtualinvoke $stack5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(datetime), 41)) => Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack7 = virtualinvoke $stack6.<java.util.regex.Matcher: boolean matches()>(),41,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32) => (<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.util.regex.Matcher: boolean matches()>(), 41)) => Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,if $stack7 == 0 goto $stack8 = new java.lang.IllegalArgumentException,41,SinkNode, path: ))

List(Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack9 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>("yyyy-MM-dd\'T\'HH:mm:ss"),42,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32) => (<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>, $stack9 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>('yyyy-MM-dd\'T\'HH:mm:ss'), 42)) => Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,$stack10 = virtualinvoke $stack9.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>(datetime),42,SourceNode, path: (<co.unruly.junit.IgnoreUntilRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>, annotationDate = specialinvoke this.<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>(ignoreUntilDate), 32)) => Node(<co.unruly.junit.IgnoreUntilRule: org.joda.time.DateTime parseDateTime(java.lang.String)>,return $stack10,42,SinkNode, path: ))

