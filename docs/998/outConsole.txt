Running soot scenario jeromq;zmq.io.mechanism.curve.CurveServerMechanism;decode(Msg);f589efe70baa47650bc321e5e240d51d4ae79ba2
Running ConflictDetectionAlgorithm{name='Confluence Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/jeromq/f589efe70baa47650bc321e5e240d51d4ae79ba2/original-without-dependencies/jeromq-0.5.1-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot Confluence 1 Inter 0,67000
Time to perform Confluence 1 Inter 0,87200
Configure Soot Confluence 2 Inter 0,28100
Time to perform Confluence 2 Inter 0,20200
Visited methods: 54
Depth limit: 5
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running ConflictDetectionAlgorithm{name='OA Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/jeromq/f589efe70baa47650bc321e5e240d51d4ae79ba2/original-without-dependencies/jeromq-0.5.1-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Depth limit: 5
Configure Soot OA Inter 0,91800
Runtime: 0.014s
Time to perform OA Inter 1,01700
OA Inter Visited methods: 19
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/jeromq/f589efe70baa47650bc321e5e240d51d4ae79ba2/original-without-dependencies/jeromq-0.5.1-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,51400
Time to perform DFP Inter 0,71200
Depth limit: 5
CONFLICTS: []
Visited methods: 27
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/jeromq/f589efe70baa47650bc321e5e240d51d4ae79ba2/original-without-dependencies/jeromq-0.5.1-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,50600
Time to perform DFP Inter 0,74300
Depth limit: 5
CONFLICTS: []
Visited methods: 27
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/jeromq/f589efe70baa47650bc321e5e240d51d4ae79ba2/original-without-dependencies/jeromq-0.5.1-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,69700
Time to perform PDG 0,51600
CONFLICTS: [List(Node(<zmq.io.mechanism.curve.CurveServerMechanism: zmq.Msg decode(zmq.Msg)>,nonce = virtualinvoke msg.<zmq.Msg: long getLong(int)>(8),182,SourceNode, path: (<zmq.io.mechanism.curve.CurveServerMechanism: zmq.Msg decode(zmq.Msg)>, nonce = virtualinvoke msg.<zmq.Msg: long getLong(int)>(8), 182)) => Node(<zmq.io.mechanism.curve.CurveServerMechanism: zmq.Msg decode(zmq.Msg)>,$stack23 = nonce cmp $stack22,184,SimpleNode, path: (<zmq.io.mechanism.curve.CurveServerMechanism: zmq.Msg decode(zmq.Msg)>, $stack23 = nonce cmp $stack22, 184)) => Node(<zmq.io.mechanism.curve.CurveServerMechanism: zmq.Msg decode(zmq.Msg)>,if $stack23 > 0 goto this.<zmq.io.mechanism.curve.CurveServerMechanism: long cnPeerNonce> = nonce,184,SimpleNode, path: ) => Node(<zmq.io.mechanism.curve.CurveServerMechanism: zmq.Msg decode(zmq.Msg)>,$stack25 = virtualinvoke $stack24.<zmq.io.mechanism.curve.Curve$Size: int bytes()>(),190,SimpleNode, path: (<zmq.io.mechanism.curve.CurveServerMechanism: zmq.Msg decode(zmq.Msg)>, $stack25 = virtualinvoke $stack24.<zmq.io.mechanism.curve.Curve$Size: int bytes()>(), 190)) => Node(<zmq.io.mechanism.curve.CurveServerMechanism: zmq.Msg decode(zmq.Msg)>,$stack27 = $stack25 + $stack26,190,SimpleNode, path: (<zmq.io.mechanism.curve.CurveServerMechanism: zmq.Msg decode(zmq.Msg)>, $stack27 = $stack25 + $stack26, 190)) => Node(<zmq.io.mechanism.curve.CurveServerMechanism: zmq.Msg decode(zmq.Msg)>,clen = $stack27 - 16,190,SimpleNode, path: (<zmq.io.mechanism.curve.CurveServerMechanism: zmq.Msg decode(zmq.Msg)>, clen = $stack27 - 16, 190)) => Node(<zmq.io.mechanism.curve.CurveServerMechanism: zmq.Msg decode(zmq.Msg)>,messageBox = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(clen),193,SimpleNode, path: (<zmq.io.mechanism.curve.CurveServerMechanism: zmq.Msg decode(zmq.Msg)>, messageBox = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(clen), 193)) => Node(<zmq.io.mechanism.curve.CurveServerMechanism: zmq.Msg decode(zmq.Msg)>,rc = virtualinvoke $stack37.<zmq.io.mechanism.curve.Curve: int openAfternm(java.nio.ByteBuffer,java.nio.ByteBuffer,int,java.nio.ByteBuffer,byte[])>(messagePlaintext, messageBox, clen, messageNonce, $stack36),198,SimpleNode, path: (<zmq.io.mechanism.curve.CurveServerMechanism: zmq.Msg decode(zmq.Msg)>, rc = virtualinvoke $stack37.<zmq.io.mechanism.curve.Curve: int openAfternm(java.nio.ByteBuffer,java.nio.ByteBuffer,int,java.nio.ByteBuffer,byte[])>(messagePlaintext, messageBox, clen, messageNonce, $stack36), 198)) => Node(<zmq.io.mechanism.curve.CurveServerMechanism: zmq.Msg decode(zmq.Msg)>,if rc != 0 goto $stack39 = this.<zmq.io.mechanism.curve.CurveServerMechanism: zmq.util.Errno errno>,199,SimpleNode, path: ) => Node(<zmq.io.mechanism.curve.CurveServerMechanism: zmq.Msg decode(zmq.Msg)>,flags = virtualinvoke messagePlaintext.<java.nio.ByteBuffer: byte get(int)>($stack46),202,SimpleNode, path: (<zmq.io.mechanism.curve.CurveServerMechanism: zmq.Msg decode(zmq.Msg)>, flags = virtualinvoke messagePlaintext.<java.nio.ByteBuffer: byte get(int)>($stack46), 202)) => Node(<zmq.io.mechanism.curve.CurveServerMechanism: zmq.Msg decode(zmq.Msg)>,$stack49 = flags & 2,206,SinkNode, path: (<zmq.io.mechanism.curve.CurveServerMechanism: zmq.Msg decode(zmq.Msg)>, $stack49 = flags & 2, 206))), List(Node(<zmq.io.mechanism.curve.CurveServerMechanism: zmq.Msg decode(zmq.Msg)>,nonce = virtualinvoke msg.<zmq.Msg: long getLong(int)>(8),182,SourceNode, path: (<zmq.io.mechanism.curve.CurveServerMechanism: zmq.Msg decode(zmq.Msg)>, nonce = virtualinvoke msg.<zmq.Msg: long getLong(int)>(8), 182)) => Node(<zmq.io.mechanism.curve.CurveServerMechanism: zmq.Msg decode(zmq.Msg)>,$stack23 = nonce cmp $stack22,184,SimpleNode, path: (<zmq.io.mechanism.curve.CurveServerMechanism: zmq.Msg decode(zmq.Msg)>, $stack23 = nonce cmp $stack22, 184)) => Node(<zmq.io.mechanism.curve.CurveServerMechanism: zmq.Msg decode(zmq.Msg)>,if $stack23 > 0 goto this.<zmq.io.mechanism.curve.CurveServerMechanism: long cnPeerNonce> = nonce,184,SimpleNode, path: ) => Node(<zmq.io.mechanism.curve.CurveServerMechanism: zmq.Msg decode(zmq.Msg)>,$stack25 = virtualinvoke $stack24.<zmq.io.mechanism.curve.Curve$Size: int bytes()>(),190,SimpleNode, path: (<zmq.io.mechanism.curve.CurveServerMechanism: zmq.Msg decode(zmq.Msg)>, $stack25 = virtualinvoke $stack24.<zmq.io.mechanism.curve.Curve$Size: int bytes()>(), 190)) => Node(<zmq.io.mechanism.curve.CurveServerMechanism: zmq.Msg decode(zmq.Msg)>,$stack27 = $stack25 + $stack26,190,SimpleNode, path: (<zmq.io.mechanism.curve.CurveServerMechanism: zmq.Msg decode(zmq.Msg)>, $stack27 = $stack25 + $stack26, 190)) => Node(<zmq.io.mechanism.curve.CurveServerMechanism: zmq.Msg decode(zmq.Msg)>,clen = $stack27 - 16,190,SimpleNode, path: (<zmq.io.mechanism.curve.CurveServerMechanism: zmq.Msg decode(zmq.Msg)>, clen = $stack27 - 16, 190)) => Node(<zmq.io.mechanism.curve.CurveServerMechanism: zmq.Msg decode(zmq.Msg)>,messageBox = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(clen),193,SimpleNode, path: (<zmq.io.mechanism.curve.CurveServerMechanism: zmq.Msg decode(zmq.Msg)>, messageBox = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(clen), 193)) => Node(<zmq.io.mechanism.curve.CurveServerMechanism: zmq.Msg decode(zmq.Msg)>,rc = virtualinvoke $stack37.<zmq.io.mechanism.curve.Curve: int openAfternm(java.nio.ByteBuffer,java.nio.ByteBuffer,int,java.nio.ByteBuffer,byte[])>(messagePlaintext, messageBox, clen, messageNonce, $stack36),198,SimpleNode, path: (<zmq.io.mechanism.curve.CurveServerMechanism: zmq.Msg decode(zmq.Msg)>, rc = virtualinvoke $stack37.<zmq.io.mechanism.curve.Curve: int openAfternm(java.nio.ByteBuffer,java.nio.ByteBuffer,int,java.nio.ByteBuffer,byte[])>(messagePlaintext, messageBox, clen, messageNonce, $stack36), 198)) => Node(<zmq.io.mechanism.curve.CurveServerMechanism: zmq.Msg decode(zmq.Msg)>,if rc != 0 goto $stack39 = this.<zmq.io.mechanism.curve.CurveServerMechanism: zmq.util.Errno errno>,199,SimpleNode, path: ) => Node(<zmq.io.mechanism.curve.CurveServerMechanism: zmq.Msg decode(zmq.Msg)>,flags = virtualinvoke messagePlaintext.<java.nio.ByteBuffer: byte get(int)>($stack46),202,SimpleNode, path: (<zmq.io.mechanism.curve.CurveServerMechanism: zmq.Msg decode(zmq.Msg)>, flags = virtualinvoke messagePlaintext.<java.nio.ByteBuffer: byte get(int)>($stack46), 202)) => Node(<zmq.io.mechanism.curve.CurveServerMechanism: zmq.Msg decode(zmq.Msg)>,$stack49 = flags & 2,206,SinkNode, path: (<zmq.io.mechanism.curve.CurveServerMechanism: zmq.Msg decode(zmq.Msg)>, $stack49 = flags & 2, 206)) => Node(<zmq.io.mechanism.curve.CurveServerMechanism: zmq.Msg decode(zmq.Msg)>,if $stack49 == 0 goto $stack50 = <zmq.io.mechanism.curve.Curve$Size: zmq.io.mechanism.curve.Curve$Size ZERO>,206,SinkNode, path: ) => Node(<zmq.io.mechanism.curve.CurveServerMechanism: zmq.Msg decode(zmq.Msg)>,virtualinvoke decoded.<zmq.Msg: void setFlags(int)>(2),207,SinkNode, path: (<zmq.io.mechanism.curve.CurveServerMechanism: zmq.Msg decode(zmq.Msg)>, virtualinvoke decoded.<zmq.Msg: void setFlags(int)>(2), 207)))]
 Analysis results
----------------------------
 Number of conflicts: 2
 Results exported to out.txt
Error getting the previous content of the JSON file out.json
 JSON Results exported to out.json
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/jeromq/f589efe70baa47650bc321e5e240d51d4ae79ba2/original-without-dependencies/jeromq-0.5.1-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,69800
Time to perform PDG 0,51000
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
