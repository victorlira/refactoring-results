[
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "line_num = 0",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "362"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "line_num = line_num + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "369"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String valueOf(int)>",
  "line": "3099"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>(), 203)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171), 203)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>(), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalCounts := @parameter1: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171), 203)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(totalCounts)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>",
  "line": "192"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171), 203)","(<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>, $stack4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(totalCounts), 192)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "tmp$1365349839 = (hudson.remoting.Callable) tmp$1340666542",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$1365349839 = (hudson.remoting.Callable) tmp$1340666542, -1)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$1365349839)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$1365349839), 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "lineStatusMatches = (java.util.HashMap) $stack36",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>(), 203)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171), 203)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "tmp$1365349839 = (hudson.remoting.Callable) tmp$1340666542",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$1365349839 = (hudson.remoting.Callable) tmp$1340666542, -1)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$1365349839)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$1365349839), 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "lineStatusMatches = (java.util.HashMap) $stack36",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack141 = virtualinvoke $stack140.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "198"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack141 = virtualinvoke $stack140.<java.lang.Integer: int intValue()>(), 198)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalErrors := @parameter0: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void setTotalErrors(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalErrors(int)>($stack141), 198)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<hudson.plugins.logparser.LogParserResult: int totalErrors> = totalErrors",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void setTotalErrors(int)>",
  "line": "176"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalErrors(int)>($stack141), 198)","(<hudson.plugins.logparser.LogParserResult: void setTotalErrors(int)>, this.<hudson.plugins.logparser.LogParserResult: int totalErrors> = totalErrors, 176)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "tmp$1340666542 = new hudson.plugins.logparser.LogParserStatusComputer",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1340666542.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "tmp$1365349839 = (hudson.remoting.Callable) tmp$1340666542",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$1365349839 = (hudson.remoting.Callable) tmp$1340666542, -1)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$1365349839)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$1365349839), 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "lineStatusMatches = (java.util.HashMap) $stack36",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>(), 203)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171), 203)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "line_num = 0",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "362"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "line_num = line_num + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "369"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String valueOf(int)>",
  "line": "3099"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack145 = virtualinvoke $stack144.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "199"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack145 = virtualinvoke $stack144.<java.lang.Integer: int intValue()>(), 199)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalWarnings(int)>($stack145)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "199"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalWarnings(int)>($stack145), 199)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>(), 203)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171), 203)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "line_num = 0",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "362"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "line_num = line_num + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "369"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String valueOf(int)>",
  "line": "3099"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack145 = virtualinvoke $stack144.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "199"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack145 = virtualinvoke $stack144.<java.lang.Integer: int intValue()>(), 199)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalWarnings := @parameter0: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void setTotalWarnings(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalWarnings(int)>($stack145), 199)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<hudson.plugins.logparser.LogParserResult: int totalWarnings> = totalWarnings",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void setTotalWarnings(int)>",
  "line": "180"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalWarnings(int)>($stack145), 199)","(<hudson.plugins.logparser.LogParserResult: void setTotalWarnings(int)>, this.<hudson.plugins.logparser.LogParserResult: int totalWarnings> = totalWarnings, 180)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "line_num = 0",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "362"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "line_num = line_num + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "369"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String valueOf(int)>",
  "line": "3099"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack141 = virtualinvoke $stack140.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "198"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack141 = virtualinvoke $stack140.<java.lang.Integer: int intValue()>(), 198)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalErrors(int)>($stack141)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "198"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalErrors(int)>($stack141), 198)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "line_num = line_num + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "369"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String valueOf(int)>",
  "line": "3099"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack141 = virtualinvoke $stack140.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "198"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack141 = virtualinvoke $stack140.<java.lang.Integer: int intValue()>(), 198)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalErrors := @parameter0: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void setTotalErrors(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalErrors(int)>($stack141), 198)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<hudson.plugins.logparser.LogParserResult: int totalErrors> = totalErrors",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void setTotalErrors(int)>",
  "line": "176"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalErrors(int)>($stack141), 198)","(<hudson.plugins.logparser.LogParserResult: void setTotalErrors(int)>, this.<hudson.plugins.logparser.LogParserResult: int totalErrors> = totalErrors, 176)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack153 = virtualinvoke $stack152.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "201"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack153 = virtualinvoke $stack152.<java.lang.Integer: int intValue()>(), 201)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalDebugs := @parameter0: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void setTotalDebugs(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalDebugs(int)>($stack153), 201)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<hudson.plugins.logparser.LogParserResult: int totalDebugs> = totalDebugs",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void setTotalDebugs(int)>",
  "line": "188"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalDebugs(int)>($stack153), 201)","(<hudson.plugins.logparser.LogParserResult: void setTotalDebugs(int)>, this.<hudson.plugins.logparser.LogParserResult: int totalDebugs> = totalDebugs, 188)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack39 = this.<hudson.plugins.logparser.LogParserParser: int sectionCounter>",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "332"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack39 = this.<hudson.plugins.logparser.LogParserParser: int sectionCounter>, 332)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "sectionCounter := @parameter1: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserWriter",
  "method": "<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserWriter",
  "method": "<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>",
  "line": "28"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Integer",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack153 = virtualinvoke $stack152.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "201"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack153 = virtualinvoke $stack152.<java.lang.Integer: int intValue()>(), 201)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>(), 203)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171), 203)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserWriter",
  "method": "<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>",
  "line": "28"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Integer",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack145 = virtualinvoke $stack144.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "199"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack145 = virtualinvoke $stack144.<java.lang.Integer: int intValue()>(), 199)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack13 = (java.lang.Integer) $stack12",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "300"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Integer",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack141 = virtualinvoke $stack140.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "198"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack141 = virtualinvoke $stack140.<java.lang.Integer: int intValue()>(), 198)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "tmp$1365349839 = (hudson.remoting.Callable) tmp$1340666542",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$1365349839 = (hudson.remoting.Callable) tmp$1340666542, -1)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$1365349839)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$1365349839), 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "lineStatusMatches = (java.util.HashMap) $stack36",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack145 = virtualinvoke $stack144.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "199"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack145 = virtualinvoke $stack144.<java.lang.Integer: int intValue()>(), 199)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalWarnings := @parameter0: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void setTotalWarnings(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalWarnings(int)>($stack145), 199)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<hudson.plugins.logparser.LogParserResult: int totalWarnings> = totalWarnings",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void setTotalWarnings(int)>",
  "line": "180"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalWarnings(int)>($stack145), 199)","(<hudson.plugins.logparser.LogParserResult: void setTotalWarnings(int)>, this.<hudson.plugins.logparser.LogParserResult: int totalWarnings> = totalWarnings, 180)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack141 = virtualinvoke $stack140.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "198"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack141 = virtualinvoke $stack140.<java.lang.Integer: int intValue()>(), 198)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalErrors := @parameter0: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void setTotalErrors(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalErrors(int)>($stack141), 198)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<hudson.plugins.logparser.LogParserResult: int totalErrors> = totalErrors",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void setTotalErrors(int)>",
  "line": "176"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalErrors(int)>($stack141), 198)","(<hudson.plugins.logparser.LogParserResult: void setTotalErrors(int)>, this.<hudson.plugins.logparser.LogParserResult: int totalErrors> = totalErrors, 176)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack145 = virtualinvoke $stack144.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "199"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack145 = virtualinvoke $stack144.<java.lang.Integer: int intValue()>(), 199)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalWarnings := @parameter0: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void setTotalWarnings(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalWarnings(int)>($stack145), 199)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<hudson.plugins.logparser.LogParserResult: int totalWarnings> = totalWarnings",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void setTotalWarnings(int)>",
  "line": "180"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalWarnings(int)>($stack145), 199)","(<hudson.plugins.logparser.LogParserResult: void setTotalWarnings(int)>, this.<hudson.plugins.logparser.LogParserResult: int totalWarnings> = totalWarnings, 180)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack141 = virtualinvoke $stack140.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "198"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack141 = virtualinvoke $stack140.<java.lang.Integer: int intValue()>(), 198)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalErrors(int)>($stack141)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "198"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalErrors(int)>($stack141), 198)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "tmp$1340666542 = new hudson.plugins.logparser.LogParserStatusComputer",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1340666542.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "tmp$1365349839 = (hudson.remoting.Callable) tmp$1340666542",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$1365349839 = (hudson.remoting.Callable) tmp$1340666542, -1)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$1365349839)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$1365349839), 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "lineStatusMatches = (java.util.HashMap) $stack36",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack153 = virtualinvoke $stack152.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "201"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack153 = virtualinvoke $stack152.<java.lang.Integer: int intValue()>(), 201)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalDebugs := @parameter0: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void setTotalDebugs(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalDebugs(int)>($stack153), 201)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<hudson.plugins.logparser.LogParserResult: int totalDebugs> = totalDebugs",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void setTotalDebugs(int)>",
  "line": "188"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalDebugs(int)>($stack153), 201)","(<hudson.plugins.logparser.LogParserResult: void setTotalDebugs(int)>, this.<hudson.plugins.logparser.LogParserResult: int totalDebugs> = totalDebugs, 188)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserWriter",
  "method": "<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>",
  "line": "28"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Integer",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack141 = virtualinvoke $stack140.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "198"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack141 = virtualinvoke $stack140.<java.lang.Integer: int intValue()>(), 198)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "line_num = line_num + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "369"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String valueOf(int)>",
  "line": "3099"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>(), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalCounts := @parameter1: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171), 203)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(totalCounts)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>",
  "line": "192"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171), 203)","(<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>, $stack4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(totalCounts), 192)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "tmp$1365349839 = (hudson.remoting.Callable) tmp$1340666542",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$1365349839 = (hudson.remoting.Callable) tmp$1340666542, -1)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$1365349839)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$1365349839), 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "lineStatusMatches = (java.util.HashMap) $stack36",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack141 = virtualinvoke $stack140.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "198"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack141 = virtualinvoke $stack140.<java.lang.Integer: int intValue()>(), 198)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalErrors(int)>($stack141)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "198"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalErrors(int)>($stack141), 198)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "line_num = line_num + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "369"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String valueOf(int)>",
  "line": "3099"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack141 = virtualinvoke $stack140.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "198"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack141 = virtualinvoke $stack140.<java.lang.Integer: int intValue()>(), 198)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalErrors(int)>($stack141)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "198"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalErrors(int)>($stack141), 198)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack149 = virtualinvoke $stack148.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "200"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack149 = virtualinvoke $stack148.<java.lang.Integer: int intValue()>(), 200)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalInfos := @parameter0: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void setTotalInfos(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalInfos(int)>($stack149), 200)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<hudson.plugins.logparser.LogParserResult: int totalInfos> = totalInfos",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void setTotalInfos(int)>",
  "line": "184"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalInfos(int)>($stack149), 200)","(<hudson.plugins.logparser.LogParserResult: void setTotalInfos(int)>, this.<hudson.plugins.logparser.LogParserResult: int totalInfos> = totalInfos, 184)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack145 = virtualinvoke $stack144.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "199"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack145 = virtualinvoke $stack144.<java.lang.Integer: int intValue()>(), 199)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalWarnings(int)>($stack145)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "199"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalWarnings(int)>($stack145), 199)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack145 = virtualinvoke $stack144.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "199"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack145 = virtualinvoke $stack144.<java.lang.Integer: int intValue()>(), 199)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalWarnings := @parameter0: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void setTotalWarnings(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalWarnings(int)>($stack145), 199)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<hudson.plugins.logparser.LogParserResult: int totalWarnings> = totalWarnings",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void setTotalWarnings(int)>",
  "line": "180"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalWarnings(int)>($stack145), 199)","(<hudson.plugins.logparser.LogParserResult: void setTotalWarnings(int)>, this.<hudson.plugins.logparser.LogParserResult: int totalWarnings> = totalWarnings, 180)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "line_num = line_num + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "369"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String valueOf(int)>",
  "line": "3099"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>(), 203)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171), 203)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "line_num = 0",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "362"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "line_num = line_num + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "369"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String valueOf(int)>",
  "line": "3099"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack149 = virtualinvoke $stack148.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "200"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack149 = virtualinvoke $stack148.<java.lang.Integer: int intValue()>(), 200)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalInfos := @parameter0: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void setTotalInfos(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalInfos(int)>($stack149), 200)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<hudson.plugins.logparser.LogParserResult: int totalInfos> = totalInfos",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void setTotalInfos(int)>",
  "line": "184"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalInfos(int)>($stack149), 200)","(<hudson.plugins.logparser.LogParserResult: void setTotalInfos(int)>, this.<hudson.plugins.logparser.LogParserResult: int totalInfos> = totalInfos, 184)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "line_num = line_num + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "369"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String valueOf(int)>",
  "line": "3099"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack145 = virtualinvoke $stack144.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "199"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack145 = virtualinvoke $stack144.<java.lang.Integer: int intValue()>(), 199)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalWarnings := @parameter0: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void setTotalWarnings(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalWarnings(int)>($stack145), 199)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<hudson.plugins.logparser.LogParserResult: int totalWarnings> = totalWarnings",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void setTotalWarnings(int)>",
  "line": "180"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalWarnings(int)>($stack145), 199)","(<hudson.plugins.logparser.LogParserResult: void setTotalWarnings(int)>, this.<hudson.plugins.logparser.LogParserResult: int totalWarnings> = totalWarnings, 180)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "tmp$1340666542 = new hudson.plugins.logparser.LogParserStatusComputer",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1340666542.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "tmp$1365349839 = (hudson.remoting.Callable) tmp$1340666542",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$1365349839 = (hudson.remoting.Callable) tmp$1340666542, -1)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$1365349839)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$1365349839), 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "lineStatusMatches = (java.util.HashMap) $stack36",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack141 = virtualinvoke $stack140.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "198"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack141 = virtualinvoke $stack140.<java.lang.Integer: int intValue()>(), 198)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalErrors := @parameter0: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void setTotalErrors(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalErrors(int)>($stack141), 198)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<hudson.plugins.logparser.LogParserResult: int totalErrors> = totalErrors",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void setTotalErrors(int)>",
  "line": "176"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalErrors(int)>($stack141), 198)","(<hudson.plugins.logparser.LogParserResult: void setTotalErrors(int)>, this.<hudson.plugins.logparser.LogParserResult: int totalErrors> = totalErrors, 176)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "tmp$1365349839 = (hudson.remoting.Callable) tmp$1340666542",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$1365349839 = (hudson.remoting.Callable) tmp$1340666542, -1)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$1365349839)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$1365349839), 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "lineStatusMatches = (java.util.HashMap) $stack36",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack153 = virtualinvoke $stack152.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "201"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack153 = virtualinvoke $stack152.<java.lang.Integer: int intValue()>(), 201)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalDebugs := @parameter0: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void setTotalDebugs(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalDebugs(int)>($stack153), 201)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<hudson.plugins.logparser.LogParserResult: int totalDebugs> = totalDebugs",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void setTotalDebugs(int)>",
  "line": "188"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalDebugs(int)>($stack153), 201)","(<hudson.plugins.logparser.LogParserResult: void setTotalDebugs(int)>, this.<hudson.plugins.logparser.LogParserResult: int totalDebugs> = totalDebugs, 188)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "tmp$1340666542 = new hudson.plugins.logparser.LogParserStatusComputer",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1340666542.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "tmp$1365349839 = (hudson.remoting.Callable) tmp$1340666542",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$1365349839 = (hudson.remoting.Callable) tmp$1340666542, -1)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$1365349839)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$1365349839), 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "lineStatusMatches = (java.util.HashMap) $stack36",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>(), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalCounts := @parameter1: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171), 203)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(totalCounts)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>",
  "line": "192"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171), 203)","(<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>, $stack4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(totalCounts), 192)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "tmp$1365349839 = (hudson.remoting.Callable) tmp$1340666542",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$1365349839 = (hudson.remoting.Callable) tmp$1340666542, -1)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$1365349839)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$1365349839), 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "lineStatusMatches = (java.util.HashMap) $stack36",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack145 = virtualinvoke $stack144.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "199"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack145 = virtualinvoke $stack144.<java.lang.Integer: int intValue()>(), 199)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalWarnings(int)>($stack145)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "199"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalWarnings(int)>($stack145), 199)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "tmp$1340666542 = new hudson.plugins.logparser.LogParserStatusComputer",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1340666542.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "tmp$1365349839 = (hudson.remoting.Callable) tmp$1340666542",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$1365349839 = (hudson.remoting.Callable) tmp$1340666542, -1)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$1365349839)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$1365349839), 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "lineStatusMatches = (java.util.HashMap) $stack36",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack141 = virtualinvoke $stack140.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "198"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack141 = virtualinvoke $stack140.<java.lang.Integer: int intValue()>(), 198)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalErrors(int)>($stack141)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "198"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalErrors(int)>($stack141), 198)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "tmp$1365349839 = (hudson.remoting.Callable) tmp$1340666542",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$1365349839 = (hudson.remoting.Callable) tmp$1340666542, -1)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$1365349839)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$1365349839), 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "lineStatusMatches = (java.util.HashMap) $stack36",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack153 = virtualinvoke $stack152.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "201"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack153 = virtualinvoke $stack152.<java.lang.Integer: int intValue()>(), 201)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "line_num = 0",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "362"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "line_num = line_num + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "369"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String valueOf(int)>",
  "line": "3099"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack141 = virtualinvoke $stack140.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "198"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack141 = virtualinvoke $stack140.<java.lang.Integer: int intValue()>(), 198)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalErrors := @parameter0: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void setTotalErrors(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalErrors(int)>($stack141), 198)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<hudson.plugins.logparser.LogParserResult: int totalErrors> = totalErrors",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void setTotalErrors(int)>",
  "line": "176"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalErrors(int)>($stack141), 198)","(<hudson.plugins.logparser.LogParserResult: void setTotalErrors(int)>, this.<hudson.plugins.logparser.LogParserResult: int totalErrors> = totalErrors, 176)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack13 = (java.lang.Integer) $stack12",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "300"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Integer",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack145 = virtualinvoke $stack144.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "199"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack145 = virtualinvoke $stack144.<java.lang.Integer: int intValue()>(), 199)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserWriter",
  "method": "<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>",
  "line": "28"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Integer",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>(), 203)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>(), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalCounts := @parameter1: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171), 203)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(totalCounts)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>",
  "line": "192"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171), 203)","(<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>, $stack4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(totalCounts), 192)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack13 = (java.lang.Integer) $stack12",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "300"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Integer",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>(), 203)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "line_num = line_num + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "369"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String valueOf(int)>",
  "line": "3099"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack153 = virtualinvoke $stack152.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "201"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack153 = virtualinvoke $stack152.<java.lang.Integer: int intValue()>(), 201)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack141 = virtualinvoke $stack140.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "198"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack141 = virtualinvoke $stack140.<java.lang.Integer: int intValue()>(), 198)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalErrors(int)>($stack141)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "198"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalErrors(int)>($stack141), 198)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "tmp$1340666542 = new hudson.plugins.logparser.LogParserStatusComputer",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1340666542.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "tmp$1365349839 = (hudson.remoting.Callable) tmp$1340666542",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$1365349839 = (hudson.remoting.Callable) tmp$1340666542, -1)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$1365349839)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$1365349839), 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "lineStatusMatches = (java.util.HashMap) $stack36",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack153 = virtualinvoke $stack152.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "201"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack153 = virtualinvoke $stack152.<java.lang.Integer: int intValue()>(), 201)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "tmp$1340666542 = new hudson.plugins.logparser.LogParserStatusComputer",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1340666542.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "tmp$1365349839 = (hudson.remoting.Callable) tmp$1340666542",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$1365349839 = (hudson.remoting.Callable) tmp$1340666542, -1)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$1365349839)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$1365349839), 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "lineStatusMatches = (java.util.HashMap) $stack36",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack145 = virtualinvoke $stack144.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "199"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack145 = virtualinvoke $stack144.<java.lang.Integer: int intValue()>(), 199)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalWarnings(int)>($stack145)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "199"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalWarnings(int)>($stack145), 199)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack39 = this.<hudson.plugins.logparser.LogParserParser: int sectionCounter>",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "332"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack39 = this.<hudson.plugins.logparser.LogParserParser: int sectionCounter>, 332)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "sectionCounter := @parameter1: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserWriter",
  "method": "<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserWriter",
  "method": "<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>",
  "line": "28"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Integer",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack145 = virtualinvoke $stack144.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "199"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack145 = virtualinvoke $stack144.<java.lang.Integer: int intValue()>(), 199)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "tmp$1365349839 = (hudson.remoting.Callable) tmp$1340666542",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$1365349839 = (hudson.remoting.Callable) tmp$1340666542, -1)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$1365349839)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$1365349839), 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "lineStatusMatches = (java.util.HashMap) $stack36",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack149 = virtualinvoke $stack148.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "200"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack149 = virtualinvoke $stack148.<java.lang.Integer: int intValue()>(), 200)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack153 = virtualinvoke $stack152.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "201"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack153 = virtualinvoke $stack152.<java.lang.Integer: int intValue()>(), 201)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "tmp$1340666542 = new hudson.plugins.logparser.LogParserStatusComputer",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1340666542.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "tmp$1365349839 = (hudson.remoting.Callable) tmp$1340666542",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$1365349839 = (hudson.remoting.Callable) tmp$1340666542, -1)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$1365349839)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$1365349839), 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "lineStatusMatches = (java.util.HashMap) $stack36",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack149 = virtualinvoke $stack148.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "200"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack149 = virtualinvoke $stack148.<java.lang.Integer: int intValue()>(), 200)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalInfos := @parameter0: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void setTotalInfos(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalInfos(int)>($stack149), 200)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<hudson.plugins.logparser.LogParserResult: int totalInfos> = totalInfos",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void setTotalInfos(int)>",
  "line": "184"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalInfos(int)>($stack149), 200)","(<hudson.plugins.logparser.LogParserResult: void setTotalInfos(int)>, this.<hudson.plugins.logparser.LogParserResult: int totalInfos> = totalInfos, 184)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "tmp$1365349839 = (hudson.remoting.Callable) tmp$1340666542",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$1365349839 = (hudson.remoting.Callable) tmp$1340666542, -1)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$1365349839)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$1365349839), 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "lineStatusMatches = (java.util.HashMap) $stack36",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>(), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalCounts := @parameter1: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171), 203)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(totalCounts)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>",
  "line": "192"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171), 203)","(<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>, $stack4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(totalCounts), 192)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "line_num = 0",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "362"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "line_num = line_num + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "369"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String valueOf(int)>",
  "line": "3099"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack153 = virtualinvoke $stack152.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "201"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack153 = virtualinvoke $stack152.<java.lang.Integer: int intValue()>(), 201)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalDebugs := @parameter0: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void setTotalDebugs(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalDebugs(int)>($stack153), 201)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<hudson.plugins.logparser.LogParserResult: int totalDebugs> = totalDebugs",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void setTotalDebugs(int)>",
  "line": "188"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalDebugs(int)>($stack153), 201)","(<hudson.plugins.logparser.LogParserResult: void setTotalDebugs(int)>, this.<hudson.plugins.logparser.LogParserResult: int totalDebugs> = totalDebugs, 188)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "tmp$1340666542 = new hudson.plugins.logparser.LogParserStatusComputer",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1340666542.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "tmp$1365349839 = (hudson.remoting.Callable) tmp$1340666542",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$1365349839 = (hudson.remoting.Callable) tmp$1340666542, -1)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$1365349839)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$1365349839), 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "lineStatusMatches = (java.util.HashMap) $stack36",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack149 = virtualinvoke $stack148.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "200"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack149 = virtualinvoke $stack148.<java.lang.Integer: int intValue()>(), 200)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserWriter",
  "method": "<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>",
  "line": "28"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Integer",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack153 = virtualinvoke $stack152.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "201"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack153 = virtualinvoke $stack152.<java.lang.Integer: int intValue()>(), 201)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack153 = virtualinvoke $stack152.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "201"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack153 = virtualinvoke $stack152.<java.lang.Integer: int intValue()>(), 201)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalDebugs := @parameter0: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void setTotalDebugs(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalDebugs(int)>($stack153), 201)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<hudson.plugins.logparser.LogParserResult: int totalDebugs> = totalDebugs",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void setTotalDebugs(int)>",
  "line": "188"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalDebugs(int)>($stack153), 201)","(<hudson.plugins.logparser.LogParserResult: void setTotalDebugs(int)>, this.<hudson.plugins.logparser.LogParserResult: int totalDebugs> = totalDebugs, 188)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "line_num = line_num + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "369"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String valueOf(int)>",
  "line": "3099"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack149 = virtualinvoke $stack148.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "200"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack149 = virtualinvoke $stack148.<java.lang.Integer: int intValue()>(), 200)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack13 = (java.lang.Integer) $stack12",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "300"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Integer",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack153 = virtualinvoke $stack152.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "201"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack153 = virtualinvoke $stack152.<java.lang.Integer: int intValue()>(), 201)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack39 = this.<hudson.plugins.logparser.LogParserParser: int sectionCounter>",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "332"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack39 = this.<hudson.plugins.logparser.LogParserParser: int sectionCounter>, 332)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "sectionCounter := @parameter1: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserWriter",
  "method": "<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserWriter",
  "method": "<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>",
  "line": "28"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Integer",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack141 = virtualinvoke $stack140.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "198"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack141 = virtualinvoke $stack140.<java.lang.Integer: int intValue()>(), 198)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "line_num = line_num + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "369"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String valueOf(int)>",
  "line": "3099"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack145 = virtualinvoke $stack144.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "199"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack145 = virtualinvoke $stack144.<java.lang.Integer: int intValue()>(), 199)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalWarnings(int)>($stack145)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "199"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalWarnings(int)>($stack145), 199)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "line_num = line_num + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "369"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String valueOf(int)>",
  "line": "3099"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack149 = virtualinvoke $stack148.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "200"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack149 = virtualinvoke $stack148.<java.lang.Integer: int intValue()>(), 200)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalInfos := @parameter0: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void setTotalInfos(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalInfos(int)>($stack149), 200)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<hudson.plugins.logparser.LogParserResult: int totalInfos> = totalInfos",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void setTotalInfos(int)>",
  "line": "184"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalInfos(int)>($stack149), 200)","(<hudson.plugins.logparser.LogParserResult: void setTotalInfos(int)>, this.<hudson.plugins.logparser.LogParserResult: int totalInfos> = totalInfos, 184)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserWriter",
  "method": "<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>",
  "line": "28"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Integer",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack149 = virtualinvoke $stack148.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "200"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack149 = virtualinvoke $stack148.<java.lang.Integer: int intValue()>(), 200)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack149 = virtualinvoke $stack148.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "200"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack149 = virtualinvoke $stack148.<java.lang.Integer: int intValue()>(), 200)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "line_num = 0",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "362"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "line_num = line_num + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "369"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String valueOf(int)>",
  "line": "3099"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack153 = virtualinvoke $stack152.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "201"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack153 = virtualinvoke $stack152.<java.lang.Integer: int intValue()>(), 201)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack149 = virtualinvoke $stack148.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "200"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack149 = virtualinvoke $stack148.<java.lang.Integer: int intValue()>(), 200)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalInfos := @parameter0: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void setTotalInfos(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalInfos(int)>($stack149), 200)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<hudson.plugins.logparser.LogParserResult: int totalInfos> = totalInfos",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void setTotalInfos(int)>",
  "line": "184"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalInfos(int)>($stack149), 200)","(<hudson.plugins.logparser.LogParserResult: void setTotalInfos(int)>, this.<hudson.plugins.logparser.LogParserResult: int totalInfos> = totalInfos, 184)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack141 = virtualinvoke $stack140.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "198"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack141 = virtualinvoke $stack140.<java.lang.Integer: int intValue()>(), 198)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalErrors := @parameter0: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void setTotalErrors(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalErrors(int)>($stack141), 198)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<hudson.plugins.logparser.LogParserResult: int totalErrors> = totalErrors",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void setTotalErrors(int)>",
  "line": "176"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalErrors(int)>($stack141), 198)","(<hudson.plugins.logparser.LogParserResult: void setTotalErrors(int)>, this.<hudson.plugins.logparser.LogParserResult: int totalErrors> = totalErrors, 176)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack149 = virtualinvoke $stack148.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "200"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack149 = virtualinvoke $stack148.<java.lang.Integer: int intValue()>(), 200)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "line_num = line_num + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "369"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String valueOf(int)>",
  "line": "3099"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack153 = virtualinvoke $stack152.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "201"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack153 = virtualinvoke $stack152.<java.lang.Integer: int intValue()>(), 201)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalDebugs := @parameter0: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void setTotalDebugs(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalDebugs(int)>($stack153), 201)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<hudson.plugins.logparser.LogParserResult: int totalDebugs> = totalDebugs",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void setTotalDebugs(int)>",
  "line": "188"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalDebugs(int)>($stack153), 201)","(<hudson.plugins.logparser.LogParserResult: void setTotalDebugs(int)>, this.<hudson.plugins.logparser.LogParserResult: int totalDebugs> = totalDebugs, 188)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack39 = this.<hudson.plugins.logparser.LogParserParser: int sectionCounter>",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "332"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack39 = this.<hudson.plugins.logparser.LogParserParser: int sectionCounter>, 332)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "sectionCounter := @parameter1: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserWriter",
  "method": "<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserWriter",
  "method": "<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>",
  "line": "28"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Integer",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack149 = virtualinvoke $stack148.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "200"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack149 = virtualinvoke $stack148.<java.lang.Integer: int intValue()>(), 200)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "line_num = 0",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "362"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "line_num = line_num + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "369"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String valueOf(int)>",
  "line": "3099"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack149 = virtualinvoke $stack148.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "200"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack149 = virtualinvoke $stack148.<java.lang.Integer: int intValue()>(), 200)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack145 = virtualinvoke $stack144.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "199"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack145 = virtualinvoke $stack144.<java.lang.Integer: int intValue()>(), 199)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalWarnings(int)>($stack145)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "199"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalWarnings(int)>($stack145), 199)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "tmp$1365349839 = (hudson.remoting.Callable) tmp$1340666542",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$1365349839 = (hudson.remoting.Callable) tmp$1340666542, -1)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$1365349839)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$1365349839), 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "lineStatusMatches = (java.util.HashMap) $stack36",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack149 = virtualinvoke $stack148.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "200"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack149 = virtualinvoke $stack148.<java.lang.Integer: int intValue()>(), 200)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalInfos := @parameter0: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void setTotalInfos(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalInfos(int)>($stack149), 200)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<hudson.plugins.logparser.LogParserResult: int totalInfos> = totalInfos",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void setTotalInfos(int)>",
  "line": "184"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalInfos(int)>($stack149), 200)","(<hudson.plugins.logparser.LogParserResult: void setTotalInfos(int)>, this.<hudson.plugins.logparser.LogParserResult: int totalInfos> = totalInfos, 184)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "line_num = 0",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "362"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "line_num = line_num + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "369"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String valueOf(int)>",
  "line": "3099"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>(), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalCounts := @parameter1: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171), 203)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(totalCounts)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>",
  "line": "192"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171), 203)","(<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>, $stack4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(totalCounts), 192)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack153 = virtualinvoke $stack152.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "201"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack153 = virtualinvoke $stack152.<java.lang.Integer: int intValue()>(), 201)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack13 = (java.lang.Integer) $stack12",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "300"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Integer",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack149 = virtualinvoke $stack148.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "200"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack149 = virtualinvoke $stack148.<java.lang.Integer: int intValue()>(), 200)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "tmp$1340666542 = new hudson.plugins.logparser.LogParserStatusComputer",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1340666542.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "tmp$1365349839 = (hudson.remoting.Callable) tmp$1340666542",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$1365349839 = (hudson.remoting.Callable) tmp$1340666542, -1)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$1365349839)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$1365349839), 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "lineStatusMatches = (java.util.HashMap) $stack36",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "effectiveStatus = status",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "228"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "status := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)","(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserUtils",
  "method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
  "line": "112"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "269"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "currentValInteger = (java.lang.Integer) $stack8",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "271"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "newVal = $stack9 + 1",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
  "line": "276"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)","(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack145 = virtualinvoke $stack144.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "199"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack145 = virtualinvoke $stack144.<java.lang.Integer: int intValue()>(), 199)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalWarnings := @parameter0: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void setTotalWarnings(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalWarnings(int)>($stack145), 199)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<hudson.plugins.logparser.LogParserResult: int totalWarnings> = totalWarnings",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void setTotalWarnings(int)>",
  "line": "180"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void setTotalWarnings(int)>($stack145), 199)","(<hudson.plugins.logparser.LogParserResult: void setTotalWarnings(int)>, this.<hudson.plugins.logparser.LogParserResult: int totalWarnings> = totalWarnings, 180)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack39 = this.<hudson.plugins.logparser.LogParserParser: int sectionCounter>",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "332"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack39 = this.<hudson.plugins.logparser.LogParserParser: int sectionCounter>, 332)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "sectionCounter := @parameter1: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserWriter",
  "method": "<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserWriter",
  "method": "<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>",
  "line": "28"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Integer",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: int intValue()>",
  "line": "893"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)","(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>(), 203)"]
}]
}
}

,

{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>(), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalCounts := @parameter1: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($stack1)",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "300"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>(), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalCounts := @parameter1: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($stack1)",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "300"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke markedLine.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(marker)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "323"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke markedLine.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(marker), 323)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>(), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalCounts := @parameter1: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($stack1)",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserWriter",
  "method": "<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>",
  "line": "28"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>(), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalCounts := @parameter1: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($stack1)",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "300"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "shortLink = $stack19",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "304"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "brShortLink = $stack41",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "334"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, brShortLink = $stack41, 334)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>(), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalCounts := @parameter1: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($stack1)",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "300"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "shortLink = $stack19",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "304"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "brShortLink = $stack41",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "334"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, brShortLink = $stack41, 334)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke brShortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>(shortLink)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "335"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke brShortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>(shortLink), 335)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>(), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalCounts := @parameter1: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($stack1)",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserWriter",
  "method": "<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>",
  "line": "28"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "str = virtualinvoke str.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>('NUMBER', $stack13)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserWriter",
  "method": "<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>",
  "line": "27"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, str = virtualinvoke str.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>('NUMBER', $stack13), 27)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>(), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalCounts := @parameter1: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($stack1)",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "300"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "markedLine = $stack31",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "322"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, markedLine = $stack31, 322)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>(), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalCounts := @parameter1: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($stack1)",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "300"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "markedLine = $stack31",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "322"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, markedLine = $stack31, 322)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack36 = virtualinvoke markedLine.<java.lang.StringBuffer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "339"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "252"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>(), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalCounts := @parameter1: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($stack1)",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "300"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "shortLink = $stack19",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "304"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "link = $stack24",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "311"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, link = $stack24, 311)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke link.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(statusCountStr)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "312"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke link.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(statusCountStr), 312)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>(), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalCounts := @parameter1: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($stack1)",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserWriter",
  "method": "<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>",
  "line": "28"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "str = virtualinvoke str.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>('NUMBER', $stack13)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserWriter",
  "method": "<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>",
  "line": "27"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, str = virtualinvoke str.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>('NUMBER', $stack13), 27)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack15 = new java.lang.StringBuilder",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserWriter",
  "method": "<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>",
  "line": "29"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, specialinvoke $stack15.<java.lang.StringBuilder: void <init>()>(), 29)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>(), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalCounts := @parameter1: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($stack1)",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "300"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "shortLink = $stack19",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "304"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "link = $stack24",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "311"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, link = $stack24, 311)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke link.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>(shortLink)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "313"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke link.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>(shortLink), 313)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>(), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalCounts := @parameter1: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($stack1)",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "300"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "shortLink = $stack19",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "304"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke shortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('\'>')",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "307"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke shortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('\'>'), 307)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>(), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalCounts := @parameter1: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($stack1)",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "300"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "shortLink = $stack19",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "304"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>(), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalCounts := @parameter1: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($stack1)",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "300"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "markedLine = $stack31",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "322"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, markedLine = $stack31, 322)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack36 = virtualinvoke markedLine.<java.lang.StringBuffer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "339"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>(), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalCounts := @parameter1: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($stack1)",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "300"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "markedLine = $stack31",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "322"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, markedLine = $stack31, 322)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack36 = virtualinvoke markedLine.<java.lang.StringBuffer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "339"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "252"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "parsedLine = parsedLineColoredAndMarked",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "254"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLine = parsedLineColoredAndMarked, 254)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>(), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalCounts := @parameter1: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($stack1)",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "300"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "markedLine = $stack31",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "322"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, markedLine = $stack31, 322)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack36 = virtualinvoke markedLine.<java.lang.StringBuffer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "339"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "252"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "parsedLine = parsedLineColoredAndMarked",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "254"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLine = parsedLineColoredAndMarked, 254)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack11 = new java.lang.StringBuffer",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "256"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, specialinvoke $stack11.<java.lang.StringBuffer: void <init>(java.lang.String)>(parsedLine), 256)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "parsedLineColored#34 = $stack11",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "256"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored#34 = $stack11, 256)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke parsedLineColored#34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('<br/>\n')",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "258"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke parsedLineColored#34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('<br/>\n'), 258)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>(), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalCounts := @parameter1: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($stack1)",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "300"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "markedLine = $stack31",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "322"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, markedLine = $stack31, 322)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke markedLine.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('\'></a></p>')",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "324"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke markedLine.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('\'></a></p>'), 324)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>(), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalCounts := @parameter1: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($stack1)",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "300"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "shortLink = $stack19",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "304"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "brShortLink = $stack41",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "334"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, brShortLink = $stack41, 334)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack44 = virtualinvoke brShortLink.<java.lang.StringBuffer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "336"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack44 = virtualinvoke brShortLink.<java.lang.StringBuffer: java.lang.String toString()>(), 336)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>(), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalCounts := @parameter1: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($stack1)",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "300"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "markedLine = $stack31",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "322"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, markedLine = $stack31, 322)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack36 = virtualinvoke markedLine.<java.lang.StringBuffer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "339"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "252"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "parsedLine = parsedLineColoredAndMarked",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "254"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLine = parsedLineColoredAndMarked, 254)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack11 = new java.lang.StringBuffer",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "256"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, specialinvoke $stack11.<java.lang.StringBuffer: void <init>(java.lang.String)>(parsedLine), 256)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "parsedLineColored#34 = $stack11",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "256"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored#34 = $stack11, 256)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack13 = virtualinvoke parsedLineColored#34.<java.lang.StringBuffer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "259"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "365"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke writer.<java.io.BufferedWriter: void write(java.lang.String)>(parsedLine)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "367"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, virtualinvoke writer.<java.io.BufferedWriter: void write(java.lang.String)>(parsedLine), 367)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>(), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalCounts := @parameter1: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($stack1)",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "300"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "markedLine = $stack31",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "322"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, markedLine = $stack31, 322)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack36 = virtualinvoke markedLine.<java.lang.StringBuffer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "339"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "252"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "parsedLine = parsedLineColoredAndMarked",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "254"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLine = parsedLineColoredAndMarked, 254)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack11 = new java.lang.StringBuffer",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "256"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, specialinvoke $stack11.<java.lang.StringBuffer: void <init>(java.lang.String)>(parsedLine), 256)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack11.<java.lang.StringBuffer: void <init>(java.lang.String)>(parsedLine)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "256"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, specialinvoke $stack11.<java.lang.StringBuffer: void <init>(java.lang.String)>(parsedLine), 256)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>(), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalCounts := @parameter1: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($stack1)",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "300"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "shortLink = $stack19",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "304"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "link = $stack24",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "311"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, link = $stack24, 311)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>(), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalCounts := @parameter1: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($stack1)",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "300"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "shortLink = $stack19",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "304"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke shortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(line)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "308"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke shortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(line), 308)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>(), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalCounts := @parameter1: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($stack1)",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "300"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>(), 301)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>(), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalCounts := @parameter1: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($stack1)",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "300"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke shortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(marker)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "306"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke shortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(marker), 306)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>(), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalCounts := @parameter1: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($stack1)",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "300"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "markedLine = $stack31",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "322"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, markedLine = $stack31, 322)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke markedLine.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(line)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "325"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke markedLine.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(line), 325)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>(), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalCounts := @parameter1: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($stack1)",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "300"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "markedLine = $stack31",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "322"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, markedLine = $stack31, 322)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack36 = virtualinvoke markedLine.<java.lang.StringBuffer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "339"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "252"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "parsedLine = parsedLineColoredAndMarked",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "254"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLine = parsedLineColoredAndMarked, 254)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack11 = new java.lang.StringBuffer",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "256"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, specialinvoke $stack11.<java.lang.StringBuffer: void <init>(java.lang.String)>(parsedLine), 256)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "parsedLineColored#34 = $stack11",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "256"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored#34 = $stack11, 256)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack13 = virtualinvoke parsedLineColored#34.<java.lang.StringBuffer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "259"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "365"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>(), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalCounts := @parameter1: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($stack1)",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "300"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "markedLine = $stack31",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "322"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, markedLine = $stack31, 322)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack36 = virtualinvoke markedLine.<java.lang.StringBuffer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "339"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "252"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "parsedLine = parsedLineColoredAndMarked",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "254"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLine = parsedLineColoredAndMarked, 254)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack11 = new java.lang.StringBuffer",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "256"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, specialinvoke $stack11.<java.lang.StringBuffer: void <init>(java.lang.String)>(parsedLine), 256)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "parsedLineColored#34 = $stack11",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "256"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored#34 = $stack11, 256)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack13 = virtualinvoke parsedLineColored#34.<java.lang.StringBuffer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
  "line": "259"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>(), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalCounts := @parameter1: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($stack1)",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "300"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "shortLink = $stack19",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "304"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke shortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('</a>')",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "309"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke shortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('</a>'), 309)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>(), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalCounts := @parameter1: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($stack1)",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "300"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "shortLink = $stack19",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "304"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "link = $stack24",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "311"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, link = $stack24, 311)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke link.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('</li>')",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "314"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke link.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('</li>'), 314)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>",
  "line": "203"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, $stack171 = virtualinvoke $stack170.<java.lang.Integer: int intValue()>(), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "totalCounts := @parameter1: int",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserResult",
  "method": "<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, virtualinvoke result.<hudson.plugins.logparser.LogParserResult: void putTotalCountsByExtraTag(java.lang.String,int)>(extraTag#6, $stack171), 203)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Integer: int value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: void <init>(int)>",
  "line": "850"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(sectionCounter), 28)","(<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)","(<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Integer: int value>",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)","(<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($stack1)",
"location": {
  "file": "",
  "class": "java.lang.Integer",
  "method": "<java.lang.Integer: java.lang.String toString()>",
  "line": "935"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, staticinvoke <hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>($stack97, $stack96), 144)","(<hudson.plugins.logparser.LogParserWriter: void writeHeaderTemplateToAllLinkFiles(java.util.HashMap,int)>, $stack13 = virtualinvoke $stack12.<java.lang.Integer: java.lang.String toString()>(), 28)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "300"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(effectiveStatus), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(statusCountStr), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "301"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, marker = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>(), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "shortLink = $stack19",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "304"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "link = $stack24",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "311"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, link = $stack24, 311)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack30 = virtualinvoke link.<java.lang.StringBuffer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
  "line": "318"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: hudson.plugins.logparser.LogParserResult parseLog(hudson.model.Run)>, specialinvoke this.<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>(build, writer#7, log, logger), 161)","(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)","(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)","(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack30 = virtualinvoke link.<java.lang.StringBuffer: java.lang.String toString()>(), 318)"]
}]
}
}

]
