SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 74)) => Node(<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>,tableName := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74)) => Node(<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>,this.<cz.startnet.utils.pgdiff.schema.PgIndex: java.lang.String tableName> = tableName,148,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74) => (<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>, this.<cz.startnet.utils.pgdiff.schema.PgIndex: java.lang.String tableName> = tableName, 148))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 74)) => Node(<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>,tableName := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74)) => Node(<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>,this.<cz.startnet.utils.pgdiff.schema.PgIndex: java.lang.String tableName> = tableName,148,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74) => (<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>, this.<cz.startnet.utils.pgdiff.schema.PgIndex: java.lang.String tableName> = tableName, 148))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 74)) => Node(<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>,tableName := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74)) => Node(<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>,this.<cz.startnet.utils.pgdiff.schema.PgIndex: java.lang.String tableName> = tableName,148,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74) => (<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>, this.<cz.startnet.utils.pgdiff.schema.PgIndex: java.lang.String tableName> = tableName, 148))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 74)) => Node(<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>,tableName := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74)) => Node(<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>,this.<cz.startnet.utils.pgdiff.schema.PgIndex: java.lang.String tableName> = tableName,148,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74) => (<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>, this.<cz.startnet.utils.pgdiff.schema.PgIndex: java.lang.String tableName> = tableName, 148))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,name := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l1 := @parameter0: java.lang.Object,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l2 = (java.lang.String) l1,981,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, l2 = (java.lang.String) l1, 981)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l5 = l2.<java.lang.String: char[] value>,985,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, l5 = l2.<java.lang.String: char[] value>, 985))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema defaultSchema>,79,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,name := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l1 := @parameter0: java.lang.Object,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l2 = (java.lang.String) l1,981,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, l2 = (java.lang.String) l1, 981)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l5 = l2.<java.lang.String: char[] value>,985,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, l5 = l2.<java.lang.String: char[] value>, 985))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,this := @this: cz.startnet.utils.pgdiff.schema.PgTable,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,$stack2 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.util.List indexes>,420,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, $stack2 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.util.List indexes>, 420)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index),420,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index), 420))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,this := @this: cz.startnet.utils.pgdiff.schema.PgTable,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,$stack2 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.util.List indexes>,420,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, $stack2 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.util.List indexes>, 420)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index),420,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index), 420))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 74))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 74)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 74)) => Node(<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>,tableName := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74)) => Node(<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>,this.<cz.startnet.utils.pgdiff.schema.PgIndex: java.lang.String tableName> = tableName,148,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74) => (<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>, this.<cz.startnet.utils.pgdiff.schema.PgIndex: java.lang.String tableName> = tableName, 148))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,schema = (cz.startnet.utils.pgdiff.schema.PgSchema) $stack7,119,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 74)) => Node(<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>,tableName := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74)) => Node(<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>,this.<cz.startnet.utils.pgdiff.schema.PgIndex: java.lang.String tableName> = tableName,148,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74) => (<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>, this.<cz.startnet.utils.pgdiff.schema.PgIndex: java.lang.String tableName> = tableName, 148))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),110,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index),71,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index),71,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 74)) => Node(<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>,tableName := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74)) => Node(<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>,this.<cz.startnet.utils.pgdiff.schema.PgIndex: java.lang.String tableName> = tableName,148,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74) => (<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>, this.<cz.startnet.utils.pgdiff.schema.PgIndex: java.lang.String tableName> = tableName, 148))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),110,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 74)) => Node(<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>,tableName := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74)) => Node(<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>,this.<cz.startnet.utils.pgdiff.schema.PgIndex: java.lang.String tableName> = tableName,148,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74) => (<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>, this.<cz.startnet.utils.pgdiff.schema.PgIndex: java.lang.String tableName> = tableName, 148))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),110,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index),71,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: java.util.List schemas>,113,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: java.util.List schemas>, 113)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),113,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 113)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),119,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 119)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,schema = (cz.startnet.utils.pgdiff.schema.PgSchema) $stack7,119,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index),71,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 74))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 74)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 74))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema defaultSchema>,79,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),110,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 74)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema defaultSchema>,79,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,name := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l1 := @parameter0: java.lang.Object,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l2 = (java.lang.String) l1,981,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, l2 = (java.lang.String) l1, 981)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l5 = l2.<java.lang.String: char[] value>,985,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, l5 = l2.<java.lang.String: char[] value>, 985)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack13 = l5[l6],988,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack13 = l5[l6], 988))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),282,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l4 = l0.<java.lang.String: char[] value>,984,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, l4 = l0.<java.lang.String: char[] value>, 984)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack14 = l4[l6],988,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack14 = l4[l6], 988))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 74))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String name>,348,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 74)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,this := @this: cz.startnet.utils.pgdiff.schema.PgTable,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,$stack2 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.util.List indexes>,420,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, $stack2 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.util.List indexes>, 420)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index),420,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index), 420))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema defaultSchema>,79,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),110,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,this := @this: cz.startnet.utils.pgdiff.schema.PgTable,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,$stack2 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.util.List indexes>,420,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, $stack2 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.util.List indexes>, 420)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index),420,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index), 420))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),119,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 119)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,schema = (cz.startnet.utils.pgdiff.schema.PgSchema) $stack7,119,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack8 = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),114,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, $stack8 = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 114)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l4 = l0.<java.lang.String: char[] value>,984,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, l4 = l0.<java.lang.String: char[] value>, 984))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),282,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l4 = l0.<java.lang.String: char[] value>,984,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, l4 = l0.<java.lang.String: char[] value>, 984))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),110,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index),71,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index),71,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,name := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l1 := @parameter0: java.lang.Object,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l2 = (java.lang.String) l1,981,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, l2 = (java.lang.String) l1, 981)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack9 = l2.<java.lang.String: char[] value>,983,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack9 = l2.<java.lang.String: char[] value>, 983))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema defaultSchema>,79,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,name := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l1 := @parameter0: java.lang.Object,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l2 = (java.lang.String) l1,981,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, l2 = (java.lang.String) l1, 981)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack9 = l2.<java.lang.String: char[] value>,983,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack9 = l2.<java.lang.String: char[] value>, 983)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack10 = lengthof $stack9,983,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack10 = lengthof $stack9, 983))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),110,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index),71,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,schema = (cz.startnet.utils.pgdiff.schema.PgSchema) $stack7,119,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index),71,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,this := @this: cz.startnet.utils.pgdiff.schema.PgTable,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,$stack2 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.util.List indexes>,420,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, $stack2 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.util.List indexes>, 420)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index),420,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index), 420))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: java.util.List schemas>,113,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: java.util.List schemas>, 113)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),113,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 113)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),119,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 119)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,schema = (cz.startnet.utils.pgdiff.schema.PgSchema) $stack7,119,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,this := @this: cz.startnet.utils.pgdiff.schema.PgTable,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,$stack2 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.util.List indexes>,420,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, $stack2 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.util.List indexes>, 420)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index),420,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index), 420))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 74)) => Node(<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>,tableName := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74)) => Node(<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>,this.<cz.startnet.utils.pgdiff.schema.PgIndex: java.lang.String tableName> = tableName,148,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74) => (<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>, this.<cz.startnet.utils.pgdiff.schema.PgIndex: java.lang.String tableName> = tableName, 148))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: java.util.List schemas>,113,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: java.util.List schemas>, 113)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),113,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 113)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),119,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 119)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,schema = (cz.startnet.utils.pgdiff.schema.PgSchema) $stack7,119,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 74)) => Node(<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>,tableName := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74)) => Node(<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>,this.<cz.startnet.utils.pgdiff.schema.PgIndex: java.lang.String tableName> = tableName,148,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74) => (<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>, this.<cz.startnet.utils.pgdiff.schema.PgIndex: java.lang.String tableName> = tableName, 148))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,name := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l1 := @parameter0: java.lang.Object,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l2 = (java.lang.String) l1,981,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, l2 = (java.lang.String) l1, 981)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack9 = l2.<java.lang.String: char[] value>,983,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack9 = l2.<java.lang.String: char[] value>, 983))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,name := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l1 := @parameter0: java.lang.Object,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l2 = (java.lang.String) l1,981,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, l2 = (java.lang.String) l1, 981)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack9 = l2.<java.lang.String: char[] value>,983,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack9 = l2.<java.lang.String: char[] value>, 983)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack10 = lengthof $stack9,983,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack10 = lengthof $stack9, 983))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema defaultSchema>,79,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,name := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l1 := @parameter0: java.lang.Object,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l2 = (java.lang.String) l1,981,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, l2 = (java.lang.String) l1, 981))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,name := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l1 := @parameter0: java.lang.Object,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l2 = (java.lang.String) l1,981,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, l2 = (java.lang.String) l1, 981))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 74))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 74)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 74))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: java.util.List schemas>,113,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: java.util.List schemas>, 113)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),113,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 113)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),119,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 119)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,schema = (cz.startnet.utils.pgdiff.schema.PgSchema) $stack7,119,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 74)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),110,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index),71,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index),71,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,$stack2 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List indexes>,331,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72) => (<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, $stack2 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List indexes>, 331)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index),331,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72) => (<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index), 331))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,$stack2 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List indexes>,331,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72) => (<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, $stack2 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List indexes>, 331)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index),331,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72) => (<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index), 331))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,this := @this: cz.startnet.utils.pgdiff.schema.PgTable,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,$stack2 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.util.List indexes>,420,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, $stack2 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.util.List indexes>, 420)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index),420,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index), 420))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,schema = (cz.startnet.utils.pgdiff.schema.PgSchema) $stack7,119,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,this := @this: cz.startnet.utils.pgdiff.schema.PgTable,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,$stack2 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.util.List indexes>,420,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, $stack2 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.util.List indexes>, 420)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index),420,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index), 420))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema defaultSchema>,79,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,name := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l1 := @parameter0: java.lang.Object,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l2 = (java.lang.String) l1,981,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, l2 = (java.lang.String) l1, 981)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l5 = l2.<java.lang.String: char[] value>,985,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, l5 = l2.<java.lang.String: char[] value>, 985)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack13 = l5[l6],988,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack13 = l5[l6], 988))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String name>,348,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),282,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l4 = l0.<java.lang.String: char[] value>,984,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, l4 = l0.<java.lang.String: char[] value>, 984)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack14 = l4[l6],988,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack14 = l4[l6], 988))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),113,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 113)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),119,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 119)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,schema = (cz.startnet.utils.pgdiff.schema.PgSchema) $stack7,119,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack8 = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),114,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, $stack8 = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 114)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack8 = l0.<java.lang.String: char[] value>,982,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack8 = l0.<java.lang.String: char[] value>, 982)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l3 = lengthof $stack8,982,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, l3 = lengthof $stack8, 982)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l3 = l3 + -1,987,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack12 = l3, 987))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack8 = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),114,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, $stack8 = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 114)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack8 = l0.<java.lang.String: char[] value>,982,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack8 = l0.<java.lang.String: char[] value>, 982)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l3 = lengthof $stack8,982,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, l3 = lengthof $stack8, 982)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l3 = l3 + -1,987,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack12 = l3, 987))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema defaultSchema>,79,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema defaultSchema>,79,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 74)) => Node(<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>,tableName := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74)) => Node(<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>,this.<cz.startnet.utils.pgdiff.schema.PgIndex: java.lang.String tableName> = tableName,148,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74) => (<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>, this.<cz.startnet.utils.pgdiff.schema.PgIndex: java.lang.String tableName> = tableName, 148))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 74)) => Node(<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>,tableName := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74)) => Node(<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>,this.<cz.startnet.utils.pgdiff.schema.PgIndex: java.lang.String tableName> = tableName,148,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74) => (<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>, this.<cz.startnet.utils.pgdiff.schema.PgIndex: java.lang.String tableName> = tableName, 148))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema defaultSchema>,79,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,name := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l1 := @parameter0: java.lang.Object,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l2 = (java.lang.String) l1,981,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, l2 = (java.lang.String) l1, 981)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l5 = l2.<java.lang.String: char[] value>,985,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, l5 = l2.<java.lang.String: char[] value>, 985)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack13 = l5[l6],988,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack13 = l5[l6], 988))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack8 = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),114,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, $stack8 = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 114)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l4 = l0.<java.lang.String: char[] value>,984,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, l4 = l0.<java.lang.String: char[] value>, 984)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack14 = l4[l6],988,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack14 = l4[l6], 988))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),110,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index),71,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index),71,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,$stack2 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List indexes>,331,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72) => (<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, $stack2 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List indexes>, 331)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index),331,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72) => (<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index), 331))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: java.util.List schemas>,113,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: java.util.List schemas>, 113)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),113,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 113)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),119,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 119)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,schema = (cz.startnet.utils.pgdiff.schema.PgSchema) $stack7,119,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,$stack2 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List indexes>,331,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72) => (<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, $stack2 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List indexes>, 331)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index),331,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72) => (<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index), 331))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema defaultSchema>,79,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 74)) => Node(<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>,tableName := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74)) => Node(<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>,this.<cz.startnet.utils.pgdiff.schema.PgIndex: java.lang.String tableName> = tableName,148,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74) => (<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>, this.<cz.startnet.utils.pgdiff.schema.PgIndex: java.lang.String tableName> = tableName, 148))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema defaultSchema>,79,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),110,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 74)) => Node(<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>,tableName := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74)) => Node(<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>,this.<cz.startnet.utils.pgdiff.schema.PgIndex: java.lang.String tableName> = tableName,148,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74) => (<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>, this.<cz.startnet.utils.pgdiff.schema.PgIndex: java.lang.String tableName> = tableName, 148))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),282,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack8 = l0.<java.lang.String: char[] value>,982,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack8 = l0.<java.lang.String: char[] value>, 982))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),282,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack8 = l0.<java.lang.String: char[] value>,982,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack8 = l0.<java.lang.String: char[] value>, 982)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l3 = lengthof $stack8,982,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, l3 = lengthof $stack8, 982))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema defaultSchema>,79,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,name := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l1 := @parameter0: java.lang.Object,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l2 = (java.lang.String) l1,981,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, l2 = (java.lang.String) l1, 981))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema defaultSchema>,79,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,name := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l1 := @parameter0: java.lang.Object,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l2 = (java.lang.String) l1,981,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, l2 = (java.lang.String) l1, 981))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema defaultSchema>,79,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,name := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l1 := @parameter0: java.lang.Object,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack7 = l1 instanceof java.lang.String,980,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack7 = l1 instanceof java.lang.String, 980))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema defaultSchema>,79,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,name := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l1 := @parameter0: java.lang.Object,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack7 = l1 instanceof java.lang.String,980,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack7 = l1 instanceof java.lang.String, 980))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),282,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack8 = l0.<java.lang.String: char[] value>,982,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack8 = l0.<java.lang.String: char[] value>, 982))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String name>,348,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),282,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack8 = l0.<java.lang.String: char[] value>,982,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack8 = l0.<java.lang.String: char[] value>, 982)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l3 = lengthof $stack8,982,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, l3 = lengthof $stack8, 982))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema defaultSchema>,79,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,$stack2 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List indexes>,331,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72) => (<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, $stack2 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List indexes>, 331)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index),331,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72) => (<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index), 331))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),110,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,$stack2 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List indexes>,331,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72) => (<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, $stack2 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List indexes>, 331)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index),331,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72) => (<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index), 331))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,$stack2 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List indexes>,331,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72) => (<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, $stack2 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List indexes>, 331)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index),331,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72) => (<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index), 331))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,schema = (cz.startnet.utils.pgdiff.schema.PgSchema) $stack7,119,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,$stack2 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List indexes>,331,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72) => (<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, $stack2 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List indexes>, 331)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index),331,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72) => (<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index), 331))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 74))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 74)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema defaultSchema>,79,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,name := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l1 := @parameter0: java.lang.Object,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l2 = (java.lang.String) l1,981,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, l2 = (java.lang.String) l1, 981)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l5 = l2.<java.lang.String: char[] value>,985,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, l5 = l2.<java.lang.String: char[] value>, 985)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack13 = l5[l6],988,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack13 = l5[l6], 988))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema defaultSchema>,79,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,name := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l1 := @parameter0: java.lang.Object,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l2 = (java.lang.String) l1,981,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, l2 = (java.lang.String) l1, 981)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l5 = l2.<java.lang.String: char[] value>,985,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, l5 = l2.<java.lang.String: char[] value>, 985)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack13 = l5[l6],988,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack13 = l5[l6], 988))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),113,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 113)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),119,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 119)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,schema = (cz.startnet.utils.pgdiff.schema.PgSchema) $stack7,119,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack8 = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),114,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, $stack8 = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 114)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack8 = l0.<java.lang.String: char[] value>,982,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack8 = l0.<java.lang.String: char[] value>, 982)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l3 = lengthof $stack8,982,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, l3 = lengthof $stack8, 982)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l3 = l3 + -1,987,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack12 = l3, 987))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),282,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack8 = l0.<java.lang.String: char[] value>,982,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack8 = l0.<java.lang.String: char[] value>, 982)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l3 = lengthof $stack8,982,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, l3 = lengthof $stack8, 982)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l3 = l3 + -1,987,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack12 = l3, 987))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema defaultSchema>,79,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,name := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l1 := @parameter0: java.lang.Object,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l2 = (java.lang.String) l1,981,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, l2 = (java.lang.String) l1, 981)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l5 = l2.<java.lang.String: char[] value>,985,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, l5 = l2.<java.lang.String: char[] value>, 985)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack13 = l5[l6],988,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack13 = l5[l6], 988))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,name := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l1 := @parameter0: java.lang.Object,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l2 = (java.lang.String) l1,981,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, l2 = (java.lang.String) l1, 981)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l5 = l2.<java.lang.String: char[] value>,985,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, l5 = l2.<java.lang.String: char[] value>, 985)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack13 = l5[l6],988,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack13 = l5[l6], 988))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),110,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index),71,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema defaultSchema>,79,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),110,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index),71,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,this := @this: cz.startnet.utils.pgdiff.schema.PgTable,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,$stack2 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.util.List indexes>,420,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, $stack2 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.util.List indexes>, 420)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index),420,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index), 420))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,this := @this: cz.startnet.utils.pgdiff.schema.PgTable,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,$stack2 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.util.List indexes>,420,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, $stack2 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.util.List indexes>, 420)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index),420,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index), 420))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 74)) => Node(<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>,tableName := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74)) => Node(<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>,this.<cz.startnet.utils.pgdiff.schema.PgIndex: java.lang.String tableName> = tableName,148,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74) => (<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>, this.<cz.startnet.utils.pgdiff.schema.PgIndex: java.lang.String tableName> = tableName, 148))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 74)) => Node(<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>,tableName := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74)) => Node(<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>,this.<cz.startnet.utils.pgdiff.schema.PgIndex: java.lang.String tableName> = tableName,148,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74) => (<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>, this.<cz.startnet.utils.pgdiff.schema.PgIndex: java.lang.String tableName> = tableName, 148))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,$stack2 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List indexes>,331,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72) => (<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, $stack2 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List indexes>, 331)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index),331,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72) => (<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index), 331))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,$stack2 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List indexes>,331,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72) => (<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, $stack2 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List indexes>, 331)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index),331,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72) => (<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index), 331))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 74))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),110,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 74)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),119,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 119)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,schema = (cz.startnet.utils.pgdiff.schema.PgSchema) $stack7,119,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack8 = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),114,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, $stack8 = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 114)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l4 = l0.<java.lang.String: char[] value>,984,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, l4 = l0.<java.lang.String: char[] value>, 984))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String name>,348,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),282,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l4 = l0.<java.lang.String: char[] value>,984,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, l4 = l0.<java.lang.String: char[] value>, 984))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,this := @this: cz.startnet.utils.pgdiff.schema.PgTable,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,$stack2 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.util.List indexes>,420,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, $stack2 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.util.List indexes>, 420)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index),420,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index), 420))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,this := @this: cz.startnet.utils.pgdiff.schema.PgTable,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,$stack2 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.util.List indexes>,420,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, $stack2 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.util.List indexes>, 420)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index),420,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index), 420))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 74))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,schema = (cz.startnet.utils.pgdiff.schema.PgSchema) $stack7,119,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 74)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),110,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index),71,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),110,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index),71,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,this := @this: cz.startnet.utils.pgdiff.schema.PgTable,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,$stack2 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.util.List indexes>,420,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, $stack2 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.util.List indexes>, 420)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index),420,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index), 420))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),110,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,this := @this: cz.startnet.utils.pgdiff.schema.PgTable,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,$stack2 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.util.List indexes>,420,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, $stack2 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.util.List indexes>, 420)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index),420,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index), 420))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema defaultSchema>,79,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,name := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l1 := @parameter0: java.lang.Object,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack7 = l1 instanceof java.lang.String,980,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack7 = l1 instanceof java.lang.String, 980))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,name := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l1 := @parameter0: java.lang.Object,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack7 = l1 instanceof java.lang.String,980,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack7 = l1 instanceof java.lang.String, 980))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,this := @this: cz.startnet.utils.pgdiff.schema.PgTable,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,$stack2 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.util.List indexes>,420,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, $stack2 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.util.List indexes>, 420)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index),420,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index), 420))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,this := @this: cz.startnet.utils.pgdiff.schema.PgTable,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,$stack2 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.util.List indexes>,420,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, $stack2 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.util.List indexes>, 420)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index),420,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index), 420))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 74))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 74)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 74)) => Node(<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>,tableName := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74)) => Node(<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>,this.<cz.startnet.utils.pgdiff.schema.PgIndex: java.lang.String tableName> = tableName,148,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74) => (<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>, this.<cz.startnet.utils.pgdiff.schema.PgIndex: java.lang.String tableName> = tableName, 148))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 74)) => Node(<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>,tableName := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74)) => Node(<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>,this.<cz.startnet.utils.pgdiff.schema.PgIndex: java.lang.String tableName> = tableName,148,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74) => (<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>, this.<cz.startnet.utils.pgdiff.schema.PgIndex: java.lang.String tableName> = tableName, 148))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),282,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack8 = l0.<java.lang.String: char[] value>,982,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack8 = l0.<java.lang.String: char[] value>, 982))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack8 = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),114,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, $stack8 = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 114)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack8 = l0.<java.lang.String: char[] value>,982,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack8 = l0.<java.lang.String: char[] value>, 982)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l3 = lengthof $stack8,982,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, l3 = lengthof $stack8, 982))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),119,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 119)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,schema = (cz.startnet.utils.pgdiff.schema.PgSchema) $stack7,119,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack8 = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),114,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, $stack8 = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 114)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l4 = l0.<java.lang.String: char[] value>,984,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, l4 = l0.<java.lang.String: char[] value>, 984))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack8 = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),114,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, $stack8 = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 114)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l4 = l0.<java.lang.String: char[] value>,984,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, l4 = l0.<java.lang.String: char[] value>, 984))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),113,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 113)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),119,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 119)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,schema = (cz.startnet.utils.pgdiff.schema.PgSchema) $stack7,119,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack8 = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),114,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, $stack8 = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 114)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack8 = l0.<java.lang.String: char[] value>,982,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack8 = l0.<java.lang.String: char[] value>, 982)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l3 = lengthof $stack8,982,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, l3 = lengthof $stack8, 982)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l3 = l3 + -1,987,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack12 = l3, 987))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String name>,348,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),282,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack8 = l0.<java.lang.String: char[] value>,982,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack8 = l0.<java.lang.String: char[] value>, 982)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l3 = lengthof $stack8,982,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, l3 = lengthof $stack8, 982)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l3 = l3 + -1,987,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack12 = l3, 987))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,$stack2 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List indexes>,331,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72) => (<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, $stack2 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List indexes>, 331)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index),331,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72) => (<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index), 331))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema defaultSchema>,79,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),110,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,$stack2 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List indexes>,331,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72) => (<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, $stack2 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List indexes>, 331)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index),331,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72) => (<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index), 331))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 74)) => Node(<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>,tableName := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74)) => Node(<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>,this.<cz.startnet.utils.pgdiff.schema.PgIndex: java.lang.String tableName> = tableName,148,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74) => (<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>, this.<cz.startnet.utils.pgdiff.schema.PgIndex: java.lang.String tableName> = tableName, 148))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String name>,348,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),74,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack30 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 74)) => Node(<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>,tableName := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74)) => Node(<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>,this.<cz.startnet.utils.pgdiff.schema.PgIndex: java.lang.String tableName> = tableName,148,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke index.<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>($stack30), 74) => (<cz.startnet.utils.pgdiff.schema.PgIndex: void setTableName(java.lang.String)>, this.<cz.startnet.utils.pgdiff.schema.PgIndex: java.lang.String tableName> = tableName, 148))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,this := @this: cz.startnet.utils.pgdiff.schema.PgTable,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,$stack2 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.util.List indexes>,420,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, $stack2 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.util.List indexes>, 420)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index),420,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index), 420))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,this := @this: cz.startnet.utils.pgdiff.schema.PgTable,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,$stack2 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.util.List indexes>,420,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, $stack2 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.util.List indexes>, 420)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index),420,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index), 420))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),110,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index),71,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index),71,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 71))

SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,name := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l1 := @parameter0: java.lang.Object,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l2 = (java.lang.String) l1,981,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, l2 = (java.lang.String) l1, 981)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l5 = l2.<java.lang.String: char[] value>,985,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, l5 = l2.<java.lang.String: char[] value>, 985))
SINK=>BASE: Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,name := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l1 := @parameter0: java.lang.Object,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l2 = (java.lang.String) l1,981,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, l2 = (java.lang.String) l1, 981)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l5 = l2.<java.lang.String: char[] value>,985,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack13), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 46) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: boolean equals(java.lang.Object)>(word), 72) => (<java.lang.String: boolean equals(java.lang.Object)>, l5 = l2.<java.lang.String: char[] value>, 985))

List(Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,name := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,if name != null goto $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: java.util.List schemas>,109,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,return table,283,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,schema = (cz.startnet.utils.pgdiff.schema.PgSchema) $stack7,119,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,if schema != null goto objectName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getObjectName(java.lang.String)>(tableName),55,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack6 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack6 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,if $stack6 == 0 goto return null,281,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema defaultSchema>,79,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>,return $stack1,79,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String name>,348,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,return $stack1,348,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),110,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,if schema != null goto objectName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getObjectName(java.lang.String)>(tableName),55,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,name := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack9 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>(name),114,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, $stack9 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>(name), 114)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,if $stack9 == 0 goto (branch),114,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),282,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack9 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>(name),282,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack9 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>(name), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,if $stack9 == 0 goto (branch),282,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,return table,283,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,schema = (cz.startnet.utils.pgdiff.schema.PgSchema) $stack7,119,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,return $stack1,192,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,if table != null goto $stack28 = new cz.startnet.utils.pgdiff.schema.PgIndex,64,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack8 = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),114,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, $stack8 = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 114)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack9 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>(name),114,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, $stack9 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>(name), 114)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,if $stack9 == 0 goto (branch),114,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgTable,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String name>,348,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,return $stack1,348,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),110,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgTable,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String name>,348,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,return $stack1,348,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: java.util.List schemas>,113,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: java.util.List schemas>, 113)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),113,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 113)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),119,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 119)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,schema = (cz.startnet.utils.pgdiff.schema.PgSchema) $stack7,119,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,return $stack1,192,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),110,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,return table,283,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,schema = (cz.startnet.utils.pgdiff.schema.PgSchema) $stack7,119,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,return schema,115,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,if table != null goto $stack28 = new cz.startnet.utils.pgdiff.schema.PgIndex,64,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema defaultSchema>,79,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),110,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgTable,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String name>,348,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),282,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack9 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>(name),282,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack9 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>(name), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,if $stack9 == 0 goto (branch),282,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String name>,348,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),282,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack9 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>(name),282,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack9 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>(name), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,if $stack9 == 0 goto (branch),282,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema defaultSchema>,79,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),79,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,name := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack9 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>(name),114,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, $stack9 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>(name), 114)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,if $stack9 == 0 goto (branch),114,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgTable,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String name>,348,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,return $stack1,348,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,return $stack1,192,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,return table,283,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,if table != null goto $stack28 = new cz.startnet.utils.pgdiff.schema.PgIndex,64,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgTable,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String name>,348,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),282,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack9 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>(name),282,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack9 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>(name), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,if $stack9 == 0 goto (branch),282,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgTable,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String name>,348,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,return $stack1,348,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgTable,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String name>,348,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),282,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack9 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>(name),282,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack9 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>(name), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,if $stack9 == 0 goto (branch),282,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,if schema != null goto objectName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getObjectName(java.lang.String)>(tableName),55,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema defaultSchema>,79,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),110,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,return $stack11,110,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema defaultSchema>,79,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),79,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,return $stack1,192,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema defaultSchema>,79,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),110,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,if schema != null goto objectName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getObjectName(java.lang.String)>(tableName),55,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema defaultSchema>,79,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),110,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack6 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack6 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,if $stack6 == 0 goto return null,281,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),110,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack6 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack6 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,if $stack6 == 0 goto return null,281,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),110,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,if table != null goto $stack28 = new cz.startnet.utils.pgdiff.schema.PgIndex,64,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgTable,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String name>,348,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,return $stack1,348,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack6 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack6 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,if $stack6 == 0 goto return null,281,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),110,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,return $stack11,110,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema defaultSchema>,79,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),110,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,return table,283,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: java.util.List schemas>,113,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: java.util.List schemas>, 113)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),113,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 113)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack6 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(),113,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, $stack6 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(), 113)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,if $stack6 == 0 goto return null,113,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,if table != null goto $stack28 = new cz.startnet.utils.pgdiff.schema.PgIndex,64,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema defaultSchema>,79,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),79,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,name := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,if name != null goto $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: java.util.List schemas>,109,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgTable,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String name>,348,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),282,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack9 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>(name),282,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack9 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>(name), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,if $stack9 == 0 goto (branch),282,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: java.util.List schemas>,113,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: java.util.List schemas>, 113)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),113,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 113)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),119,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 119)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,schema = (cz.startnet.utils.pgdiff.schema.PgSchema) $stack7,119,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,return schema,115,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack6 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack6 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,if $stack6 == 0 goto return null,281,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgTable,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String name>,348,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),282,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack9 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>(name),282,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack9 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>(name), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,if $stack9 == 0 goto (branch),282,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,if table != null goto $stack28 = new cz.startnet.utils.pgdiff.schema.PgIndex,64,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,if schema != null goto objectName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getObjectName(java.lang.String)>(tableName),55,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema defaultSchema>,79,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),110,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgTable,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String name>,348,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,return $stack1,348,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),110,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgTable,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String name>,348,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),282,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack9 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>(name),282,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack9 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>(name), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,if $stack9 == 0 goto (branch),282,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgTable,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String name>,348,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,return $stack1,348,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema defaultSchema>,79,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),110,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,if table != null goto $stack28 = new cz.startnet.utils.pgdiff.schema.PgIndex,64,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,return table,283,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,name := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,if name != null goto $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: java.util.List schemas>,109,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,return table,283,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack6 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack6 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,if $stack6 == 0 goto return null,281,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema defaultSchema>,79,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>,return $stack1,79,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String name>,348,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,return $stack1,348,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,name := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack9 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>(name),114,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, $stack9 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>(name), 114)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,if $stack9 == 0 goto (branch),114,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),282,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack9 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>(name),282,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack9 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>(name), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,if $stack9 == 0 goto (branch),282,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,return table,283,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,schema = (cz.startnet.utils.pgdiff.schema.PgSchema) $stack7,119,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,return $stack1,192,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack8 = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),114,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, $stack8 = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 114)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack9 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>(name),114,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, $stack9 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>(name), 114)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,if $stack9 == 0 goto (branch),114,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema defaultSchema>,79,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),110,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index),72,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72)))

List(Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgTable,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String name>,348,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,return $stack1,348,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),110,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgTable,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String name>,348,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,return $stack1,348,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: java.util.List schemas>,113,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: java.util.List schemas>, 113)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),113,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 113)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),119,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 119)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,schema = (cz.startnet.utils.pgdiff.schema.PgSchema) $stack7,119,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,return $stack1,192,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),110,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,return table,283,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,schema = (cz.startnet.utils.pgdiff.schema.PgSchema) $stack7,119,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,return schema,115,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema defaultSchema>,79,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),110,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgTable,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String name>,348,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),282,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack9 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>(name),282,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack9 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>(name), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,if $stack9 == 0 goto (branch),282,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String name>,348,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),282,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack9 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>(name),282,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack9 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>(name), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,if $stack9 == 0 goto (branch),282,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),110,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,$stack2 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List indexes>,331,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72) => (<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, $stack2 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List indexes>, 331)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index),331,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72) => (<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index), 331)))

List(Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema defaultSchema>,79,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),79,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,name := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack9 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>(name),114,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, $stack9 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>(name), 114)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,if $stack9 == 0 goto (branch),114,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgTable,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String name>,348,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,return $stack1,348,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,return $stack1,192,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgTable,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String name>,348,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),282,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack9 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>(name),282,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack9 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>(name), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,if $stack9 == 0 goto (branch),282,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema defaultSchema>,79,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),110,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,return $stack11,110,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgTable,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String name>,348,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),282,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack9 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>(name),282,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack9 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>(name), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,if $stack9 == 0 goto (branch),282,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema defaultSchema>,79,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),110,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,$stack2 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List indexes>,331,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72) => (<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, $stack2 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List indexes>, 331)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index),331,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72) => (<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index), 331)))

List(Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema defaultSchema>,79,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),79,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,return $stack1,192,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgTable,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String name>,348,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,return $stack1,348,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,return table,283,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema defaultSchema>,79,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),110,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack6 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack6 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,if $stack6 == 0 goto return null,281,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),110,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack6 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack6 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,if $stack6 == 0 goto return null,281,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index),72,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72)))

List(Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgTable,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String name>,348,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,return $stack1,348,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack6 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack6 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,if $stack6 == 0 goto return null,281,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,$stack2 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List indexes>,331,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72) => (<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, $stack2 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List indexes>, 331)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index),331,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72) => (<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index), 331)))

List(Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),110,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,return $stack11,110,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema defaultSchema>,79,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),110,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,return table,283,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: java.util.List schemas>,113,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: java.util.List schemas>, 113)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),113,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 113)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack6 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(),113,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, $stack6 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(), 113)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,if $stack6 == 0 goto return null,113,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema defaultSchema>,79,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),79,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,name := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,if name != null goto $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: java.util.List schemas>,109,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgTable,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String name>,348,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),282,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack9 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>(name),282,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack9 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>(name), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,if $stack9 == 0 goto (branch),282,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: java.util.List schemas>,113,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: java.util.List schemas>, 113)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),113,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 113)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),119,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53) => (<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 119)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,schema = (cz.startnet.utils.pgdiff.schema.PgSchema) $stack7,119,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,return schema,115,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack6 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack6 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,if $stack6 == 0 goto return null,281,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgTable,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String name>,348,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),282,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack9 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>(name),282,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack9 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>(name), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,if $stack9 == 0 goto (branch),282,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),110,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index),72,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72)))

List(Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index),72,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72)))

List(Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema defaultSchema>,79,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 79)) => Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),110,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgTable,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String name>,348,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,return $stack1,348,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,$stack2 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List indexes>,331,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72) => (<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, $stack2 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List indexes>, 331)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>,interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index),331,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72) => (<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>, interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(index), 331)))

List(Node(<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>,$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(),110,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgTable,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String name>,348,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(),282,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack9 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>(name),282,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack9 = virtualinvoke $stack8.<java.lang.String: boolean equals(java.lang.Object)>(name), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,if $stack9 == 0 goto (branch),282,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgTable,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String name>,348,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack8 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 282)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>,return $stack1,348,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>,192,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 79)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>,$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),79,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database),52,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 52)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List tables>, 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 287)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,table = (cz.startnet.utils.pgdiff.schema.PgTable) $stack7,287,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,return table,283,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,if schema != null goto objectName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getObjectName(java.lang.String)>(tableName),55,SinkNode, path: ) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack37[0] = schemaName,57,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack38 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($stack36, $stack37), 56)))

List(Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,if table != null goto $stack28 = new cz.startnet.utils.pgdiff.schema.PgIndex,64,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,if table != null goto $stack28 = new cz.startnet.utils.pgdiff.schema.PgIndex,64,SinkNode, path: ) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack33 = newarray (java.lang.Object)[2],66,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack34 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($stack32, $stack33), 65)))

List(Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,if table != null goto $stack28 = new cz.startnet.utils.pgdiff.schema.PgIndex,64,SinkNode, path: ) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack33 = newarray (java.lang.Object)[2],66,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack34 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($stack32, $stack33), 65)))

List(Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,if table != null goto $stack28 = new cz.startnet.utils.pgdiff.schema.PgIndex,64,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,if schema != null goto objectName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getObjectName(java.lang.String)>(tableName),55,SinkNode, path: ) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,throw $stack35,56,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,if schema != null goto objectName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getObjectName(java.lang.String)>(tableName),55,SinkNode, path: ))

List(Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),53,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 53)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,if schema != null goto objectName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getObjectName(java.lang.String)>(tableName),55,SourceNode, path: ) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,objectName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getObjectName(java.lang.String)>(tableName),61,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, objectName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getObjectName(java.lang.String)>(tableName), 61)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,if table != null goto $stack28 = new cz.startnet.utils.pgdiff.schema.PgIndex,64,SourceNode, path: ) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,index = $stack28,70,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, index = $stack28, 70)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index),72,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72)))

List(Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,if schema != null goto objectName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getObjectName(java.lang.String)>(tableName),55,SourceNode, path: ) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,objectName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getObjectName(java.lang.String)>(tableName),61,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, objectName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getObjectName(java.lang.String)>(tableName), 61)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,if table != null goto $stack28 = new cz.startnet.utils.pgdiff.schema.PgIndex,64,SourceNode, path: ) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,index = $stack28,70,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, index = $stack28, 70)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index),72,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72)))

List(Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,if table != null goto $stack28 = new cz.startnet.utils.pgdiff.schema.PgIndex,64,SourceNode, path: ) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,index = $stack28,70,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, index = $stack28, 70)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index),72,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72)))

List(Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName),62,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(objectName), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,if table != null goto $stack28 = new cz.startnet.utils.pgdiff.schema.PgIndex,64,SourceNode, path: ) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,index = $stack28,70,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, index = $stack28, 70)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index),72,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateIndexParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addIndex(cz.startnet.utils.pgdiff.schema.PgIndex)>(index), 72)))

