Running soot scenario jgrapht;org.jgrapht.alg.vertexcover.GreedyVCImpl;getVertexCover(Graph<V,E>, Map<V,Double>);a1da34c8f43a243454808270f60c9a223086a167
Running ConflictDetectionAlgorithm{name='Confluence Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/jgrapht/a1da34c8f43a243454808270f60c9a223086a167/original-without-dependencies/jgrapht-ext-1.1.1-SNAPSHOT-uber.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot Confluence 1 Inter 1,19300
Time to perform Confluence 1 Inter 0,86100
Configure Soot Confluence 2 Inter 0,59000
Time to perform Confluence 2 Inter 0,24400
Visited methods: 72
Depth limit: 5
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running ConflictDetectionAlgorithm{name='OA Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/jgrapht/a1da34c8f43a243454808270f60c9a223086a167/original-without-dependencies/jgrapht-ext-1.1.1-SNAPSHOT-uber.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Depth limit: 5
Configure Soot OA Inter 0,95800
Runtime: 0.022s
Time to perform OA Inter 1,07100
OA Inter Visited methods: 50
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/jgrapht/a1da34c8f43a243454808270f60c9a223086a167/original-without-dependencies/jgrapht-ext-1.1.1-SNAPSHOT-uber.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,91800
Time to perform DFP Inter 0,82300
Depth limit: 5
CONFLICTS: DF interference in <org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>
Data flows from execution of line 197 to 234, defined in $stack24 = new java.util.TreeSet and propagated in specialinvoke $stack28.<org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCoverImpl: void <init>(java.util.Set,double)>(cover, weight)
Caused by line 197 flow: path: (<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>, specialinvoke $stack24.<java.util.TreeSet: void <init>(java.util.Collection)>($stack25), 197)
Caused by line 234 flow: path: (<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>, specialinvoke $stack28.<org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCoverImpl: void <init>(java.util.Set,double)>(cover, weight), 234)
DF interference in <org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>
Data flows from execution of line 197 to 234, defined in $stack24 = new java.util.TreeSet and propagated in this.<org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCoverImpl: double weight> = weight
Caused by line 197 flow: path: (<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>, specialinvoke $stack24.<java.util.TreeSet: void <init>(java.util.Collection)>($stack25), 197)
Caused by line 234 flow: path: (<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>, specialinvoke $stack28.<org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCoverImpl: void <init>(java.util.Set,double)>(cover, weight), 234) => (<org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCoverImpl: void <init>(java.util.Set,double)>, this.<org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCoverImpl: double weight> = weight, 104)
[List(Node(<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>,$stack24 = new java.util.TreeSet,197,SourceNode, path: (<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>, specialinvoke $stack24.<java.util.TreeSet: void <init>(java.util.Collection)>($stack25), 197)) => Node(<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>,workingGraph#6 = $stack24,197,SourceNode, path: (<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>, workingGraph#6 = $stack24, 197)) => Node(<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>,$stack29 = virtualinvoke workingGraph#6.<java.util.TreeSet: java.lang.Object pollFirst()>(),205,SimpleNode, path: (<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>, $stack29 = virtualinvoke workingGraph#6.<java.util.TreeSet: java.lang.Object pollFirst()>(), 205)) => Node(<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>,e#11 = (org.jgrapht.alg.vertexcover.util.RatioVertex) $stack29,205,SimpleNode, path: (<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>, e#11 = (org.jgrapht.alg.vertexcover.util.RatioVertex) $stack29, 205)) => Node(<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>,$stack37 = e#11.<org.jgrapht.alg.vertexcover.util.RatioVertex: java.lang.Object v>,229,SimpleNode, path: (<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>, $stack37 = e#11.<org.jgrapht.alg.vertexcover.util.RatioVertex: java.lang.Object v>, 229)) => Node(<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>,$stack38 = interfaceinvoke vertexWeightMap.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack37),229,SimpleNode, path: (<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>, $stack38 = interfaceinvoke vertexWeightMap.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack37), 229)) => Node(<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>,$stack39 = (java.lang.Double) $stack38,229,SimpleNode, path: (<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>, $stack39 = (java.lang.Double) $stack38, 229)) => Node(<java.lang.Double: double doubleValue()>,l0 := @this: java.lang.Double,-1,SimpleNode, path: (<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>, $stack40 = virtualinvoke $stack39.<java.lang.Double: double doubleValue()>(), 229)) => Node(<java.lang.Double: double doubleValue()>,$stack1 = l0.<java.lang.Double: double value>,716,SimpleNode, path: (<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>, $stack40 = virtualinvoke $stack39.<java.lang.Double: double doubleValue()>(), 229)) => Node(<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>,$stack40 = virtualinvoke $stack39.<java.lang.Double: double doubleValue()>(),229,SimpleNode, path: (<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>, $stack40 = virtualinvoke $stack39.<java.lang.Double: double doubleValue()>(), 229)) => Node(<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>,weight = weight + $stack40,229,SimpleNode, path: (<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>, weight = weight + $stack40, 229)) => Node(<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>,specialinvoke $stack28.<org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCoverImpl: void <init>(java.util.Set,double)>(cover, weight),234,SinkNode, path: (<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>, specialinvoke $stack28.<org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCoverImpl: void <init>(java.util.Set,double)>(cover, weight), 234))), List(Node(<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>,$stack24 = new java.util.TreeSet,197,SourceNode, path: (<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>, specialinvoke $stack24.<java.util.TreeSet: void <init>(java.util.Collection)>($stack25), 197)) => Node(<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>,workingGraph#6 = $stack24,197,SourceNode, path: (<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>, workingGraph#6 = $stack24, 197)) => Node(<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>,$stack29 = virtualinvoke workingGraph#6.<java.util.TreeSet: java.lang.Object pollFirst()>(),205,SimpleNode, path: (<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>, $stack29 = virtualinvoke workingGraph#6.<java.util.TreeSet: java.lang.Object pollFirst()>(), 205)) => Node(<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>,e#11 = (org.jgrapht.alg.vertexcover.util.RatioVertex) $stack29,205,SimpleNode, path: (<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>, e#11 = (org.jgrapht.alg.vertexcover.util.RatioVertex) $stack29, 205)) => Node(<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>,$stack37 = e#11.<org.jgrapht.alg.vertexcover.util.RatioVertex: java.lang.Object v>,229,SimpleNode, path: (<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>, $stack37 = e#11.<org.jgrapht.alg.vertexcover.util.RatioVertex: java.lang.Object v>, 229)) => Node(<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>,$stack38 = interfaceinvoke vertexWeightMap.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack37),229,SimpleNode, path: (<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>, $stack38 = interfaceinvoke vertexWeightMap.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack37), 229)) => Node(<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>,$stack39 = (java.lang.Double) $stack38,229,SimpleNode, path: (<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>, $stack39 = (java.lang.Double) $stack38, 229)) => Node(<java.lang.Double: double doubleValue()>,l0 := @this: java.lang.Double,-1,SimpleNode, path: (<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>, $stack40 = virtualinvoke $stack39.<java.lang.Double: double doubleValue()>(), 229)) => Node(<java.lang.Double: double doubleValue()>,$stack1 = l0.<java.lang.Double: double value>,716,SimpleNode, path: (<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>, $stack40 = virtualinvoke $stack39.<java.lang.Double: double doubleValue()>(), 229)) => Node(<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>,$stack40 = virtualinvoke $stack39.<java.lang.Double: double doubleValue()>(),229,SimpleNode, path: (<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>, $stack40 = virtualinvoke $stack39.<java.lang.Double: double doubleValue()>(), 229)) => Node(<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>,weight = weight + $stack40,229,SimpleNode, path: (<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>, weight = weight + $stack40, 229)) => Node(<org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCoverImpl: void <init>(java.util.Set,double)>,weight := @parameter1: double,-1,SimpleNode, path: (<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>, specialinvoke $stack28.<org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCoverImpl: void <init>(java.util.Set,double)>(cover, weight), 234)) => Node(<org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCoverImpl: void <init>(java.util.Set,double)>,this.<org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCoverImpl: double weight> = weight,104,SinkNode, path: (<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>, specialinvoke $stack28.<org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCoverImpl: void <init>(java.util.Set,double)>(cover, weight), 234) => (<org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCoverImpl: void <init>(java.util.Set,double)>, this.<org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCoverImpl: double weight> = weight, 104)))]
Visited methods: 36
 Analysis results
----------------------------
 Number of conflicts: 2
 Results exported to out.txt
Error getting the previous content of the JSON file out.json
 JSON Results exported to out.json
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/jgrapht/a1da34c8f43a243454808270f60c9a223086a167/original-without-dependencies/jgrapht-ext-1.1.1-SNAPSHOT-uber.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,84100
Time to perform DFP Inter 0,84000
Depth limit: 5
CONFLICTS: []
Visited methods: 36
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/jgrapht/a1da34c8f43a243454808270f60c9a223086a167/original-without-dependencies/jgrapht-ext-1.1.1-SNAPSHOT-uber.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 1,16400
Time to perform PDG 0,76800
CONFLICTS: [List(Node(<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>,$stack24 = new java.util.TreeSet,197,SourceNode, path: (<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>, specialinvoke $stack24.<java.util.TreeSet: void <init>(java.util.Collection)>($stack25), 197)) => Node(<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>,workingGraph#6 = $stack24,197,SourceNode, path: (<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>, workingGraph#6 = $stack24, 197)) => Node(<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>,$stack63 = virtualinvoke workingGraph#6.<java.util.TreeSet: int size()>(),211,SimpleNode, path: (<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>, $stack63 = virtualinvoke workingGraph#6.<java.util.TreeSet: int size()>(), 211)) => Node(<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>,if $stack63 == $stack64 goto $stack27 = virtualinvoke workingGraph#6.<java.util.TreeSet: boolean isEmpty()>(),199,SimpleNode, path: ) => Node(<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>,$stack27 = virtualinvoke workingGraph#6.<java.util.TreeSet: boolean isEmpty()>(),202,SimpleNode, path: (<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>, $stack27 = virtualinvoke workingGraph#6.<java.util.TreeSet: boolean isEmpty()>(), 202)) => Node(<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>,if $stack27 != 0 goto $stack28 = new org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCoverImpl,202,SimpleNode, path: ) => Node(<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>,$stack30 = <org.jgrapht.alg.vertexcover.GreedyVCImpl: boolean $assertionsDisabled>,206,SimpleNode, path: ) => Node(<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>,if $stack30 != 0 goto $stack31 = e#11.<org.jgrapht.alg.vertexcover.util.RatioVertex: java.util.Map neighbors>,206,SimpleNode, path: ) => Node(<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>,$stack39 = (java.lang.Double) $stack38,229,SimpleNode, path: (<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>, $stack39 = (java.lang.Double) $stack38, 229)) => Node(<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>,$stack40 = virtualinvoke $stack39.<java.lang.Double: double doubleValue()>(),229,SimpleNode, path: (<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>, $stack40 = virtualinvoke $stack39.<java.lang.Double: double doubleValue()>(), 229)) => Node(<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>,weight = weight + $stack40,229,SimpleNode, path: (<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>, weight = weight + $stack40, 229)) => Node(<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>,specialinvoke $stack28.<org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCoverImpl: void <init>(java.util.Set,double)>(cover, weight),234,SinkNode, path: (<org.jgrapht.alg.vertexcover.GreedyVCImpl: org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCover getVertexCover(org.jgrapht.Graph,java.util.Map)>, specialinvoke $stack28.<org.jgrapht.alg.interfaces.MinimumVertexCoverAlgorithm$VertexCoverImpl: void <init>(java.util.Set,double)>(cover, weight), 234)))]
 Analysis results
----------------------------
 Number of conflicts: 1
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/jgrapht/a1da34c8f43a243454808270f60c9a223086a167/original-without-dependencies/jgrapht-ext-1.1.1-SNAPSHOT-uber.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,90000
Time to perform PDG 0,95200
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
