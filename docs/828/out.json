[
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>,clip = lim * 2.0,291,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, clip = lim * 2.0, 291)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>,$stack9 = clip,292,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack9 = clip, 292)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>,val = $stack12 + $stack9,293,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>,$stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0),299,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>,angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32),210,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>,$stack37 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angleOffset),213,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack37 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angleOffset), 213)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>,offsets = virtualinvoke offsets.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack37),213,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, offsets = virtualinvoke offsets.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack37), 213)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>,staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4),216,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)) SINK=>BASE: Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>,offsets = virtualinvoke offsets.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack37),213,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, offsets = virtualinvoke offsets.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack37), 213)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>,staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4),216,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "offsets = virtualinvoke offsets.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack37)",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
					"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
					"line": 213
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
	"line": 213
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
	"line": 216
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "clip = lim * 2.0",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
					"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
					"line": 291
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
	"line": 291
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
	"line": 292
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
	"line": 293
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
	"line": 299
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
	"line": 210
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
	"line": 213
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
	"line": 213
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
	"line": 216
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4)",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
					"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
					"line": 216
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>,$stack5 = new org.openpnp.model.Location,281,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>,offsets = virtualinvoke offsets.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack37),213,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, offsets = virtualinvoke offsets.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack37), 213)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>,offsets := @parameter2: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>,$stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(),224,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)) SINK=>BASE: Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>,$stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0),299,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>,angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32),210,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>,$stack37 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angleOffset),213,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack37 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angleOffset), 213)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>,offsets = virtualinvoke offsets.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack37),213,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, offsets = virtualinvoke offsets.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack37), 213)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>,offsets := @parameter2: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>,$stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(),224,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0)",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
					"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
					"line": 299
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
	"line": 299
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
	"line": 210
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
	"line": 213
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
	"line": 213
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>",
	"line": 224
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack5 = new org.openpnp.model.Location",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Location",
					"method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
					"line": 281
				},
				"stackTrace": [{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
	"line": 281
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
	"line": 213
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>",
	"line": -1
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>",
	"line": 224
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
					"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>",
					"line": 224
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.model.Part: java.lang.String getId()>,$stack1 = this.<org.openpnp.model.Part: java.lang.String id>,75,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, rect = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: org.opencv.core.RotatedRect processPipelineAndGetResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.spi.Camera,org.openpnp.model.Part,org.openpnp.spi.Nozzle)>(pipeline, camera, part, nozzle), 197) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.opencv.core.RotatedRect processPipelineAndGetResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.spi.Camera,org.openpnp.model.Part,org.openpnp.spi.Nozzle)>, $stack32 = virtualinvoke part.<org.openpnp.model.Part: java.lang.String getId()>(), 253)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.opencv.core.RotatedRect processPipelineAndGetResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.spi.Camera,org.openpnp.model.Part,org.openpnp.spi.Nozzle)>,$stack16 = virtualinvoke part.<org.openpnp.model.Part: java.lang.String getId()>(),265,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, rect = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: org.opencv.core.RotatedRect processPipelineAndGetResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.spi.Camera,org.openpnp.model.Part,org.openpnp.spi.Nozzle)>(pipeline, camera, part, nozzle), 197) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.opencv.core.RotatedRect processPipelineAndGetResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.spi.Camera,org.openpnp.model.Part,org.openpnp.spi.Nozzle)>, $stack16 = virtualinvoke part.<org.openpnp.model.Part: java.lang.String getId()>(), 265)) SINK=>BASE: Node(<org.openpnp.model.Part: java.lang.String getId()>,$stack1 = this.<org.openpnp.model.Part: java.lang.String id>,75,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, rect = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: org.opencv.core.RotatedRect processPipelineAndGetResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.spi.Camera,org.openpnp.model.Part,org.openpnp.spi.Nozzle)>(pipeline, camera, part, nozzle), 197) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.opencv.core.RotatedRect processPipelineAndGetResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.spi.Camera,org.openpnp.model.Part,org.openpnp.spi.Nozzle)>, $stack32 = virtualinvoke part.<org.openpnp.model.Part: java.lang.String getId()>(), 253)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.opencv.core.RotatedRect processPipelineAndGetResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.spi.Camera,org.openpnp.model.Part,org.openpnp.spi.Nozzle)>,$stack16 = virtualinvoke part.<org.openpnp.model.Part: java.lang.String getId()>(),265,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, rect = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: org.opencv.core.RotatedRect processPipelineAndGetResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.spi.Camera,org.openpnp.model.Part,org.openpnp.spi.Nozzle)>(pipeline, camera, part, nozzle), 197) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.opencv.core.RotatedRect processPipelineAndGetResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.spi.Camera,org.openpnp.model.Part,org.openpnp.spi.Nozzle)>, $stack16 = virtualinvoke part.<org.openpnp.model.Part: java.lang.String getId()>(), 265))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<org.openpnp.model.Part: java.lang.String id>",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Part",
					"method": "<org.openpnp.model.Part: java.lang.String getId()>",
					"line": 75
				},
				"stackTrace": [{
	"class": "org.openpnp.model.Part",
	"method": "<org.openpnp.model.Part: java.lang.String getId()>",
	"line": 75
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.opencv.core.RotatedRect processPipelineAndGetResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.spi.Camera,org.openpnp.model.Part,org.openpnp.spi.Nozzle)>",
	"line": 265
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.model.Part: java.lang.String id>",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Part",
					"method": "<org.openpnp.model.Part: java.lang.String getId()>",
					"line": 75
				},
				"stackTrace": [{
	"class": "org.openpnp.model.Part",
	"method": "<org.openpnp.model.Part: java.lang.String getId()>",
	"line": 75
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.opencv.core.RotatedRect processPipelineAndGetResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.spi.Camera,org.openpnp.model.Part,org.openpnp.spi.Nozzle)>",
	"line": 265
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack16 = virtualinvoke part.<org.openpnp.model.Part: java.lang.String getId()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
					"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.opencv.core.RotatedRect processPipelineAndGetResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.spi.Camera,org.openpnp.model.Part,org.openpnp.spi.Nozzle)>",
					"line": 265
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>,clip = lim * 2.0,291,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, clip = lim * 2.0, 291)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>,$stack9 = clip,292,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack9 = clip, 292)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>,val = $stack12 + $stack9,293,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>,$stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0),299,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>,angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32),210,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)) => Node(<java.lang.Double: java.lang.Double valueOf(double)>,l0 := @parameter0: double,-1,SimpleNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)) => Node(<java.lang.Double: void <init>(double)>,l1 := @parameter0: double,-1,SimpleNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99) => (<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)) => Node(<java.lang.Double: void <init>(double)>,l0.<java.lang.Double: double value> = l1,593,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99) => (<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519) => (<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)) => Node(<java.lang.Double: double doubleValue()>,$stack1 = l0.<java.lang.Double: double value>,716,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99) => (<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)) => Node(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>,$stack10 = virtualinvoke rotation.<java.lang.Double: double doubleValue()>(),282,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99) => (<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack10 = virtualinvoke rotation.<java.lang.Double: double doubleValue()>(), 282)) => Node(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>,rotation := @parameter4: double,-1,SimpleNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97) => (<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double rotation> = rotation, 64)) => Node(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>,this.<org.openpnp.model.Location: double rotation> = rotation,64,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97) => (<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double rotation> = rotation, 64)) => Node(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>,$stack10 = this.<org.openpnp.model.Location: double rotation>,281,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99) => (<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack10 = this.<org.openpnp.model.Location: double rotation>, 281)) => Node(<org.openpnp.model.Location: java.lang.String toString()>,$stack13 = this.<org.openpnp.model.Location: double rotation>,317,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224) => (<org.openpnp.model.Location: java.lang.String toString()>, $stack13 = this.<org.openpnp.model.Location: double rotation>, 317)) SINK=>BASE: Node(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>,this.<org.openpnp.model.Location: double rotation> = rotation,64,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97) => (<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double rotation> = rotation, 64)) => Node(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>,$stack10 = this.<org.openpnp.model.Location: double rotation>,281,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99) => (<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack10 = this.<org.openpnp.model.Location: double rotation>, 281)) => Node(<org.openpnp.model.Location: java.lang.String toString()>,$stack13 = this.<org.openpnp.model.Location: double rotation>,317,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224) => (<org.openpnp.model.Location: java.lang.String toString()>, $stack13 = this.<org.openpnp.model.Location: double rotation>, 317))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "this.<org.openpnp.model.Location: double rotation> = rotation",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Location",
					"method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
					"line": 64
				},
				"stackTrace": [{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
	"line": 64
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
	"line": 281
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: java.lang.String toString()>",
	"line": 317
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "clip = lim * 2.0",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
					"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
					"line": 291
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
	"line": 291
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
	"line": 292
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
	"line": 293
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
	"line": 299
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
	"line": 210
},{
	"class": "java.lang.Double",
	"method": "<java.lang.Double: java.lang.Double valueOf(double)>",
	"line": -1
},{
	"class": "java.lang.Double",
	"method": "<java.lang.Double: void <init>(double)>",
	"line": -1
},{
	"class": "java.lang.Double",
	"method": "<java.lang.Double: void <init>(double)>",
	"line": 593
},{
	"class": "java.lang.Double",
	"method": "<java.lang.Double: double doubleValue()>",
	"line": 716
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
	"line": 282
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
	"line": -1
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
	"line": 64
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
	"line": 281
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: java.lang.String toString()>",
	"line": 317
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack13 = this.<org.openpnp.model.Location: double rotation>",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Location",
					"method": "<org.openpnp.model.Location: java.lang.String toString()>",
					"line": 317
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>,$stack9 = clip,292,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack9 = clip, 292)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>,val = $stack12 + $stack9,293,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>,$stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0),299,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>,angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32),210,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>,$stack37 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angleOffset),213,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack37 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angleOffset), 213)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>,offsets = virtualinvoke offsets.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack37),213,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, offsets = virtualinvoke offsets.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack37), 213)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>,offsets := @parameter2: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)) => Node(<org.openpnp.model.Location: java.lang.String toString()>,this := @this: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)) => Node(<org.openpnp.model.Location: java.lang.String toString()>,$stack16 = this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit units>,318,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224) => (<org.openpnp.model.Location: java.lang.String toString()>, $stack16 = this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit units>, 318)) => Node(<org.openpnp.model.LengthUnit: java.lang.String getShortName()>,this := @this: org.openpnp.model.LengthUnit,-1,SimpleNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224) => (<org.openpnp.model.Location: java.lang.String toString()>, $stack18 = virtualinvoke $stack16.<org.openpnp.model.LengthUnit: java.lang.String getShortName()>(), 318)) => Node(<org.openpnp.model.LengthUnit: java.lang.String getShortName()>,$stack1 = this.<org.openpnp.model.LengthUnit: java.lang.String shortName>,41,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224) => (<org.openpnp.model.Location: java.lang.String toString()>, $stack18 = virtualinvoke $stack16.<org.openpnp.model.LengthUnit: java.lang.String getShortName()>(), 318)) SINK=>BASE: Node(<org.openpnp.model.Length: org.openpnp.model.LengthUnit getUnits()>,$stack1 = this.<org.openpnp.model.Length: org.openpnp.model.LengthUnit units>,83,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack9 = virtualinvoke $stack8.<org.openpnp.model.Length: org.openpnp.model.LengthUnit getUnits()>(), 95)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>,$stack9 = virtualinvoke $stack8.<org.openpnp.model.Length: org.openpnp.model.LengthUnit getUnits()>(),95,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack9 = virtualinvoke $stack8.<org.openpnp.model.Length: org.openpnp.model.LengthUnit getUnits()>(), 95)) => Node(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>,units := @parameter0: org.openpnp.model.LengthUnit,-1,SimpleNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)) => Node(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>,this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit units> = units,60,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97) => (<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit units> = units, 60)) => Node(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>,$stack6 = this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit units>,281,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99) => (<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack6 = this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit units>, 281)) => Node(<org.openpnp.model.Location: java.lang.String toString()>,$stack16 = this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit units>,318,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224) => (<org.openpnp.model.Location: java.lang.String toString()>, $stack16 = this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit units>, 318)) => Node(<org.openpnp.model.LengthUnit: java.lang.String getShortName()>,this := @this: org.openpnp.model.LengthUnit,-1,SimpleNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224) => (<org.openpnp.model.Location: java.lang.String toString()>, $stack18 = virtualinvoke $stack16.<org.openpnp.model.LengthUnit: java.lang.String getShortName()>(), 318)) => Node(<org.openpnp.model.LengthUnit: java.lang.String getShortName()>,$stack1 = this.<org.openpnp.model.LengthUnit: java.lang.String shortName>,41,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224) => (<org.openpnp.model.Location: java.lang.String toString()>, $stack18 = virtualinvoke $stack16.<org.openpnp.model.LengthUnit: java.lang.String getShortName()>(), 318))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<org.openpnp.model.Length: org.openpnp.model.LengthUnit units>",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Length",
					"method": "<org.openpnp.model.Length: org.openpnp.model.LengthUnit getUnits()>",
					"line": 83
				},
				"stackTrace": [{
	"class": "org.openpnp.model.Length",
	"method": "<org.openpnp.model.Length: org.openpnp.model.LengthUnit getUnits()>",
	"line": 83
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>",
	"line": 95
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
	"line": -1
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
	"line": 60
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
	"line": 281
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: java.lang.String toString()>",
	"line": 318
},{
	"class": "org.openpnp.model.LengthUnit",
	"method": "<org.openpnp.model.LengthUnit: java.lang.String getShortName()>",
	"line": -1
},{
	"class": "org.openpnp.model.LengthUnit",
	"method": "<org.openpnp.model.LengthUnit: java.lang.String getShortName()>",
	"line": 41
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack9 = clip",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
					"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
					"line": 292
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
	"line": 292
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
	"line": 293
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
	"line": 299
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
	"line": 210
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
	"line": 213
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
	"line": 213
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>",
	"line": -1
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: java.lang.String toString()>",
	"line": -1
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: java.lang.String toString()>",
	"line": 318
},{
	"class": "org.openpnp.model.LengthUnit",
	"method": "<org.openpnp.model.LengthUnit: java.lang.String getShortName()>",
	"line": -1
},{
	"class": "org.openpnp.model.LengthUnit",
	"method": "<org.openpnp.model.LengthUnit: java.lang.String getShortName()>",
	"line": 41
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack1 = this.<org.openpnp.model.LengthUnit: java.lang.String shortName>",
				"location": {
					"file": "",
					"class": "org.openpnp.model.LengthUnit",
					"method": "<org.openpnp.model.LengthUnit: java.lang.String getShortName()>",
					"line": 41
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>,$stack9 = clip,292,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack9 = clip, 292)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>,val = $stack12 + $stack9,293,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>,$stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0),299,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>,angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32),210,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>,$stack37 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angleOffset),213,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack37 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angleOffset), 213)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>,offsets = virtualinvoke offsets.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack37),213,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, offsets = virtualinvoke offsets.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack37), 213)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>,offsets := @parameter2: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)) => Node(<org.openpnp.model.Location: java.lang.String toString()>,this := @this: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)) => Node(<org.openpnp.model.Location: java.lang.String toString()>,$stack16 = this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit units>,318,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224) => (<org.openpnp.model.Location: java.lang.String toString()>, $stack16 = this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit units>, 318)) SINK=>BASE: Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>,$stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0),299,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>,angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32),210,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>,$stack37 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angleOffset),213,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack37 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angleOffset), 213)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>,offsets = virtualinvoke offsets.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack37),213,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, offsets = virtualinvoke offsets.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack37), 213)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>,offsets := @parameter2: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)) => Node(<org.openpnp.model.Location: java.lang.String toString()>,this := @this: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)) => Node(<org.openpnp.model.Location: java.lang.String toString()>,$stack16 = this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit units>,318,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224) => (<org.openpnp.model.Location: java.lang.String toString()>, $stack16 = this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit units>, 318))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0)",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
					"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
					"line": 299
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
	"line": 299
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
	"line": 210
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
	"line": 213
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
	"line": 213
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>",
	"line": -1
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: java.lang.String toString()>",
	"line": -1
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: java.lang.String toString()>",
	"line": 318
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack9 = clip",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
					"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
					"line": 292
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
	"line": 292
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
	"line": 293
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
	"line": 299
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
	"line": 210
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
	"line": 213
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
	"line": 213
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>",
	"line": -1
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: java.lang.String toString()>",
	"line": -1
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: java.lang.String toString()>",
	"line": 318
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack16 = this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit units>",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Location",
					"method": "<org.openpnp.model.Location: java.lang.String toString()>",
					"line": 318
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>,this.<org.openpnp.model.Location: double y> = y,62,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97) => (<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double y> = y, 62)) => Node(<org.openpnp.model.Location: java.lang.String toString()>,$stack7 = this.<org.openpnp.model.Location: double y>,317,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224) => (<org.openpnp.model.Location: java.lang.String toString()>, $stack7 = this.<org.openpnp.model.Location: double y>, 317)) => Node(<java.lang.Double: java.lang.Double valueOf(double)>,l0 := @parameter0: double,-1,SimpleNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)) => Node(<java.lang.Double: java.lang.Double valueOf(double)>,specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0),519,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99) => (<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)) SINK=>BASE: Node(<org.openpnp.model.Location: org.openpnp.model.LengthUnit getUnits()>,$stack1 = this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit units>,84,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94) => (<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit getUnits()>(), 205)) => Node(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>,$stack2 = virtualinvoke this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit getUnits()>(),205,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94) => (<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit getUnits()>(), 205)) => Node(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>,l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2),205,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94) => (<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2), 205)) => Node(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>,$stack13 = virtualinvoke l#2.<org.openpnp.model.Location: double getZ()>(),206,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94) => (<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, $stack13 = virtualinvoke l#2.<org.openpnp.model.Location: double getZ()>(), 206)) => Node(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>,$stack15 = $stack12 + $stack13,206,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94) => (<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, $stack15 = $stack12 + $stack13, 206)) => Node(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>,z := @parameter3: double,-1,SimpleNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97) => (<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double z> = z, 63)) => Node(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>,this.<org.openpnp.model.Location: double z> = z,63,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97) => (<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double z> = z, 63)) => Node(<org.openpnp.model.Location: java.lang.String toString()>,$stack10 = this.<org.openpnp.model.Location: double z>,317,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224) => (<org.openpnp.model.Location: java.lang.String toString()>, $stack10 = this.<org.openpnp.model.Location: double z>, 317)) => Node(<java.lang.Double: java.lang.Double valueOf(double)>,l0 := @parameter0: double,-1,SimpleNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)) => Node(<java.lang.Double: java.lang.Double valueOf(double)>,specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0),519,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99) => (<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit units>",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Location",
					"method": "<org.openpnp.model.Location: org.openpnp.model.LengthUnit getUnits()>",
					"line": 84
				},
				"stackTrace": [{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: org.openpnp.model.LengthUnit getUnits()>",
	"line": 84
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>",
	"line": 205
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>",
	"line": 205
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>",
	"line": 206
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>",
	"line": 206
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
	"line": -1
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
	"line": 63
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: java.lang.String toString()>",
	"line": 317
},{
	"class": "java.lang.Double",
	"method": "<java.lang.Double: java.lang.Double valueOf(double)>",
	"line": -1
},{
	"class": "java.lang.Double",
	"method": "<java.lang.Double: java.lang.Double valueOf(double)>",
	"line": 519
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "this.<org.openpnp.model.Location: double y> = y",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Location",
					"method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
					"line": 62
				},
				"stackTrace": [{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
	"line": 62
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: java.lang.String toString()>",
	"line": 317
},{
	"class": "java.lang.Double",
	"method": "<java.lang.Double: java.lang.Double valueOf(double)>",
	"line": -1
},{
	"class": "java.lang.Double",
	"method": "<java.lang.Double: java.lang.Double valueOf(double)>",
	"line": 519
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0)",
				"location": {
					"file": "",
					"class": "java.lang.Double",
					"method": "<java.lang.Double: java.lang.Double valueOf(double)>",
					"line": 519
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>,$stack5 = new org.openpnp.model.Location,281,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>,offsets = virtualinvoke offsets.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack37),213,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, offsets = virtualinvoke offsets.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack37), 213)) => Node(<org.openpnp.spi.PartAlignment$PartAlignmentOffset: void <init>(org.openpnp.model.Location,java.lang.Boolean)>,loc := @parameter0: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, specialinvoke $stack40.<org.openpnp.spi.PartAlignment$PartAlignmentOffset: void <init>(org.openpnp.model.Location,java.lang.Boolean)>(offsets, $stack41), 218)) => Node(<org.openpnp.spi.PartAlignment$PartAlignmentOffset: void <init>(org.openpnp.model.Location,java.lang.Boolean)>,this.<org.openpnp.spi.PartAlignment$PartAlignmentOffset: org.openpnp.model.Location location> = loc,34,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, specialinvoke $stack40.<org.openpnp.spi.PartAlignment$PartAlignmentOffset: void <init>(org.openpnp.model.Location,java.lang.Boolean)>(offsets, $stack41), 218) => (<org.openpnp.spi.PartAlignment$PartAlignmentOffset: void <init>(org.openpnp.model.Location,java.lang.Boolean)>, this.<org.openpnp.spi.PartAlignment$PartAlignmentOffset: org.openpnp.model.Location location> = loc, 34)) SINK=>BASE: Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>,angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32),210,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>,$stack37 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angleOffset),213,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack37 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angleOffset), 213)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>,offsets = virtualinvoke offsets.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack37),213,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, offsets = virtualinvoke offsets.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack37), 213)) => Node(<org.openpnp.spi.PartAlignment$PartAlignmentOffset: void <init>(org.openpnp.model.Location,java.lang.Boolean)>,loc := @parameter0: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, specialinvoke $stack40.<org.openpnp.spi.PartAlignment$PartAlignmentOffset: void <init>(org.openpnp.model.Location,java.lang.Boolean)>(offsets, $stack41), 218)) => Node(<org.openpnp.spi.PartAlignment$PartAlignmentOffset: void <init>(org.openpnp.model.Location,java.lang.Boolean)>,this.<org.openpnp.spi.PartAlignment$PartAlignmentOffset: org.openpnp.model.Location location> = loc,34,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, specialinvoke $stack40.<org.openpnp.spi.PartAlignment$PartAlignmentOffset: void <init>(org.openpnp.model.Location,java.lang.Boolean)>(offsets, $stack41), 218) => (<org.openpnp.spi.PartAlignment$PartAlignmentOffset: void <init>(org.openpnp.model.Location,java.lang.Boolean)>, this.<org.openpnp.spi.PartAlignment$PartAlignmentOffset: org.openpnp.model.Location location> = loc, 34))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32)",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
					"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
					"line": 210
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
	"line": 210
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
	"line": 213
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
	"line": 213
},{
	"class": "org.openpnp.spi.PartAlignment$PartAlignmentOffset",
	"method": "<org.openpnp.spi.PartAlignment$PartAlignmentOffset: void <init>(org.openpnp.model.Location,java.lang.Boolean)>",
	"line": -1
},{
	"class": "org.openpnp.spi.PartAlignment$PartAlignmentOffset",
	"method": "<org.openpnp.spi.PartAlignment$PartAlignmentOffset: void <init>(org.openpnp.model.Location,java.lang.Boolean)>",
	"line": 34
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack5 = new org.openpnp.model.Location",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Location",
					"method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
					"line": 281
				},
				"stackTrace": [{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
	"line": 281
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
	"line": 213
},{
	"class": "org.openpnp.spi.PartAlignment$PartAlignmentOffset",
	"method": "<org.openpnp.spi.PartAlignment$PartAlignmentOffset: void <init>(org.openpnp.model.Location,java.lang.Boolean)>",
	"line": -1
},{
	"class": "org.openpnp.spi.PartAlignment$PartAlignmentOffset",
	"method": "<org.openpnp.spi.PartAlignment$PartAlignmentOffset: void <init>(org.openpnp.model.Location,java.lang.Boolean)>",
	"line": 34
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "this.<org.openpnp.spi.PartAlignment$PartAlignmentOffset: org.openpnp.model.Location location> = loc",
				"location": {
					"file": "",
					"class": "org.openpnp.spi.PartAlignment$PartAlignmentOffset",
					"method": "<org.openpnp.spi.PartAlignment$PartAlignmentOffset: void <init>(org.openpnp.model.Location,java.lang.Boolean)>",
					"line": 34
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>,clip = lim * 2.0,291,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, clip = lim * 2.0, 291)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>,$stack9 = clip,292,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack9 = clip, 292)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>,val = $stack12 + $stack9,293,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>,$stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0),299,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>,angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32),210,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)) => Node(<java.lang.Double: java.lang.Double valueOf(double)>,l0 := @parameter0: double,-1,SimpleNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)) => Node(<java.lang.Double: void <init>(double)>,l1 := @parameter0: double,-1,SimpleNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99) => (<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)) => Node(<java.lang.Double: void <init>(double)>,l0.<java.lang.Double: double value> = l1,593,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99) => (<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519) => (<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)) => Node(<java.lang.Double: double doubleValue()>,$stack1 = l0.<java.lang.Double: double value>,716,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99) => (<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)) SINK=>BASE: Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>,$stack12 = val,292,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack12 = val, 292)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>,val = $stack12 + $stack9,293,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>,$stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0),299,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>,angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32),210,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>,$stack37 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angleOffset),213,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack37 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angleOffset), 213)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>,offsets = virtualinvoke offsets.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack37),213,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, offsets = virtualinvoke offsets.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack37), 213)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>,offsets := @parameter2: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)) => Node(<org.openpnp.model.Location: java.lang.String toString()>,this := @this: org.openpnp.model.Location,-1,SimpleNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)) => Node(<org.openpnp.model.Location: java.lang.String toString()>,$stack10 = this.<org.openpnp.model.Location: double z>,317,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224) => (<org.openpnp.model.Location: java.lang.String toString()>, $stack10 = this.<org.openpnp.model.Location: double z>, 317)) => Node(<java.lang.Double: java.lang.Double valueOf(double)>,l0 := @parameter0: double,-1,SimpleNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)) => Node(<java.lang.Double: void <init>(double)>,l1 := @parameter0: double,-1,SimpleNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99) => (<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)) => Node(<java.lang.Double: void <init>(double)>,l0.<java.lang.Double: double value> = l1,593,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99) => (<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519) => (<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)) => Node(<java.lang.Double: double doubleValue()>,$stack1 = l0.<java.lang.Double: double value>,716,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99) => (<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack12 = val",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
					"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
					"line": 292
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
	"line": 292
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
	"line": 293
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
	"line": 299
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
	"line": 210
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
	"line": 213
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
	"line": 213
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>",
	"line": -1
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: java.lang.String toString()>",
	"line": -1
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: java.lang.String toString()>",
	"line": 317
},{
	"class": "java.lang.Double",
	"method": "<java.lang.Double: java.lang.Double valueOf(double)>",
	"line": -1
},{
	"class": "java.lang.Double",
	"method": "<java.lang.Double: void <init>(double)>",
	"line": -1
},{
	"class": "java.lang.Double",
	"method": "<java.lang.Double: void <init>(double)>",
	"line": 593
},{
	"class": "java.lang.Double",
	"method": "<java.lang.Double: double doubleValue()>",
	"line": 716
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "clip = lim * 2.0",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
					"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
					"line": 291
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
	"line": 291
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
	"line": 292
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
	"line": 293
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
	"line": 299
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
	"line": 210
},{
	"class": "java.lang.Double",
	"method": "<java.lang.Double: java.lang.Double valueOf(double)>",
	"line": -1
},{
	"class": "java.lang.Double",
	"method": "<java.lang.Double: void <init>(double)>",
	"line": -1
},{
	"class": "java.lang.Double",
	"method": "<java.lang.Double: void <init>(double)>",
	"line": 593
},{
	"class": "java.lang.Double",
	"method": "<java.lang.Double: double doubleValue()>",
	"line": 716
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack1 = l0.<java.lang.Double: double value>",
				"location": {
					"file": "",
					"class": "java.lang.Double",
					"method": "<java.lang.Double: double doubleValue()>",
					"line": 716
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>,offsets = virtualinvoke offsets.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack37),213,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, offsets = virtualinvoke offsets.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack37), 213)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>,specialinvoke $stack40.<org.openpnp.spi.PartAlignment$PartAlignmentOffset: void <init>(org.openpnp.model.Location,java.lang.Boolean)>(offsets, $stack41),218,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, specialinvoke $stack40.<org.openpnp.spi.PartAlignment$PartAlignmentOffset: void <init>(org.openpnp.model.Location,java.lang.Boolean)>(offsets, $stack41), 218)) SINK=>BASE: Node(<org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>,$stack3 = neg angle,108,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>,$stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31),210,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>,angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32),210,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>,$stack37 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angleOffset),213,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack37 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angleOffset), 213)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>,offsets = virtualinvoke offsets.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack37),213,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, offsets = virtualinvoke offsets.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack37), 213)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>,specialinvoke $stack40.<org.openpnp.spi.PartAlignment$PartAlignmentOffset: void <init>(org.openpnp.model.Location,java.lang.Boolean)>(offsets, $stack41),218,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, specialinvoke $stack40.<org.openpnp.spi.PartAlignment$PartAlignmentOffset: void <init>(org.openpnp.model.Location,java.lang.Boolean)>(offsets, $stack41), 218))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack3 = neg angle",
				"location": {
					"file": "",
					"class": "org.openpnp.util.VisionUtils",
					"method": "<org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>",
					"line": 108
				},
				"stackTrace": [{
	"class": "org.openpnp.util.VisionUtils",
	"method": "<org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>",
	"line": 108
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
	"line": 210
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
	"line": 210
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
	"line": 213
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
	"line": 213
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
	"line": 218
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "offsets = virtualinvoke offsets.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack37)",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
					"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
					"line": 213
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
	"line": 213
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
	"line": 218
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke $stack40.<org.openpnp.spi.PartAlignment$PartAlignmentOffset: void <init>(org.openpnp.model.Location,java.lang.Boolean)>(offsets, $stack41)",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
					"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
					"line": 218
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.model.Part: java.lang.String getId()>,$stack1 = this.<org.openpnp.model.Part: java.lang.String id>,75,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, rect = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: org.opencv.core.RotatedRect processPipelineAndGetResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.spi.Camera,org.openpnp.model.Part,org.openpnp.spi.Nozzle)>(pipeline, camera, part, nozzle), 197) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.opencv.core.RotatedRect processPipelineAndGetResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.spi.Camera,org.openpnp.model.Part,org.openpnp.spi.Nozzle)>, $stack32 = virtualinvoke part.<org.openpnp.model.Part: java.lang.String getId()>(), 253)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.opencv.core.RotatedRect processPipelineAndGetResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.spi.Camera,org.openpnp.model.Part,org.openpnp.spi.Nozzle)>,$stack26 = virtualinvoke part.<org.openpnp.model.Part: java.lang.String getId()>(),259,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, rect = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: org.opencv.core.RotatedRect processPipelineAndGetResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.spi.Camera,org.openpnp.model.Part,org.openpnp.spi.Nozzle)>(pipeline, camera, part, nozzle), 197) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.opencv.core.RotatedRect processPipelineAndGetResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.spi.Camera,org.openpnp.model.Part,org.openpnp.spi.Nozzle)>, $stack26 = virtualinvoke part.<org.openpnp.model.Part: java.lang.String getId()>(), 259)) SINK=>BASE: Node(<org.openpnp.model.Part: java.lang.String getId()>,$stack1 = this.<org.openpnp.model.Part: java.lang.String id>,75,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, rect = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: org.opencv.core.RotatedRect processPipelineAndGetResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.spi.Camera,org.openpnp.model.Part,org.openpnp.spi.Nozzle)>(pipeline, camera, part, nozzle), 197) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.opencv.core.RotatedRect processPipelineAndGetResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.spi.Camera,org.openpnp.model.Part,org.openpnp.spi.Nozzle)>, $stack32 = virtualinvoke part.<org.openpnp.model.Part: java.lang.String getId()>(), 253)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.opencv.core.RotatedRect processPipelineAndGetResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.spi.Camera,org.openpnp.model.Part,org.openpnp.spi.Nozzle)>,$stack26 = virtualinvoke part.<org.openpnp.model.Part: java.lang.String getId()>(),259,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, rect = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: org.opencv.core.RotatedRect processPipelineAndGetResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.spi.Camera,org.openpnp.model.Part,org.openpnp.spi.Nozzle)>(pipeline, camera, part, nozzle), 197) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.opencv.core.RotatedRect processPipelineAndGetResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.spi.Camera,org.openpnp.model.Part,org.openpnp.spi.Nozzle)>, $stack26 = virtualinvoke part.<org.openpnp.model.Part: java.lang.String getId()>(), 259))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<org.openpnp.model.Part: java.lang.String id>",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Part",
					"method": "<org.openpnp.model.Part: java.lang.String getId()>",
					"line": 75
				},
				"stackTrace": [{
	"class": "org.openpnp.model.Part",
	"method": "<org.openpnp.model.Part: java.lang.String getId()>",
	"line": 75
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.opencv.core.RotatedRect processPipelineAndGetResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.spi.Camera,org.openpnp.model.Part,org.openpnp.spi.Nozzle)>",
	"line": 259
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.model.Part: java.lang.String id>",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Part",
					"method": "<org.openpnp.model.Part: java.lang.String getId()>",
					"line": 75
				},
				"stackTrace": [{
	"class": "org.openpnp.model.Part",
	"method": "<org.openpnp.model.Part: java.lang.String getId()>",
	"line": 75
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.opencv.core.RotatedRect processPipelineAndGetResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.spi.Camera,org.openpnp.model.Part,org.openpnp.spi.Nozzle)>",
	"line": 259
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack26 = virtualinvoke part.<org.openpnp.model.Part: java.lang.String getId()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
					"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.opencv.core.RotatedRect processPipelineAndGetResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.spi.Camera,org.openpnp.model.Part,org.openpnp.spi.Nozzle)>",
					"line": 259
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>,$stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0),299,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>,angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32),210,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)) => Node(<java.lang.Double: java.lang.Double valueOf(double)>,l0 := @parameter0: double,-1,SimpleNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)) => Node(<java.lang.Double: void <init>(double)>,l1 := @parameter0: double,-1,SimpleNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99) => (<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)) => Node(<java.lang.Double: void <init>(double)>,l0.<java.lang.Double: double value> = l1,593,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99) => (<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519) => (<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)) SINK=>BASE: Node(<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>,$stack8 = virtualinvoke $stack7.<org.openpnp.model.Length: double getValue()>(),89,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94) => (<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2), 205) => (<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack8 = virtualinvoke $stack7.<org.openpnp.model.Length: double getValue()>(), 89)) => Node(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>,x := @parameter1: double,-1,SimpleNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97) => (<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double x> = x, 61)) => Node(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>,this.<org.openpnp.model.Location: double x> = x,61,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97) => (<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double x> = x, 61)) => Node(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>,$stack21 = this.<org.openpnp.model.Location: double x>,281,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99) => (<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack21 = this.<org.openpnp.model.Location: double x>, 281)) => Node(<org.openpnp.model.Location: java.lang.String toString()>,$stack2 = this.<org.openpnp.model.Location: double x>,317,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224) => (<org.openpnp.model.Location: java.lang.String toString()>, $stack2 = this.<org.openpnp.model.Location: double x>, 317)) => Node(<java.lang.Double: java.lang.Double valueOf(double)>,l0 := @parameter0: double,-1,SimpleNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)) => Node(<java.lang.Double: void <init>(double)>,l1 := @parameter0: double,-1,SimpleNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99) => (<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)) => Node(<java.lang.Double: void <init>(double)>,l0.<java.lang.Double: double value> = l1,593,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99) => (<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519) => (<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack8 = virtualinvoke $stack7.<org.openpnp.model.Length: double getValue()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Location",
					"method": "<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>",
					"line": 89
				},
				"stackTrace": [{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>",
	"line": 89
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
	"line": -1
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
	"line": 61
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
	"line": 281
},{
	"class": "org.openpnp.model.Location",
	"method": "<org.openpnp.model.Location: java.lang.String toString()>",
	"line": 317
},{
	"class": "java.lang.Double",
	"method": "<java.lang.Double: java.lang.Double valueOf(double)>",
	"line": -1
},{
	"class": "java.lang.Double",
	"method": "<java.lang.Double: void <init>(double)>",
	"line": -1
},{
	"class": "java.lang.Double",
	"method": "<java.lang.Double: void <init>(double)>",
	"line": 593
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0)",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
					"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
					"line": 299
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
	"line": 299
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
	"line": 210
},{
	"class": "java.lang.Double",
	"method": "<java.lang.Double: java.lang.Double valueOf(double)>",
	"line": -1
},{
	"class": "java.lang.Double",
	"method": "<java.lang.Double: void <init>(double)>",
	"line": -1
},{
	"class": "java.lang.Double",
	"method": "<java.lang.Double: void <init>(double)>",
	"line": 593
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l0.<java.lang.Double: double value> = l1",
				"location": {
					"file": "",
					"class": "java.lang.Double",
					"method": "<java.lang.Double: void <init>(double)>",
					"line": 593
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.openpnp.model.Part: java.lang.String getId()>,$stack1 = this.<org.openpnp.model.Part: java.lang.String id>,75,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, rect = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: org.opencv.core.RotatedRect processPipelineAndGetResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.spi.Camera,org.openpnp.model.Part,org.openpnp.spi.Nozzle)>(pipeline, camera, part, nozzle), 197) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.opencv.core.RotatedRect processPipelineAndGetResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.spi.Camera,org.openpnp.model.Part,org.openpnp.spi.Nozzle)>, $stack32 = virtualinvoke part.<org.openpnp.model.Part: java.lang.String getId()>(), 253)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.opencv.core.RotatedRect processPipelineAndGetResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.spi.Camera,org.openpnp.model.Part,org.openpnp.spi.Nozzle)>,$stack32 = virtualinvoke part.<org.openpnp.model.Part: java.lang.String getId()>(),253,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, rect = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: org.opencv.core.RotatedRect processPipelineAndGetResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.spi.Camera,org.openpnp.model.Part,org.openpnp.spi.Nozzle)>(pipeline, camera, part, nozzle), 197) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.opencv.core.RotatedRect processPipelineAndGetResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.spi.Camera,org.openpnp.model.Part,org.openpnp.spi.Nozzle)>, $stack32 = virtualinvoke part.<org.openpnp.model.Part: java.lang.String getId()>(), 253)) SINK=>BASE: Node(<org.openpnp.model.Part: java.lang.String getId()>,$stack1 = this.<org.openpnp.model.Part: java.lang.String id>,75,SourceNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, rect = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: org.opencv.core.RotatedRect processPipelineAndGetResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.spi.Camera,org.openpnp.model.Part,org.openpnp.spi.Nozzle)>(pipeline, camera, part, nozzle), 197) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.opencv.core.RotatedRect processPipelineAndGetResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.spi.Camera,org.openpnp.model.Part,org.openpnp.spi.Nozzle)>, $stack32 = virtualinvoke part.<org.openpnp.model.Part: java.lang.String getId()>(), 253)) => Node(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.opencv.core.RotatedRect processPipelineAndGetResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.spi.Camera,org.openpnp.model.Part,org.openpnp.spi.Nozzle)>,$stack32 = virtualinvoke part.<org.openpnp.model.Part: java.lang.String getId()>(),253,SinkNode, path: (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, rect = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: org.opencv.core.RotatedRect processPipelineAndGetResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.spi.Camera,org.openpnp.model.Part,org.openpnp.spi.Nozzle)>(pipeline, camera, part, nozzle), 197) => (<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.opencv.core.RotatedRect processPipelineAndGetResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.spi.Camera,org.openpnp.model.Part,org.openpnp.spi.Nozzle)>, $stack32 = virtualinvoke part.<org.openpnp.model.Part: java.lang.String getId()>(), 253))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<org.openpnp.model.Part: java.lang.String id>",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Part",
					"method": "<org.openpnp.model.Part: java.lang.String getId()>",
					"line": 75
				},
				"stackTrace": [{
	"class": "org.openpnp.model.Part",
	"method": "<org.openpnp.model.Part: java.lang.String getId()>",
	"line": 75
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.opencv.core.RotatedRect processPipelineAndGetResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.spi.Camera,org.openpnp.model.Part,org.openpnp.spi.Nozzle)>",
	"line": 253
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = this.<org.openpnp.model.Part: java.lang.String id>",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Part",
					"method": "<org.openpnp.model.Part: java.lang.String getId()>",
					"line": 75
				},
				"stackTrace": [{
	"class": "org.openpnp.model.Part",
	"method": "<org.openpnp.model.Part: java.lang.String getId()>",
	"line": 75
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.opencv.core.RotatedRect processPipelineAndGetResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.spi.Camera,org.openpnp.model.Part,org.openpnp.spi.Nozzle)>",
	"line": 253
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack32 = virtualinvoke part.<org.openpnp.model.Part: java.lang.String getId()>()",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
					"method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.opencv.core.RotatedRect processPipelineAndGetResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.spi.Camera,org.openpnp.model.Part,org.openpnp.spi.Nozzle)>",
					"line": 253
				}
			}
		]
	}
}

,

{
	"type": "OAINTER",
	"label": "OA conflict",
	"body": {
		"description": "val - val",
		"interference": [
			{
				"type": "declaration",
				"branch": "L",
				"text": "val = $stack12 + $stack9",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
					"method": "angleNorm",
					"line": 293
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "findOffsetsPostRotate",
	"line": 210
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "angleNorm",
	"line": 299
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "angleNorm",
	"line": 293
}]
			},
			{
				"type": "override",
				"branch": "R",
				"text": "val = $stack12 + $stack9",
				"location": {
					"file": "",
					"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
					"method": "angleNorm",
					"line": 293
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "findOffsetsPostRotate",
	"line": 210
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "angleNorm",
	"line": 299
},{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "angleNorm",
	"line": 293
}]
			}
		]
	}
},
{
	"type": "OAINTER",
	"label": "OA conflict",
	"body": {
		"description": "<java.lang.Double: java.lang.Class TYPE> - <java.lang.Double: java.lang.Class TYPE>",
		"interference": [
			{
				"type": "declaration",
				"branch": "L",
				"text": "<java.lang.Double: java.lang.Class TYPE> = $stack0",
				"location": {
					"file": "",
					"class": "java.lang.Double",
					"method": "<clinit>",
					"line": 139
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "findOffsetsPostRotate",
	"line": 194
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "moveToLocationAtSafeZ",
	"line": 27
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "moveToLocationAtSafeZ",
	"line": 22
},{
	"class": "java.lang.Double",
	"method": "<clinit>",
	"line": 139
}]
			},
			{
				"type": "override",
				"branch": "R",
				"text": "<java.lang.Double: java.lang.Class TYPE> = $stack0",
				"location": {
					"file": "",
					"class": "java.lang.Double",
					"method": "<clinit>",
					"line": 139
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "findOffsetsPostRotate",
	"line": 194
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "moveToLocationAtSafeZ",
	"line": 27
},{
	"class": "org.openpnp.util.MovableUtils",
	"method": "moveToLocationAtSafeZ",
	"line": 22
},{
	"class": "java.lang.Double",
	"method": "<clinit>",
	"line": 139
}]
			}
		]
	}
},
{
	"type": "OAINTER",
	"label": "OA conflict",
	"body": {
		"description": "this.<org.openpnp.model.Location: double x> - this.<org.openpnp.model.Location: double x>",
		"interference": [
			{
				"type": "declaration",
				"branch": "L",
				"text": "this.<org.openpnp.model.Location: double x> = x",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Location",
					"method": "<init>",
					"line": 61
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "findOffsetsPostRotate",
	"line": 213
},{
	"class": "org.openpnp.model.Location",
	"method": "derive",
	"line": 282
},{
	"class": "org.openpnp.model.Location",
	"method": "<init>",
	"line": 61
}]
			},
			{
				"type": "override",
				"branch": "R",
				"text": "this.<org.openpnp.model.Location: double x> = x",
				"location": {
					"file": "",
					"class": "org.openpnp.model.Location",
					"method": "<init>",
					"line": 61
				},
				"stackTrace": [{
	"class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
	"method": "findOffsetsPostRotate",
	"line": 213
},{
	"class": "org.openpnp.model.Location",
	"method": "derive",
	"line": 282
},{
	"class": "org.openpnp.model.Location",
	"method": "<init>",
	"line": 61
}]
			}
		]
	}
}

,

{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack31 = rect.<org.opencv.core.RotatedRect: double angle>",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "210"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack31 = rect.<org.opencv.core.RotatedRect: double angle>, 210)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "angle := @parameter1: double",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = neg angle",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>",
  "line": "108"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "210"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "val := @parameter0: double",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "val := @parameter0: double",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return val",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "295"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Location: double z> = z",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "63"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double z> = z, 63)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = this.<org.openpnp.model.Location: double z>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "281"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack13 = this.<org.openpnp.model.Location: double z>, 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = $stack13",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = $stack13, -1)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = new org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "281"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>",
  "line": "99"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "192"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "location := @parameter1: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "27"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = new org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "281"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, $stack8, null)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "22"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack9 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, $stack8, null), 22)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double)>($stack9, speed)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "22"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double)>($stack9, speed), 22)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack21 = this.<org.openpnp.model.Location: double x>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "281"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack21 = this.<org.openpnp.model.Location: double x>, 281)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = this.<org.openpnp.model.Location: double x>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)","(<org.openpnp.model.Location: java.lang.String toString()>, $stack2 = this.<org.openpnp.model.Location: double x>, 317)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack31 = rect.<org.opencv.core.RotatedRect: double angle>",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "210"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack31 = rect.<org.opencv.core.RotatedRect: double angle>, 210)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "angle := @parameter1: double",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = neg angle",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>",
  "line": "108"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack3",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>",
  "line": "108"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Location: double rotation> = rotation",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "64"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double rotation> = rotation, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.model.Location: double rotation>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "281"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack10 = this.<org.openpnp.model.Location: double rotation>, 281)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack8 = $stack17",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack8 = $stack17, -1)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit units> = units",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "60"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit units> = units, 60)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit units>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "281"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack6 = this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit units>, 281)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, $stack8, null)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "22"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack9 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, $stack8, null), 22)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double)>($stack9, speed)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "22"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double)>($stack9, speed), 22)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "clip = lim * 2.0",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "291"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, clip = lim * 2.0, 291)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = neg clip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack9 = neg clip, 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "val = $stack12 + $stack9",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return val",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "295"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "clip = lim * 2.0",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "291"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, clip = lim * 2.0, 291)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = neg clip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack9 = neg clip, 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "val = $stack12 + $stack9",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
  "line": "299"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack2",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
  "line": "299"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: double getSpeed()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "27"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: double getSpeed()>(), 27)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "speed := @parameter2: double",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke head.<org.openpnp.spi.Head: void moveToSafeZ(double)>(speed)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "21"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, interfaceinvoke head.<org.openpnp.spi.Head: void moveToSafeZ(double)>(speed), 21)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: double getSpeed()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "27"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: double getSpeed()>(), 27)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "speed := @parameter2: double",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double)>($stack9, speed)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "22"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double)>($stack9, speed), 22)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Location: double x> = x",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "61"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double x> = x, 61)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = this.<org.openpnp.model.Location: double x>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "281"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack21 = this.<org.openpnp.model.Location: double x>, 281)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = this.<org.openpnp.model.Location: double x>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)","(<org.openpnp.model.Location: java.lang.String toString()>, $stack2 = this.<org.openpnp.model.Location: double x>, 317)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "val = $stack12 + $stack9",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
  "line": "299"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack2",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
  "line": "299"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = val",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack12 = val, 292)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "val = $stack12 + $stack9",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = val cmpg 0.0",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack8 = val cmpg 0.0, 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack8 >= 0 goto $stack9 = neg clip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = neg angle",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>",
  "line": "108"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack3",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>",
  "line": "108"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = neg angle",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>",
  "line": "108"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "210"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "val := @parameter0: double",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "val := @parameter0: double",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = val",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack12 = val, 292)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "val = $stack12 + $stack9",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = staticinvoke <java.lang.Math: double abs(double)>(val)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack6 = staticinvoke <java.lang.Math: double abs(double)>(val), 292)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = $stack6 cmpl lim",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack7 = $stack6 cmpl lim, 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack7 <= 0 goto return val",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "clip = lim * 2.0",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "291"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, clip = lim * 2.0, 291)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = neg clip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack9 = neg clip, 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "val = $stack12 + $stack9",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
  "line": "299"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "210"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack37 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angleOffset)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "213"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack37 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angleOffset), 213)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "offsets = virtualinvoke offsets.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack37)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "213"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, offsets = virtualinvoke offsets.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack37), 213)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "offsets := @parameter2: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack13 = this.<org.openpnp.model.Location: double rotation>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)","(<org.openpnp.model.Location: java.lang.String toString()>, $stack13 = this.<org.openpnp.model.Location: double rotation>, 317)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack37 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angleOffset)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "213"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack37 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angleOffset), 213)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "offsets = virtualinvoke offsets.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack37)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "213"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, offsets = virtualinvoke offsets.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack37), 213)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "offsets := @parameter2: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack13 = this.<org.openpnp.model.Location: double rotation>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)","(<org.openpnp.model.Location: java.lang.String toString()>, $stack13 = this.<org.openpnp.model.Location: double rotation>, 317)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack6 = staticinvoke <java.lang.Math: double abs(double)>(val)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack6 = staticinvoke <java.lang.Math: double abs(double)>(val), 292)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = $stack6 cmpl lim",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack7 = $stack6 cmpl lim, 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack7 <= 0 goto return val",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = new org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "281"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>",
  "line": "99"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "192"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "head = interfaceinvoke hm.<org.openpnp.spi.HeadMountable: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "20"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, head = interfaceinvoke hm.<org.openpnp.spi.HeadMountable: org.openpnp.spi.Head getHead()>(), 20)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke head.<org.openpnp.spi.Head: void moveToSafeZ(double)>(speed)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "21"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, interfaceinvoke head.<org.openpnp.spi.Head: void moveToSafeZ(double)>(speed), 21)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = val",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack12 = val, 292)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "val = $stack12 + $stack9",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return val",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "295"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = val",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack12 = val, 292)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "val = $stack12 + $stack9",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
  "line": "299"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack2",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
  "line": "299"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
  "line": "299"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack2",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
  "line": "299"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = new org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "281"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.Object: void <init>()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "59"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, specialinvoke this.<java.lang.Object: void <init>()>(), 59)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "val = $stack12 + $stack9",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return val",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "295"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Part: java.lang.String id>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Part",
  "method": "<org.openpnp.model.Part: java.lang.String getId()>",
  "line": "75"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, rect = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: org.opencv.core.RotatedRect processPipelineAndGetResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.spi.Camera,org.openpnp.model.Part,org.openpnp.spi.Nozzle)>(pipeline, camera, part, nozzle), 197)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.opencv.core.RotatedRect processPipelineAndGetResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.spi.Camera,org.openpnp.model.Part,org.openpnp.spi.Nozzle)>, $stack32 = virtualinvoke part.<org.openpnp.model.Part: java.lang.String getId()>(), 253)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.openpnp.model.Part",
  "method": "<org.openpnp.model.Part: java.lang.String getId()>",
  "line": "75"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "val = $stack12 + $stack9",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = val cmpg 0.0",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack8 = val cmpg 0.0, 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack8 >= 0 goto $stack9 = neg clip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack31 = rect.<org.opencv.core.RotatedRect: double angle>",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "210"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack31 = rect.<org.opencv.core.RotatedRect: double angle>, 210)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "angle := @parameter1: double",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = neg angle",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>",
  "line": "108"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "210"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "val := @parameter0: double",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "val := @parameter0: double",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = val",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack12 = val, 292)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "val = $stack12 + $stack9",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = val cmpg 0.0",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack8 = val cmpg 0.0, 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack8 >= 0 goto $stack9 = neg clip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = neg angle",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>",
  "line": "108"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "210"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "val := @parameter0: double",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "val := @parameter0: double",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return val",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "295"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "clip = lim * 2.0",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "291"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, clip = lim * 2.0, 291)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = neg clip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack9 = neg clip, 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "val = $stack12 + $stack9",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = staticinvoke <java.lang.Math: double abs(double)>(val)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack6 = staticinvoke <java.lang.Math: double abs(double)>(val), 292)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = $stack6 cmpl lim",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack7 = $stack6 cmpl lim, 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack7 <= 0 goto return val",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = neg angle",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>",
  "line": "108"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "210"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "val := @parameter0: double",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "val := @parameter0: double",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = val",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack12 = val, 292)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "val = $stack12 + $stack9",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = val cmpg 0.0",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack8 = val cmpg 0.0, 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack8 >= 0 goto $stack9 = neg clip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = new org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "281"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>",
  "line": "99"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "192"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "location := @parameter1: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "location := @parameter1: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double)>(location, speed)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "23"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double)>(location, speed), 23)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Location: double y> = y",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "62"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double y> = y, 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack7 = this.<org.openpnp.model.Location: double y>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)","(<org.openpnp.model.Location: java.lang.String toString()>, $stack7 = this.<org.openpnp.model.Location: double y>, 317)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "val = $stack12 + $stack9",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
  "line": "299"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "210"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack37 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angleOffset)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "213"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack37 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angleOffset), 213)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "offsets = virtualinvoke offsets.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack37)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "213"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, offsets = virtualinvoke offsets.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack37), 213)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "offsets := @parameter2: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack13 = this.<org.openpnp.model.Location: double rotation>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)","(<org.openpnp.model.Location: java.lang.String toString()>, $stack13 = this.<org.openpnp.model.Location: double rotation>, 317)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
  "line": "299"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "210"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack37 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angleOffset)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "213"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack37 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angleOffset), 213)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "offsets = virtualinvoke offsets.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack37)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "213"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, offsets = virtualinvoke offsets.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack37), 213)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "offsets := @parameter2: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack13 = this.<org.openpnp.model.Location: double rotation>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)","(<org.openpnp.model.Location: java.lang.String toString()>, $stack13 = this.<org.openpnp.model.Location: double rotation>, 317)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = val",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack12 = val, 292)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "val = $stack12 + $stack9",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
  "line": "299"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "210"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack37 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angleOffset)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "213"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack37 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angleOffset), 213)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "offsets = virtualinvoke offsets.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack37)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "213"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, offsets = virtualinvoke offsets.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack37), 213)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "offsets := @parameter2: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack13 = this.<org.openpnp.model.Location: double rotation>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)","(<org.openpnp.model.Location: java.lang.String toString()>, $stack13 = this.<org.openpnp.model.Location: double rotation>, 317)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "val = $stack12 + $stack9",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = staticinvoke <java.lang.Math: double abs(double)>(val)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack6 = staticinvoke <java.lang.Math: double abs(double)>(val), 292)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = $stack6 cmpl lim",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack7 = $stack6 cmpl lim, 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack7 <= 0 goto return val",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack31 = rect.<org.opencv.core.RotatedRect: double angle>",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "210"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack31 = rect.<org.opencv.core.RotatedRect: double angle>, 210)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "angle := @parameter1: double",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = neg angle",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>",
  "line": "108"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "210"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "val := @parameter0: double",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "val := @parameter0: double",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = val",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack12 = val, 292)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "val = $stack12 + $stack9",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
  "line": "299"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack2",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
  "line": "299"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: double getSpeed()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "27"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: double getSpeed()>(), 27)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "27"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = new org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "281"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>",
  "line": "99"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "clip = lim * 2.0",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "291"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, clip = lim * 2.0, 291)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = neg clip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack9 = neg clip, 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "val = $stack12 + $stack9",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = val cmpg 0.0",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack8 = val cmpg 0.0, 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack8 >= 0 goto $stack9 = neg clip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: double getSpeed()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "27"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: double getSpeed()>(), 27)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "speed := @parameter2: double",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double)>(location, speed)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "23"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double)>(location, speed), 23)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack31 = rect.<org.opencv.core.RotatedRect: double angle>",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "210"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack31 = rect.<org.opencv.core.RotatedRect: double angle>, 210)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "angle := @parameter1: double",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = neg angle",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>",
  "line": "108"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "210"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "val := @parameter0: double",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "val := @parameter0: double",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = val",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack12 = val, 292)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "val = $stack12 + $stack9",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = staticinvoke <java.lang.Math: double abs(double)>(val)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack6 = staticinvoke <java.lang.Math: double abs(double)>(val), 292)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = $stack6 cmpl lim",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack7 = $stack6 cmpl lim, 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack7 <= 0 goto return val",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "210"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack37 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angleOffset)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "213"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack37 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angleOffset), 213)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "offsets = virtualinvoke offsets.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack37)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "213"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, offsets = virtualinvoke offsets.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack37), 213)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "offsets := @parameter2: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack13 = this.<org.openpnp.model.Location: double rotation>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)","(<org.openpnp.model.Location: java.lang.String toString()>, $stack13 = this.<org.openpnp.model.Location: double rotation>, 317)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = neg angle",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>",
  "line": "108"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "210"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "210"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack37 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angleOffset)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "213"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack37 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angleOffset), 213)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "offsets = virtualinvoke offsets.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack37)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "213"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, offsets = virtualinvoke offsets.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack37), 213)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "offsets := @parameter2: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack13 = this.<org.openpnp.model.Location: double rotation>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)","(<org.openpnp.model.Location: java.lang.String toString()>, $stack13 = this.<org.openpnp.model.Location: double rotation>, 317)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = new org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "281"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack5",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "281"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = neg angle",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>",
  "line": "108"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "210"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "val := @parameter0: double",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "val := @parameter0: double",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = val",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack12 = val, 292)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "val = $stack12 + $stack9",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
  "line": "299"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack2",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
  "line": "299"
},
"stackTrace": [""]
}]
}
}

,

{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = neg clip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack9 = neg clip, 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "val = $stack12 + $stack9",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = staticinvoke <java.lang.Math: double abs(double)>(val)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack6 = staticinvoke <java.lang.Math: double abs(double)>(val), 292)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = $stack6 cmpl lim",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack7 = $stack6 cmpl lim, 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack7 <= 0 goto return val",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "192"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "location := @parameter1: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "location := @parameter1: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, $stack8, null)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "22"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack9 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, $stack8, null), 22)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double)>($stack9, speed)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "22"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double)>($stack9, speed), 22)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "192"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "location := @parameter1: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "location := @parameter1: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double)>(location, speed)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "23"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double)>(location, speed), 23)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "192"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "location := @parameter1: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "27"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = neg clip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack9 = neg clip, 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "val = $stack12 + $stack9",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
  "line": "299"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack2",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
  "line": "299"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>",
  "line": "205"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2), 205)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: double getY()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, $stack10 = virtualinvoke l#2.<org.openpnp.model.Location: double getY()>(), 206)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Location: double y>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: double getY()>",
  "line": "72"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, $stack10 = virtualinvoke l#2.<org.openpnp.model.Location: double getY()>(), 206)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke l#2.<org.openpnp.model.Location: double getY()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>",
  "line": "206"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, $stack10 = virtualinvoke l#2.<org.openpnp.model.Location: double getY()>(), 206)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = $stack9 + $stack10",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>",
  "line": "206"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, $stack11 = $stack9 + $stack10, 206)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "y := @parameter2: double",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double y> = y, 62)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Location: double y> = y",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "62"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double y> = y, 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack7 = this.<org.openpnp.model.Location: double y>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)","(<org.openpnp.model.Location: java.lang.String toString()>, $stack7 = this.<org.openpnp.model.Location: double y>, 317)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack6 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation(org.openpnp.spi.HeadMountable)>(nozzle)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>",
  "line": "93"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack6 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation(org.openpnp.spi.HeadMountable)>(nozzle), 93)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>",
  "line": "94"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>",
  "line": "99"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "192"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "location := @parameter1: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "location := @parameter1: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double)>(location, speed)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "23"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double)>(location, speed), 23)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack39 = mm * 1000.0",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
  "line": "141"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2), 205)","(<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 89)","(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack39 = mm * 1000.0, 141)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter0: double",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack8 = virtualinvoke part.<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>(), 94)","(<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>, specialinvoke $stack1.<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>($stack3, $stack2), 109)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Length: double value> = value",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>",
  "line": "43"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack8 = virtualinvoke part.<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>(), 94)","(<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>, specialinvoke $stack1.<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>($stack3, $stack2), 109)","(<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>, this.<org.openpnp.model.Length: double value> = value, 43)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Length: double value>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: double getValue()>",
  "line": "75"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>(), 97)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>",
  "line": "90"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2), 205)","(<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>(), 90)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "y := @parameter2: double",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double y> = y, 62)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Location: double y> = y",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "62"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double y> = y, 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack7 = this.<org.openpnp.model.Location: double y>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)","(<org.openpnp.model.Location: java.lang.String toString()>, $stack7 = this.<org.openpnp.model.Location: double y>, 317)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "mm = $stack59 * 10.0",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
  "line": "100"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2), 205)","(<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 89)","(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, mm = $stack59 * 10.0, 100)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack46 = mm * 0.03937007874015748",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
  "line": "132"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2), 205)","(<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 89)","(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack46 = mm * 0.03937007874015748, 132)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter0: double",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack8 = virtualinvoke part.<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>(), 94)","(<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>, specialinvoke $stack1.<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>($stack3, $stack2), 109)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Length: double value> = value",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>",
  "line": "43"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack8 = virtualinvoke part.<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>(), 94)","(<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>, specialinvoke $stack1.<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>($stack3, $stack2), 109)","(<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>, this.<org.openpnp.model.Length: double value> = value, 43)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Length: double value>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: double getValue()>",
  "line": "75"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>(), 97)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>",
  "line": "90"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2), 205)","(<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>(), 90)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "y := @parameter2: double",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double y> = y, 62)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Location: double y> = y",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "62"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double y> = y, 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack7 = this.<org.openpnp.model.Location: double y>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)","(<org.openpnp.model.Location: java.lang.String toString()>, $stack7 = this.<org.openpnp.model.Location: double y>, 317)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Length: double value>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: double getValue()>",
  "line": "75"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>(), 97)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>",
  "line": "90"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2), 205)","(<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>(), 90)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "y := @parameter2: double",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double y> = y, 62)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Location: double y> = y",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "62"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double y> = y, 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack7 = this.<org.openpnp.model.Location: double y>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)","(<org.openpnp.model.Location: java.lang.String toString()>, $stack7 = this.<org.openpnp.model.Location: double y>, 317)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack51 = new org.openpnp.model.Length",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
  "line": "123"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2), 205)","(<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 89)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Length",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack8 = virtualinvoke part.<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>(), 94)","(<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>, specialinvoke $stack1.<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>($stack3, $stack2), 109)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Length: double value> = value",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>",
  "line": "43"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack8 = virtualinvoke part.<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>(), 94)","(<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>, specialinvoke $stack1.<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>($stack3, $stack2), 109)","(<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>, this.<org.openpnp.model.Length: double value> = value, 43)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Length: double value>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: double getValue()>",
  "line": "75"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>(), 97)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>",
  "line": "90"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2), 205)","(<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>(), 90)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "y := @parameter2: double",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double y> = y, 62)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Location: double y> = y",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "62"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double y> = y, 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack7 = this.<org.openpnp.model.Location: double y>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)","(<org.openpnp.model.Location: java.lang.String toString()>, $stack7 = this.<org.openpnp.model.Location: double y>, 317)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = clip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack9 = clip, 292)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "val = $stack12 + $stack9",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
  "line": "299"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack2",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
  "line": "299"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Location: double x>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: double getX()>",
  "line": "68"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, $stack7 = virtualinvoke l#2.<org.openpnp.model.Location: double getX()>(), 206)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack19 = virtualinvoke unitsPerPixel.<org.openpnp.model.Location: double getX()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "60"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, offsets = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera#4, $stack29, $stack28), 204)","(<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>, $stack19 = virtualinvoke unitsPerPixel.<org.openpnp.model.Location: double getX()>(), 60)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "offsetX = offsetX * $stack19",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "60"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, offsets = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera#4, $stack29, $stack28), 204)","(<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>, offsetX = offsetX * $stack19, 60)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x := @parameter1: double",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double x> = x, 61)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Location: double x> = x",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "61"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double x> = x, 61)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = this.<org.openpnp.model.Location: double x>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)","(<org.openpnp.model.Location: java.lang.String toString()>, $stack2 = this.<org.openpnp.model.Location: double x>, 317)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = new org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "281"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, $stack8, null)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "22"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack9 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, $stack8, null), 22)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double)>($stack9, speed)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "22"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double)>($stack9, speed), 22)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "mm = $stack58 * 1000.0",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
  "line": "103"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2), 205)","(<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 89)","(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, mm = $stack58 * 1000.0, 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack46 = mm * 0.03937007874015748",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
  "line": "132"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2), 205)","(<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 89)","(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack46 = mm * 0.03937007874015748, 132)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter0: double",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack8 = virtualinvoke part.<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>(), 94)","(<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>, specialinvoke $stack1.<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>($stack3, $stack2), 109)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Length: double value> = value",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>",
  "line": "43"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack8 = virtualinvoke part.<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>(), 94)","(<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>, specialinvoke $stack1.<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>($stack3, $stack2), 109)","(<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>, this.<org.openpnp.model.Length: double value> = value, 43)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Length: double value>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: double getValue()>",
  "line": "75"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>(), 97)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>",
  "line": "90"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2), 205)","(<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>(), 90)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "y := @parameter2: double",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double y> = y, 62)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Location: double y> = y",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "62"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double y> = y, 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack7 = this.<org.openpnp.model.Location: double y>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)","(<org.openpnp.model.Location: java.lang.String toString()>, $stack7 = this.<org.openpnp.model.Location: double y>, 317)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "27"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, $stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Machine getMachine()>(), 27)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: double getSpeed()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "27"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: double getSpeed()>(), 27)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "27"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = clip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack9 = clip, 292)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "val = $stack12 + $stack9",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = val cmpg 0.0",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack8 = val cmpg 0.0, 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack8 >= 0 goto $stack9 = neg clip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "192"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "location := @parameter1: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "location := @parameter1: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.model.Location: double rotation>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "281"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack10 = this.<org.openpnp.model.Location: double rotation>, 281)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack13 = this.<org.openpnp.model.Location: double rotation>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)","(<org.openpnp.model.Location: java.lang.String toString()>, $stack13 = this.<org.openpnp.model.Location: double rotation>, 317)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = new org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>",
  "line": "88"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2), 205)","(<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, specialinvoke $stack3.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>(units, $stack8, $stack13, $stack18, $stack19), 91)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.Object: void <init>()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "59"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, specialinvoke this.<java.lang.Object: void <init>()>(), 59)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = new org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>",
  "line": "206"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>",
  "line": "94"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>",
  "line": "99"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "192"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "location := @parameter1: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "location := @parameter1: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, $stack8, null)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "22"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack9 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, $stack8, null), 22)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double)>($stack9, speed)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "22"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double)>($stack9, speed), 22)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack31 = rect.<org.opencv.core.RotatedRect: double angle>",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "210"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack31 = rect.<org.opencv.core.RotatedRect: double angle>, 210)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "angle := @parameter1: double",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = neg angle",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>",
  "line": "108"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack3",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>",
  "line": "108"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = neg clip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack9 = neg clip, 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "val = $stack12 + $stack9",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return val",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "295"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>",
  "line": "99"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>",
  "line": "99"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "192"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "location := @parameter1: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "27"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack8 = $stack17",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack8 = $stack17, -1)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Length: org.openpnp.model.LengthUnit units>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: org.openpnp.model.LengthUnit getUnits()>",
  "line": "83"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack9 = virtualinvoke $stack8.<org.openpnp.model.Length: org.openpnp.model.LengthUnit getUnits()>(), 95)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke $stack8.<org.openpnp.model.Length: org.openpnp.model.LengthUnit getUnits()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>",
  "line": "95"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack9 = virtualinvoke $stack8.<org.openpnp.model.Length: org.openpnp.model.LengthUnit getUnits()>(), 95)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "units := @parameter0: org.openpnp.model.LengthUnit",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit units> = units",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "60"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit units> = units, 60)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit units>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "281"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack6 = this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit units>, 281)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>",
  "line": "94"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>",
  "line": "99"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "192"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "location := @parameter1: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "location := @parameter1: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double)>(location, speed)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "23"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double)>(location, speed), 23)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = neg angle",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>",
  "line": "108"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "210"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "val := @parameter0: double",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
  "line": "299"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack2",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
  "line": "299"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack6 = this.<org.openpnp.model.Location: double x>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>",
  "line": "88"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2), 205)","(<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack6 = this.<org.openpnp.model.Location: double x>, 88)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter0: double",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack8 = virtualinvoke part.<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>(), 94)","(<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>, specialinvoke $stack1.<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>($stack3, $stack2), 109)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Length: double value> = value",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>",
  "line": "43"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack8 = virtualinvoke part.<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>(), 94)","(<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>, specialinvoke $stack1.<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>($stack3, $stack2), 109)","(<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>, this.<org.openpnp.model.Length: double value> = value, 43)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Length: double value>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: double getValue()>",
  "line": "75"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>(), 97)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>",
  "line": "90"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2), 205)","(<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>(), 90)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "y := @parameter2: double",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double y> = y, 62)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Location: double y> = y",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "62"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double y> = y, 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack7 = this.<org.openpnp.model.Location: double y>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)","(<org.openpnp.model.Location: java.lang.String toString()>, $stack7 = this.<org.openpnp.model.Location: double y>, 317)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit units> = units",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "60"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit units> = units, 60)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit units>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "281"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack6 = this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit units>, 281)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, $stack8, null)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "22"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack9 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, $stack8, null), 22)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double)>($stack9, speed)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "22"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double)>($stack9, speed), 22)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>",
  "line": "94"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>",
  "line": "99"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "192"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "location := @parameter1: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "location := @parameter1: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, $stack8, null)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "22"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack9 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, $stack8, null), 22)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double)>($stack9, speed)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "22"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double)>($stack9, speed), 22)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "clip = lim * 2.0",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "291"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, clip = lim * 2.0, 291)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = neg clip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack9 = neg clip, 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "val = $stack12 + $stack9",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return val",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "295"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack37 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angleOffset)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "213"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack37 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angleOffset), 213)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "offsets = virtualinvoke offsets.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack37)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "213"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, offsets = virtualinvoke offsets.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack37), 213)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "offsets := @parameter2: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = this.<org.openpnp.model.Location: double x>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)","(<org.openpnp.model.Location: java.lang.String toString()>, $stack2 = this.<org.openpnp.model.Location: double x>, 317)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "clip = lim * 2.0",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "291"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, clip = lim * 2.0, 291)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = neg clip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack9 = neg clip, 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "val = $stack12 + $stack9",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
  "line": "299"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack2",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
  "line": "299"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
  "line": "299"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "210"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "clip = lim * 2.0",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "291"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, clip = lim * 2.0, 291)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = neg clip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack9 = neg clip, 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "val = $stack12 + $stack9",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
  "line": "299"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "210"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = neg angle",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>",
  "line": "108"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "210"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "val := @parameter0: double",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "val := @parameter0: double",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = val",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack12 = val, 292)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "val = $stack12 + $stack9",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return val",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "295"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Location: double z>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: double getZ()>",
  "line": "76"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, $stack13 = virtualinvoke l#2.<org.openpnp.model.Location: double getZ()>(), 206)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke l#2.<org.openpnp.model.Location: double getZ()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>",
  "line": "206"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, $stack13 = virtualinvoke l#2.<org.openpnp.model.Location: double getZ()>(), 206)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack15 = $stack12 + $stack13",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>",
  "line": "206"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, $stack15 = $stack12 + $stack13, 206)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "z := @parameter3: double",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double z> = z, 63)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Location: double z> = z",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "63"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double z> = z, 63)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.model.Location: double z>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)","(<org.openpnp.model.Location: java.lang.String toString()>, $stack10 = this.<org.openpnp.model.Location: double z>, 317)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = neg angle",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>",
  "line": "108"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack3",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>",
  "line": "108"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = new org.openpnp.model.Length",
"location": {
  "file": "",
  "class": "org.openpnp.model.Part",
  "method": "<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>",
  "line": "109"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack8 = virtualinvoke part.<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>(), 94)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Length",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack8 = virtualinvoke part.<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>(), 94)","(<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>, specialinvoke $stack1.<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>($stack3, $stack2), 109)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Length: double value> = value",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>",
  "line": "43"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack8 = virtualinvoke part.<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>(), 94)","(<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>, specialinvoke $stack1.<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>($stack3, $stack2), 109)","(<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>, this.<org.openpnp.model.Length: double value> = value, 43)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Length: double value>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: double getValue()>",
  "line": "75"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>(), 97)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>",
  "line": "90"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2), 205)","(<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>(), 90)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "y := @parameter2: double",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double y> = y, 62)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Location: double y> = y",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "62"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double y> = y, 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack7 = this.<org.openpnp.model.Location: double y>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)","(<org.openpnp.model.Location: java.lang.String toString()>, $stack7 = this.<org.openpnp.model.Location: double y>, 317)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke y.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "281"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack8 = virtualinvoke y.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = neg angle",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>",
  "line": "108"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "210"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "val := @parameter0: double",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "val := @parameter0: double",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = val",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack12 = val, 292)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "val = $stack12 + $stack9",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = staticinvoke <java.lang.Math: double abs(double)>(val)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack6 = staticinvoke <java.lang.Math: double abs(double)>(val), 292)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = $stack6 cmpl lim",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack7 = $stack6 cmpl lim, 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack7 <= 0 goto return val",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>",
  "line": "99"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>",
  "line": "99"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "192"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "location := @parameter1: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "location := @parameter1: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.model.Location: double rotation>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "281"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack10 = this.<org.openpnp.model.Location: double rotation>, 281)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack13 = this.<org.openpnp.model.Location: double rotation>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)","(<org.openpnp.model.Location: java.lang.String toString()>, $stack13 = this.<org.openpnp.model.Location: double rotation>, 317)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>",
  "line": "94"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.model.Location: double rotation>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "281"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack10 = this.<org.openpnp.model.Location: double rotation>, 281)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack13 = this.<org.openpnp.model.Location: double rotation>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)","(<org.openpnp.model.Location: java.lang.String toString()>, $stack13 = this.<org.openpnp.model.Location: double rotation>, 317)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "head = interfaceinvoke hm.<org.openpnp.spi.HeadMountable: org.openpnp.spi.Head getHead()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "20"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, head = interfaceinvoke hm.<org.openpnp.spi.HeadMountable: org.openpnp.spi.Head getHead()>(), 20)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke head.<org.openpnp.spi.Head: void moveToSafeZ(double)>(speed)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "21"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, interfaceinvoke head.<org.openpnp.spi.Head: void moveToSafeZ(double)>(speed), 21)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Length: double value> = value",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>",
  "line": "43"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack8 = virtualinvoke part.<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>(), 94)","(<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>, specialinvoke $stack1.<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>($stack3, $stack2), 109)","(<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>, this.<org.openpnp.model.Length: double value> = value, 43)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Length: double value>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: double getValue()>",
  "line": "75"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>(), 97)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>",
  "line": "90"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2), 205)","(<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>(), 90)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "y := @parameter2: double",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double y> = y, 62)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Location: double y> = y",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "62"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double y> = y, 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack7 = this.<org.openpnp.model.Location: double y>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)","(<org.openpnp.model.Location: java.lang.String toString()>, $stack7 = this.<org.openpnp.model.Location: double y>, 317)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
  "line": "299"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack2",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
  "line": "299"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = new org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "281"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>",
  "line": "99"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "192"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "location := @parameter1: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "location := @parameter1: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double)>(location, speed)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "23"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double)>(location, speed), 23)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Location: double rotation> = rotation",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "64"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double rotation> = rotation, 64)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack13 = this.<org.openpnp.model.Location: double rotation>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)","(<org.openpnp.model.Location: java.lang.String toString()>, $stack13 = this.<org.openpnp.model.Location: double rotation>, 317)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack57 = this.<org.openpnp.model.Length: double value>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
  "line": "106"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2), 205)","(<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 89)","(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack57 = this.<org.openpnp.model.Length: double value>, 106)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "mm = $stack57 * 25.4",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
  "line": "106"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2), 205)","(<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 89)","(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, mm = $stack57 * 25.4, 106)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack46 = mm * 0.03937007874015748",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
  "line": "132"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2), 205)","(<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 89)","(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack46 = mm * 0.03937007874015748, 132)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter0: double",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack8 = virtualinvoke part.<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>(), 94)","(<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>, specialinvoke $stack1.<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>($stack3, $stack2), 109)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Length: double value> = value",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>",
  "line": "43"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack8 = virtualinvoke part.<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>(), 94)","(<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>, specialinvoke $stack1.<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>($stack3, $stack2), 109)","(<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>, this.<org.openpnp.model.Length: double value> = value, 43)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Length: double value>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: double getValue()>",
  "line": "75"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>(), 97)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>",
  "line": "90"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2), 205)","(<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>(), 90)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "y := @parameter2: double",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double y> = y, 62)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Location: double y> = y",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "62"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double y> = y, 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack7 = this.<org.openpnp.model.Location: double y>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)","(<org.openpnp.model.Location: java.lang.String toString()>, $stack7 = this.<org.openpnp.model.Location: double y>, 317)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack41 = mm * 39.37007874015748",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
  "line": "138"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2), 205)","(<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 89)","(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack41 = mm * 39.37007874015748, 138)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter0: double",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack8 = virtualinvoke part.<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>(), 94)","(<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>, specialinvoke $stack1.<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>($stack3, $stack2), 109)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Length: double value> = value",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>",
  "line": "43"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack8 = virtualinvoke part.<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>(), 94)","(<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>, specialinvoke $stack1.<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>($stack3, $stack2), 109)","(<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>, this.<org.openpnp.model.Length: double value> = value, 43)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Length: double value>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: double getValue()>",
  "line": "75"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>(), 97)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>",
  "line": "90"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2), 205)","(<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>(), 90)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "y := @parameter2: double",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double y> = y, 62)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Location: double y> = y",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "62"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double y> = y, 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack7 = this.<org.openpnp.model.Location: double y>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)","(<org.openpnp.model.Location: java.lang.String toString()>, $stack7 = this.<org.openpnp.model.Location: double y>, 317)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Location: double y>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: double getY()>",
  "line": "72"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, $stack10 = virtualinvoke l#2.<org.openpnp.model.Location: double getY()>(), 206)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke l#2.<org.openpnp.model.Location: double getY()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>",
  "line": "206"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, $stack10 = virtualinvoke l#2.<org.openpnp.model.Location: double getY()>(), 206)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = $stack9 + $stack10",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>",
  "line": "206"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, $stack11 = $stack9 + $stack10, 206)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "y := @parameter2: double",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double y> = y, 62)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Location: double y> = y",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "62"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double y> = y, 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack7 = this.<org.openpnp.model.Location: double y>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)","(<org.openpnp.model.Location: java.lang.String toString()>, $stack7 = this.<org.openpnp.model.Location: double y>, 317)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = new org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "281"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.Object: void <init>()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "59"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, specialinvoke this.<java.lang.Object: void <init>()>(), 59)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>",
  "line": "94"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>",
  "line": "99"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "192"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "location := @parameter1: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "27"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "mm = $stack53 * 25.4",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
  "line": "112"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2), 205)","(<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 89)","(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, mm = $stack53 * 25.4, 112)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack46 = mm * 0.03937007874015748",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
  "line": "132"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2), 205)","(<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 89)","(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack46 = mm * 0.03937007874015748, 132)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter0: double",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack8 = virtualinvoke part.<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>(), 94)","(<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>, specialinvoke $stack1.<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>($stack3, $stack2), 109)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Length: double value> = value",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>",
  "line": "43"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack8 = virtualinvoke part.<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>(), 94)","(<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>, specialinvoke $stack1.<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>($stack3, $stack2), 109)","(<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>, this.<org.openpnp.model.Length: double value> = value, 43)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Length: double value>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: double getValue()>",
  "line": "75"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>(), 97)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>",
  "line": "90"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2), 205)","(<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>(), 90)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "y := @parameter2: double",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double y> = y, 62)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Location: double y> = y",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "62"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double y> = y, 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack7 = this.<org.openpnp.model.Location: double y>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)","(<org.openpnp.model.Location: java.lang.String toString()>, $stack7 = this.<org.openpnp.model.Location: double y>, 317)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = clip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack9 = clip, 292)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "val = $stack12 + $stack9",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return val",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "295"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Part: java.lang.String id>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Part",
  "method": "<org.openpnp.model.Part: java.lang.String getId()>",
  "line": "75"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, rect = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: org.opencv.core.RotatedRect processPipelineAndGetResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.spi.Camera,org.openpnp.model.Part,org.openpnp.spi.Nozzle)>(pipeline, camera, part, nozzle), 197)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.opencv.core.RotatedRect processPipelineAndGetResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.spi.Camera,org.openpnp.model.Part,org.openpnp.spi.Nozzle)>, $stack32 = virtualinvoke part.<org.openpnp.model.Part: java.lang.String getId()>(), 253)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.openpnp.model.Part",
  "method": "<org.openpnp.model.Part: java.lang.String getId()>",
  "line": "75"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "210"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "mm = this.<org.openpnp.model.Length: double value>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
  "line": "97"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2), 205)","(<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 89)","(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, mm = this.<org.openpnp.model.Length: double value>, 97)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack48 = mm / 1000.0",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
  "line": "129"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2), 205)","(<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 89)","(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack48 = mm / 1000.0, 129)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter0: double",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack8 = virtualinvoke part.<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>(), 94)","(<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>, specialinvoke $stack1.<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>($stack3, $stack2), 109)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Length: double value> = value",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>",
  "line": "43"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack8 = virtualinvoke part.<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>(), 94)","(<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>, specialinvoke $stack1.<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>($stack3, $stack2), 109)","(<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>, this.<org.openpnp.model.Length: double value> = value, 43)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Length: double value>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: double getValue()>",
  "line": "75"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>(), 97)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>",
  "line": "90"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2), 205)","(<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>(), 90)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "y := @parameter2: double",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double y> = y, 62)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Location: double y> = y",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "62"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double y> = y, 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack7 = this.<org.openpnp.model.Location: double y>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)","(<org.openpnp.model.Location: java.lang.String toString()>, $stack7 = this.<org.openpnp.model.Location: double y>, 317)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "27"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, $stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Machine getMachine()>(), 27)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: double getSpeed()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "27"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: double getSpeed()>(), 27)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "speed := @parameter2: double",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double)>($stack9, speed)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "22"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double)>($stack9, speed), 22)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack31 = rect.<org.opencv.core.RotatedRect: double angle>",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "210"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack31 = rect.<org.opencv.core.RotatedRect: double angle>, 210)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "angle := @parameter1: double",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = neg angle",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>",
  "line": "108"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "210"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "val := @parameter0: double",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
  "line": "299"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack2",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
  "line": "299"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke $stack8.<org.openpnp.model.Length: org.openpnp.model.LengthUnit getUnits()>()",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>",
  "line": "95"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack9 = virtualinvoke $stack8.<org.openpnp.model.Length: org.openpnp.model.LengthUnit getUnits()>(), 95)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "units := @parameter0: org.openpnp.model.LengthUnit",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit units> = units",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "60"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit units> = units, 60)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit units>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "281"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack6 = this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit units>, 281)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack31 = rect.<org.opencv.core.RotatedRect: double angle>",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "210"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack31 = rect.<org.opencv.core.RotatedRect: double angle>, 210)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "angle := @parameter1: double",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = neg angle",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>",
  "line": "108"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "210"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "val := @parameter0: double",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "val := @parameter0: double",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = val",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack12 = val, 292)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "val = $stack12 + $stack9",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = val cmpg 0.0",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack8 = val cmpg 0.0, 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack8 >= 0 goto $stack9 = neg clip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "clip = lim * 2.0",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "291"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, clip = lim * 2.0, 291)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = neg clip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack9 = neg clip, 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "val = $stack12 + $stack9",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = staticinvoke <java.lang.Math: double abs(double)>(val)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack6 = staticinvoke <java.lang.Math: double abs(double)>(val), 292)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = $stack6 cmpl lim",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack7 = $stack6 cmpl lim, 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack7 <= 0 goto return val",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = neg angle",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>",
  "line": "108"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "210"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "val := @parameter0: double",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "val := @parameter0: double",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = val",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack12 = val, 292)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "val = $stack12 + $stack9",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = val cmpg 0.0",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack8 = val cmpg 0.0, 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack8 >= 0 goto $stack9 = neg clip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = neg angle",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>",
  "line": "108"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "210"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "210"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Location: double y> = y",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "62"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double y> = y, 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack7 = this.<org.openpnp.model.Location: double y>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)","(<org.openpnp.model.Location: java.lang.String toString()>, $stack7 = this.<org.openpnp.model.Location: double y>, 317)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack6 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation(org.openpnp.spi.HeadMountable)>(nozzle)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>",
  "line": "93"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack6 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation(org.openpnp.spi.HeadMountable)>(nozzle), 93)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>",
  "line": "94"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>",
  "line": "99"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "192"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "location := @parameter1: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "27"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Location: double x> = x",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "61"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double x> = x, 61)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = this.<org.openpnp.model.Location: double x>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)","(<org.openpnp.model.Location: java.lang.String toString()>, $stack2 = this.<org.openpnp.model.Location: double x>, 317)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack43 = mm * 0.03937007874015748",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
  "line": "135"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2), 205)","(<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 89)","(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack43 = mm * 0.03937007874015748, 135)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack44 = $stack43 * 12.0",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
  "line": "135"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2), 205)","(<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 89)","(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack44 = $stack43 * 12.0, 135)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter0: double",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack8 = virtualinvoke part.<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>(), 94)","(<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>, specialinvoke $stack1.<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>($stack3, $stack2), 109)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Length: double value> = value",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>",
  "line": "43"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack8 = virtualinvoke part.<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>(), 94)","(<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>, specialinvoke $stack1.<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>($stack3, $stack2), 109)","(<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>, this.<org.openpnp.model.Length: double value> = value, 43)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Length: double value>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: double getValue()>",
  "line": "75"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>(), 97)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>",
  "line": "90"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2), 205)","(<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>(), 90)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "y := @parameter2: double",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double y> = y, 62)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Location: double y> = y",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "62"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double y> = y, 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack7 = this.<org.openpnp.model.Location: double y>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)","(<org.openpnp.model.Location: java.lang.String toString()>, $stack7 = this.<org.openpnp.model.Location: double y>, 317)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = new org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>",
  "line": "206"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.Object: void <init>()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "59"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, specialinvoke this.<java.lang.Object: void <init>()>(), 59)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = clip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack9 = clip, 292)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "val = $stack12 + $stack9",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
  "line": "299"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "210"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = neg clip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack9 = neg clip, 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "val = $stack12 + $stack9",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
  "line": "299"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "210"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke $stack17.<org.openpnp.model.Length: double getValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>",
  "line": "91"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2), 205)","(<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack18 = virtualinvoke $stack17.<org.openpnp.model.Length: double getValue()>(), 91)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "z := @parameter3: double",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double z> = z, 63)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Location: double z> = z",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "63"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double z> = z, 63)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.model.Location: double z>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)","(<org.openpnp.model.Location: java.lang.String toString()>, $stack10 = this.<org.openpnp.model.Location: double z>, 317)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack7 = new org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>",
  "line": "93"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.Object: void <init>()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "59"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, specialinvoke this.<java.lang.Object: void <init>()>(), 59)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "27"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, $stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Machine getMachine()>(), 27)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: double getSpeed()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "27"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: double getSpeed()>(), 27)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "speed := @parameter2: double",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke head.<org.openpnp.spi.Head: void moveToSafeZ(double)>(speed)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "21"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, interfaceinvoke head.<org.openpnp.spi.Head: void moveToSafeZ(double)>(speed), 21)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Location: double z> = z",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "63"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double z> = z, 63)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.model.Location: double z>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)","(<org.openpnp.model.Location: java.lang.String toString()>, $stack10 = this.<org.openpnp.model.Location: double z>, 317)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack7 = virtualinvoke l#2.<org.openpnp.model.Location: double getX()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>",
  "line": "206"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, $stack7 = virtualinvoke l#2.<org.openpnp.model.Location: double getX()>(), 206)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = $stack6 + $stack7",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>",
  "line": "206"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, $stack8 = $stack6 + $stack7, 206)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x := @parameter1: double",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double x> = x, 61)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Location: double x> = x",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "61"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double x> = x, 61)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = this.<org.openpnp.model.Location: double x>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)","(<org.openpnp.model.Location: java.lang.String toString()>, $stack2 = this.<org.openpnp.model.Location: double x>, 317)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = clip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack9 = clip, 292)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "val = $stack12 + $stack9",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = staticinvoke <java.lang.Math: double abs(double)>(val)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack6 = staticinvoke <java.lang.Math: double abs(double)>(val), 292)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = $stack6 cmpl lim",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack7 = $stack6 cmpl lim, 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack7 <= 0 goto return val",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit units>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.LengthUnit getUnits()>",
  "line": "84"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, $stack2 = virtualinvoke this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit getUnits()>(), 205)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack23 = virtualinvoke $stack22.<org.openpnp.model.Location: org.openpnp.model.LengthUnit getUnits()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>",
  "line": "63"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, offsets = staticinvoke <org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>(camera#4, $stack29, $stack28), 204)","(<org.openpnp.util.VisionUtils: org.openpnp.model.Location getPixelCenterOffsets(org.openpnp.spi.Camera,double,double)>, $stack23 = virtualinvoke $stack22.<org.openpnp.model.Location: org.openpnp.model.LengthUnit getUnits()>(), 63)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "units := @parameter0: org.openpnp.model.LengthUnit",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit units> = units",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "60"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit units> = units, 60)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit units>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "281"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack6 = this.<org.openpnp.model.Location: org.openpnp.model.LengthUnit units>, 281)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>",
  "line": "99"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>",
  "line": "99"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "192"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "location := @parameter1: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "location := @parameter1: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double)>(location, speed)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "23"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double)>(location, speed), 23)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = new org.openpnp.model.Length",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>",
  "line": "89"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2), 205)","(<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, specialinvoke $stack9.<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>($stack11, $stack10), 89)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Length",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack8 = virtualinvoke part.<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>(), 94)","(<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>, specialinvoke $stack1.<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>($stack3, $stack2), 109)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Length: double value> = value",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>",
  "line": "43"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack8 = virtualinvoke part.<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>(), 94)","(<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>, specialinvoke $stack1.<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>($stack3, $stack2), 109)","(<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>, this.<org.openpnp.model.Length: double value> = value, 43)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Length: double value>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: double getValue()>",
  "line": "75"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>(), 97)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>",
  "line": "90"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2), 205)","(<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>(), 90)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "y := @parameter2: double",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double y> = y, 62)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Location: double y> = y",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "62"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double y> = y, 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack7 = this.<org.openpnp.model.Location: double y>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)","(<org.openpnp.model.Location: java.lang.String toString()>, $stack7 = this.<org.openpnp.model.Location: double y>, 317)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack46 = mm * 0.03937007874015748",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
  "line": "132"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2), 205)","(<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 89)","(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack46 = mm * 0.03937007874015748, 132)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter0: double",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack8 = virtualinvoke part.<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>(), 94)","(<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>, specialinvoke $stack1.<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>($stack3, $stack2), 109)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Length: double value> = value",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>",
  "line": "43"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack8 = virtualinvoke part.<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>(), 94)","(<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>, specialinvoke $stack1.<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>($stack3, $stack2), 109)","(<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>, this.<org.openpnp.model.Length: double value> = value, 43)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Length: double value>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: double getValue()>",
  "line": "75"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>(), 97)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>",
  "line": "90"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2), 205)","(<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>(), 90)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "y := @parameter2: double",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double y> = y, 62)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Location: double y> = y",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "62"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double y> = y, 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack7 = this.<org.openpnp.model.Location: double y>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)","(<org.openpnp.model.Location: java.lang.String toString()>, $stack7 = this.<org.openpnp.model.Location: double y>, 317)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack6 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation(org.openpnp.spi.HeadMountable)>(nozzle)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>",
  "line": "93"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack6 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation(org.openpnp.spi.HeadMountable)>(nozzle), 93)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>",
  "line": "94"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>",
  "line": "99"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "192"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "location := @parameter1: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "location := @parameter1: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, $stack8, null)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "22"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack9 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, $stack8, null), 22)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double)>($stack9, speed)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "22"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double)>($stack9, speed), 22)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack6 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation(org.openpnp.spi.HeadMountable)>(nozzle)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>",
  "line": "93"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack6 = interfaceinvoke camera.<org.openpnp.spi.Camera: org.openpnp.model.Location getLocation(org.openpnp.spi.HeadMountable)>(nozzle), 93)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>",
  "line": "94"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = this.<org.openpnp.model.Location: double rotation>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "281"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack10 = this.<org.openpnp.model.Location: double rotation>, 281)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack13 = this.<org.openpnp.model.Location: double rotation>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)","(<org.openpnp.model.Location: java.lang.String toString()>, $stack13 = this.<org.openpnp.model.Location: double rotation>, 317)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "mm = $stack25 / 1000.0",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
  "line": "115"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2), 205)","(<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 89)","(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, mm = $stack25 / 1000.0, 115)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack46 = mm * 0.03937007874015748",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
  "line": "132"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2), 205)","(<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 89)","(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack46 = mm * 0.03937007874015748, 132)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter0: double",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack8 = virtualinvoke part.<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>(), 94)","(<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>, specialinvoke $stack1.<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>($stack3, $stack2), 109)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Length: double value> = value",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>",
  "line": "43"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack8 = virtualinvoke part.<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>(), 94)","(<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>, specialinvoke $stack1.<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>($stack3, $stack2), 109)","(<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>, this.<org.openpnp.model.Length: double value> = value, 43)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Length: double value>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: double getValue()>",
  "line": "75"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>(), 97)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>",
  "line": "90"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2), 205)","(<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>(), 90)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "y := @parameter2: double",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double y> = y, 62)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Location: double y> = y",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "62"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double y> = y, 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack7 = this.<org.openpnp.model.Location: double y>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)","(<org.openpnp.model.Location: java.lang.String toString()>, $stack7 = this.<org.openpnp.model.Location: double y>, 317)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack50 = mm / 10.0",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
  "line": "126"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2), 205)","(<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 89)","(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack50 = mm / 10.0, 126)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter0: double",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack8 = virtualinvoke part.<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>(), 94)","(<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>, specialinvoke $stack1.<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>($stack3, $stack2), 109)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Length: double value> = value",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>",
  "line": "43"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack8 = virtualinvoke part.<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>(), 94)","(<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>, specialinvoke $stack1.<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>($stack3, $stack2), 109)","(<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>, this.<org.openpnp.model.Length: double value> = value, 43)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Length: double value>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: double getValue()>",
  "line": "75"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>(), 97)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>",
  "line": "90"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2), 205)","(<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>(), 90)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "y := @parameter2: double",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double y> = y, 62)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Location: double y> = y",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "62"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double y> = y, 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack7 = this.<org.openpnp.model.Location: double y>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)","(<org.openpnp.model.Location: java.lang.String toString()>, $stack7 = this.<org.openpnp.model.Location: double y>, 317)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = new org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>",
  "line": "206"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>",
  "line": "94"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>",
  "line": "99"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "192"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "location := @parameter1: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "27"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = new org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "281"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>",
  "line": "99"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "192"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "location := @parameter1: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "27"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack31 = rect.<org.opencv.core.RotatedRect: double angle>",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "210"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack31 = rect.<org.opencv.core.RotatedRect: double angle>, 210)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "angle := @parameter1: double",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = neg angle",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>",
  "line": "108"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "210"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "val := @parameter0: double",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "val := @parameter0: double",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = val",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack12 = val, 292)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "val = $stack12 + $stack9",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return val",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "295"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>",
  "line": "99"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>",
  "line": "99"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "192"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "location := @parameter1: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "location := @parameter1: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, $stack8, null)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "22"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, $stack9 = virtualinvoke location.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, $stack8, null), 22)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double)>($stack9, speed)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "22"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double)>($stack9, speed), 22)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack48 = mm / 1000.0",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>",
  "line": "129"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2), 205)","(<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack7 = virtualinvoke $stack4.<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>(units), 89)","(<org.openpnp.model.Length: org.openpnp.model.Length convertToUnits(org.openpnp.model.LengthUnit)>, $stack48 = mm / 1000.0, 129)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter0: double",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack8 = virtualinvoke part.<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>(), 94)","(<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>, specialinvoke $stack1.<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>($stack3, $stack2), 109)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Length: double value> = value",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>",
  "line": "43"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack8 = virtualinvoke part.<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>(), 94)","(<org.openpnp.model.Part: org.openpnp.model.Length getHeight()>, specialinvoke $stack1.<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>($stack3, $stack2), 109)","(<org.openpnp.model.Length: void <init>(double,org.openpnp.model.LengthUnit)>, this.<org.openpnp.model.Length: double value> = value, 43)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.openpnp.model.Length: double value>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Length",
  "method": "<org.openpnp.model.Length: double getValue()>",
  "line": "75"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>(), 97)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>",
  "line": "90"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2), 205)","(<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>(), 90)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "y := @parameter2: double",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double y> = y, 62)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Location: double y> = y",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "62"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double y> = y, 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack7 = this.<org.openpnp.model.Location: double y>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)","(<org.openpnp.model.Location: java.lang.String toString()>, $stack7 = this.<org.openpnp.model.Location: double y>, 317)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = neg clip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack9 = neg clip, 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "val = $stack12 + $stack9",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = val cmpg 0.0",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack8 = val cmpg 0.0, 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack8 >= 0 goto $stack9 = neg clip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "clip = lim * 2.0",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "291"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, clip = lim * 2.0, 291)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = neg clip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack9 = neg clip, 293)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "val = $stack12 + $stack9",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = val cmpg 0.0",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack8 = val cmpg 0.0, 293)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack8 >= 0 goto $stack9 = neg clip",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack31 = rect.<org.opencv.core.RotatedRect: double angle>",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "210"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack31 = rect.<org.opencv.core.RotatedRect: double angle>, 210)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "angle := @parameter1: double",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = neg angle",
"location": {
  "file": "",
  "class": "org.openpnp.util.VisionUtils",
  "method": "<org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>",
  "line": "108"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "210"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, $stack32 = staticinvoke <org.openpnp.util.VisionUtils: double getPixelAngle(org.openpnp.spi.Camera,double)>(camera#4, $stack31), 210)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "val := @parameter0: double",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "val := @parameter0: double",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = val",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack12 = val, 292)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "val = $stack12 + $stack9",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "293"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = staticinvoke <java.lang.Math: double abs(double)>(val)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack6 = staticinvoke <java.lang.Math: double abs(double)>(val), 292)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = $stack6 cmpl lim",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, angleOffset = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>($stack32), 210)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double)>, $stack2 = staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>(val, 45.0), 299)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>, $stack7 = $stack6 cmpl lim, 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack7 <= 0 goto return val",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: double angleNorm(double,double)>",
  "line": "292"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = new org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "281"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack5",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "281"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>",
  "line": "90"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)","(<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>, l#2 = virtualinvoke l.<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>($stack2), 205)","(<org.openpnp.model.Location: org.openpnp.model.Location convertToUnits(org.openpnp.model.LengthUnit)>, $stack13 = virtualinvoke $stack12.<org.openpnp.model.Length: double getValue()>(), 90)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "y := @parameter2: double",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double y> = y, 62)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.openpnp.model.Location: double y> = y",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>",
  "line": "62"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, specialinvoke $stack7.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack9, 0.0, 0.0, $stack13, 0.0), 97)","(<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>, this.<org.openpnp.model.Location: double y> = y, 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack7 = this.<org.openpnp.model.Location: double y>",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: java.lang.String toString()>",
  "line": "317"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>(pipeline, part, offsets, camera#4), 216)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: void displayResult(org.openpnp.vision.pipeline.CvPipeline,org.openpnp.model.Part,org.openpnp.model.Location,org.openpnp.spi.Camera)>, $stack10 = virtualinvoke offsets.<org.openpnp.model.Location: java.lang.String toString()>(), 224)","(<org.openpnp.model.Location: java.lang.String toString()>, $stack7 = this.<org.openpnp.model.Location: double y>, 317)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: java.lang.Double valueOf(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 := @parameter0: double",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0.<java.lang.Double: double value> = l1",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: void <init>(double)>",
  "line": "593"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(angle), 99)","(<java.lang.Double: java.lang.Double valueOf(double)>, specialinvoke $stack2.<java.lang.Double: void <init>(double)>(l0), 519)","(<java.lang.Double: void <init>(double)>, l0.<java.lang.Double: double value> = l1, 593)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.Double: double value>",
"location": {
  "file": "",
  "class": "java.lang.Double",
  "method": "<java.lang.Double: double doubleValue()>",
  "line": "716"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack7 = virtualinvoke x.<java.lang.Double: double doubleValue()>(), 281)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>()",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, $stack9 = virtualinvoke z.<java.lang.Double: double doubleValue()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10)",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>",
  "line": "282"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18), 99)","(<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>, specialinvoke $stack5.<org.openpnp.model.Location: void <init>(org.openpnp.model.LengthUnit,double,double,double,double)>($stack6, $stack7, $stack8, $stack9, $stack10), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = new org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.model.Location",
  "method": "<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>",
  "line": "206"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>",
  "line": "94"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)","(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>, $stack14 = virtualinvoke $stack6.<org.openpnp.model.Location: org.openpnp.model.Location add(org.openpnp.model.Location)>($stack7), 94)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack14.<org.openpnp.model.Location: org.openpnp.model.Location derive(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(null, null, null, $stack18)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>",
  "line": "99"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0)",
"location": {
  "file": "",
  "class": "org.openpnp.machine.reference.vision.ReferenceBottomVision",
  "method": "<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>",
  "line": "192"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, wantedLocation = virtualinvoke this.<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.model.Location getCameraLocationAtPartHeight(org.openpnp.model.Part,org.openpnp.spi.Camera,org.openpnp.spi.Nozzle,double)>(part, camera, nozzle, 0.0), 192)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "location := @parameter1: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "location := @parameter1: org.openpnp.model.Location",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double)>(location, speed)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "23"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double)>(location, speed), 23)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Machine getMachine()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "27"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, $stack3 = interfaceinvoke $stack2.<org.openpnp.spi.Head: org.openpnp.spi.Machine getMachine()>(), 27)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: double getSpeed()>()",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>",
  "line": "27"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, $stack4 = interfaceinvoke $stack3.<org.openpnp.spi.Machine: double getSpeed()>(), 27)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "speed := @parameter2: double",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "-1"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double)>(location, speed)",
"location": {
  "file": "",
  "class": "org.openpnp.util.MovableUtils",
  "method": "<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>",
  "line": "23"
},
"stackTrace": ["(<org.openpnp.machine.reference.vision.ReferenceBottomVision: org.openpnp.spi.PartAlignment$PartAlignmentOffset findOffsetsPostRotate(org.openpnp.model.Part,org.openpnp.model.BoardLocation,org.openpnp.model.Location,org.openpnp.spi.Nozzle,org.openpnp.spi.Camera,org.openpnp.machine.reference.vision.ReferenceBottomVision$PartSettings)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>(nozzle, wantedLocation), 194)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location)>, staticinvoke <org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>(hm, location, $stack4), 27)","(<org.openpnp.util.MovableUtils: void moveToLocationAtSafeZ(org.openpnp.spi.HeadMountable,org.openpnp.model.Location,double)>, interfaceinvoke hm.<org.openpnp.spi.HeadMountable: void moveTo(org.openpnp.model.Location,double)>(location, speed), 23)"]
}]
}
}

]
