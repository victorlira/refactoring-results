Running soot scenario rival;net.recommenders.rival.split.splitter.CrossValidationSplitter;split(DataModel<Long,Long>);aefae91d1ce70013519cfa0bc0132c5279c0fb2c
Running ConflictDetectionAlgorithm{name='Confluence Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/rival/aefae91d1ce70013519cfa0bc0132c5279c0fb2c/original-without-dependencies/rival-split-0.3-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot Confluence 1 Inter 0,53300
Time to perform Confluence 1 Inter 0,65800
Configure Soot Confluence 2 Inter 0,15600
Time to perform Confluence 2 Inter 0,20400
Visited methods: 4
Depth limit: 5
CONFLICTS: [SOURCE=>BASE: Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,n = interfaceinvoke $stack47.<java.util.Set: java.util.Iterator iterator()>(),79,SourceNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, n = interfaceinvoke $stack47.<java.util.Set: java.util.Iterator iterator()>(), 79)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,user = interfaceinvoke n.<java.util.Iterator: java.lang.Object next()>(),120,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, user = interfaceinvoke n.<java.util.Iterator: java.lang.Object next()>(), 120)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,$stack63 = interfaceinvoke $stack62.<java.util.Map: java.lang.Object get(java.lang.Object)>(user),83,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, $stack63 = interfaceinvoke $stack62.<java.util.Map: java.lang.Object get(java.lang.Object)>(user), 83)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,$stack64 = (java.util.Map) $stack63,83,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, $stack64 = (java.util.Map) $stack63, 83)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,$stack65 = interfaceinvoke $stack64.<java.util.Map: java.lang.Object get(java.lang.Object)>(item),83,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, $stack65 = interfaceinvoke $stack64.<java.util.Map: java.lang.Object get(java.lang.Object)>(item), 83))
SINK=>BASE: Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,items#6 = interfaceinvoke items.<java.util.List: java.util.Iterator iterator()>(),82,SourceNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, items#6 = interfaceinvoke items.<java.util.List: java.util.Iterator iterator()>(), 82)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,item = interfaceinvoke items#6.<java.util.Iterator: java.lang.Object next()>(),96,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, item = interfaceinvoke items#6.<java.util.Iterator: java.lang.Object next()>(), 96)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,$stack65 = interfaceinvoke $stack64.<java.util.Map: java.lang.Object get(java.lang.Object)>(item),83,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, $stack65 = interfaceinvoke $stack64.<java.util.Map: java.lang.Object get(java.lang.Object)>(item), 83)), SOURCE=>BASE: Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,i#12 = $stack18,98,SourceNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, i#12 = $stack18, 98)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,user#14 = interfaceinvoke i#12.<java.util.List: java.util.Iterator iterator()>(),101,SourceNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, user#14 = interfaceinvoke i#12.<java.util.List: java.util.Iterator iterator()>(), 101)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,items#15 = interfaceinvoke user#14.<java.util.Iterator: java.lang.Object next()>(),120,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, items#15 = interfaceinvoke user#14.<java.util.Iterator: java.lang.Object next()>(), 120))
SINK=>BASE: Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,n = interfaceinvoke $stack47.<java.util.Set: java.util.Iterator iterator()>(),79,SourceNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, n = interfaceinvoke $stack47.<java.util.Set: java.util.Iterator iterator()>(), 79)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,user = interfaceinvoke n.<java.util.Iterator: java.lang.Object next()>(),120,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, user = interfaceinvoke n.<java.util.Iterator: java.lang.Object next()>(), 120)), SOURCE=>BASE: Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,user#14 = interfaceinvoke i#12.<java.util.List: java.util.Iterator iterator()>(),101,SourceNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, user#14 = interfaceinvoke i#12.<java.util.List: java.util.Iterator iterator()>(), 101)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,items#15 = interfaceinvoke user#14.<java.util.Iterator: java.lang.Object next()>(),120,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, items#15 = interfaceinvoke user#14.<java.util.Iterator: java.lang.Object next()>(), 120)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,interfaceinvoke datamodel.<net.recommenders.rival.core.DataModelIF: void addPreference(java.lang.Object,java.lang.Object,java.lang.Double)>(items#15, pref#18, curFold#19),113,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, interfaceinvoke datamodel.<net.recommenders.rival.core.DataModelIF: void addPreference(java.lang.Object,java.lang.Object,java.lang.Double)>(items#15, pref#18, curFold#19), 113))
SINK=>BASE: Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,user#14 = interfaceinvoke i#12.<java.util.List: java.util.Iterator iterator()>(),101,SourceNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, user#14 = interfaceinvoke i#12.<java.util.List: java.util.Iterator iterator()>(), 101)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,items#15 = interfaceinvoke user#14.<java.util.Iterator: java.lang.Object next()>(),120,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, items#15 = interfaceinvoke user#14.<java.util.Iterator: java.lang.Object next()>(), 120)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,$stack35 = interfaceinvoke $stack34.<java.util.Map: java.lang.Object get(java.lang.Object)>(items#15),105,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, $stack35 = interfaceinvoke $stack34.<java.util.Map: java.lang.Object get(java.lang.Object)>(items#15), 105)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,$stack36 = (java.util.Map) $stack35,105,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, $stack36 = (java.util.Map) $stack35, 105)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,$stack37 = interfaceinvoke $stack36.<java.util.Map: java.lang.Object get(java.lang.Object)>(pref#18),105,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, $stack37 = interfaceinvoke $stack36.<java.util.Map: java.lang.Object get(java.lang.Object)>(pref#18), 105)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,curFold#19 = (java.lang.Double) $stack37,105,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, curFold#19 = (java.lang.Double) $stack37, 105)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,interfaceinvoke datamodel.<net.recommenders.rival.core.DataModelIF: void addPreference(java.lang.Object,java.lang.Object,java.lang.Double)>(items#15, pref#18, curFold#19),113,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, interfaceinvoke datamodel.<net.recommenders.rival.core.DataModelIF: void addPreference(java.lang.Object,java.lang.Object,java.lang.Double)>(items#15, pref#18, curFold#19), 113)), SOURCE=>BASE: Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,i#12 = $stack18,98,SourceNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, i#12 = $stack18, 98)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,user#14 = interfaceinvoke i#12.<java.util.List: java.util.Iterator iterator()>(),101,SourceNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, user#14 = interfaceinvoke i#12.<java.util.List: java.util.Iterator iterator()>(), 101)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,items#15 = interfaceinvoke user#14.<java.util.Iterator: java.lang.Object next()>(),120,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, items#15 = interfaceinvoke user#14.<java.util.Iterator: java.lang.Object next()>(), 120)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,$stack35 = interfaceinvoke $stack34.<java.util.Map: java.lang.Object get(java.lang.Object)>(items#15),105,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, $stack35 = interfaceinvoke $stack34.<java.util.Map: java.lang.Object get(java.lang.Object)>(items#15), 105))
SINK=>BASE: Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,user#14 = interfaceinvoke i#12.<java.util.List: java.util.Iterator iterator()>(),101,SourceNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, user#14 = interfaceinvoke i#12.<java.util.List: java.util.Iterator iterator()>(), 101)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,items#15 = interfaceinvoke user#14.<java.util.Iterator: java.lang.Object next()>(),120,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, items#15 = interfaceinvoke user#14.<java.util.Iterator: java.lang.Object next()>(), 120)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,$stack35 = interfaceinvoke $stack34.<java.util.Map: java.lang.Object get(java.lang.Object)>(items#15),105,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, $stack35 = interfaceinvoke $stack34.<java.util.Map: java.lang.Object get(java.lang.Object)>(items#15), 105)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,$stack36 = (java.util.Map) $stack35,105,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, $stack36 = (java.util.Map) $stack35, 105)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,$stack37 = interfaceinvoke $stack36.<java.util.Map: java.lang.Object get(java.lang.Object)>(pref#18),105,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, $stack37 = interfaceinvoke $stack36.<java.util.Map: java.lang.Object get(java.lang.Object)>(pref#18), 105)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,curFold#19 = (java.lang.Double) $stack37,105,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, curFold#19 = (java.lang.Double) $stack37, 105)), SOURCE=>BASE: Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,n = interfaceinvoke $stack47.<java.util.Set: java.util.Iterator iterator()>(),79,SourceNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, n = interfaceinvoke $stack47.<java.util.Set: java.util.Iterator iterator()>(), 79)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,user = interfaceinvoke n.<java.util.Iterator: java.lang.Object next()>(),120,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, user = interfaceinvoke n.<java.util.Iterator: java.lang.Object next()>(), 120)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,interfaceinvoke datamodel.<net.recommenders.rival.core.DataModelIF: void addPreference(java.lang.Object,java.lang.Object,java.lang.Double)>(user, item, pref),91,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, interfaceinvoke datamodel.<net.recommenders.rival.core.DataModelIF: void addPreference(java.lang.Object,java.lang.Object,java.lang.Double)>(user, item, pref), 91))
SINK=>BASE: Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,n = interfaceinvoke $stack47.<java.util.Set: java.util.Iterator iterator()>(),79,SourceNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, n = interfaceinvoke $stack47.<java.util.Set: java.util.Iterator iterator()>(), 79)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,user = interfaceinvoke n.<java.util.Iterator: java.lang.Object next()>(),120,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, user = interfaceinvoke n.<java.util.Iterator: java.lang.Object next()>(), 120)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,interfaceinvoke datamodel.<net.recommenders.rival.core.DataModelIF: void addPreference(java.lang.Object,java.lang.Object,java.lang.Double)>(user, item, pref),91,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, interfaceinvoke datamodel.<net.recommenders.rival.core.DataModelIF: void addPreference(java.lang.Object,java.lang.Object,java.lang.Double)>(user, item, pref), 91)), SOURCE=>BASE: Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,$stack52 = new java.util.ArrayList,80,SourceNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, specialinvoke $stack52.<java.util.ArrayList: void <init>(java.util.Collection)>($stack56), 80)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,items = $stack52,80,SourceNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, items = $stack52, 80)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,items#6 = interfaceinvoke items.<java.util.List: java.util.Iterator iterator()>(),82,SourceNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, items#6 = interfaceinvoke items.<java.util.List: java.util.Iterator iterator()>(), 82)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,item = interfaceinvoke items#6.<java.util.Iterator: java.lang.Object next()>(),96,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, item = interfaceinvoke items#6.<java.util.Iterator: java.lang.Object next()>(), 96))
SINK=>BASE: Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,items#6 = interfaceinvoke items.<java.util.List: java.util.Iterator iterator()>(),82,SourceNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, items#6 = interfaceinvoke items.<java.util.List: java.util.Iterator iterator()>(), 82)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,item = interfaceinvoke items#6.<java.util.Iterator: java.lang.Object next()>(),96,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, item = interfaceinvoke items#6.<java.util.Iterator: java.lang.Object next()>(), 96)), SOURCE=>BASE: Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,user#14 = interfaceinvoke i#12.<java.util.List: java.util.Iterator iterator()>(),101,SourceNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, user#14 = interfaceinvoke i#12.<java.util.List: java.util.Iterator iterator()>(), 101)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,items#15 = interfaceinvoke user#14.<java.util.Iterator: java.lang.Object next()>(),120,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, items#15 = interfaceinvoke user#14.<java.util.Iterator: java.lang.Object next()>(), 120)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,$stack35 = interfaceinvoke $stack34.<java.util.Map: java.lang.Object get(java.lang.Object)>(items#15),105,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, $stack35 = interfaceinvoke $stack34.<java.util.Map: java.lang.Object get(java.lang.Object)>(items#15), 105)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,$stack36 = (java.util.Map) $stack35,105,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, $stack36 = (java.util.Map) $stack35, 105)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,$stack37 = interfaceinvoke $stack36.<java.util.Map: java.lang.Object get(java.lang.Object)>(pref#18),105,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, $stack37 = interfaceinvoke $stack36.<java.util.Map: java.lang.Object get(java.lang.Object)>(pref#18), 105)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,curFold#19 = (java.lang.Double) $stack37,105,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, curFold#19 = (java.lang.Double) $stack37, 105)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,if curFold#19 == null goto datamodel#21 = datamodel#21 + 1,112,SinkNode, path: )
SINK=>BASE: Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,user#14 = interfaceinvoke i#12.<java.util.List: java.util.Iterator iterator()>(),101,SourceNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, user#14 = interfaceinvoke i#12.<java.util.List: java.util.Iterator iterator()>(), 101)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,items#15 = interfaceinvoke user#14.<java.util.Iterator: java.lang.Object next()>(),120,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, items#15 = interfaceinvoke user#14.<java.util.Iterator: java.lang.Object next()>(), 120)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,$stack35 = interfaceinvoke $stack34.<java.util.Map: java.lang.Object get(java.lang.Object)>(items#15),105,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, $stack35 = interfaceinvoke $stack34.<java.util.Map: java.lang.Object get(java.lang.Object)>(items#15), 105)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,$stack36 = (java.util.Map) $stack35,105,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, $stack36 = (java.util.Map) $stack35, 105)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,$stack37 = interfaceinvoke $stack36.<java.util.Map: java.lang.Object get(java.lang.Object)>(pref#18),105,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, $stack37 = interfaceinvoke $stack36.<java.util.Map: java.lang.Object get(java.lang.Object)>(pref#18), 105)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,curFold#19 = (java.lang.Double) $stack37,105,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, curFold#19 = (java.lang.Double) $stack37, 105)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,if curFold#19 == null goto datamodel#21 = datamodel#21 + 1,112,SinkNode, path: ), SOURCE=>BASE: Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,n = interfaceinvoke $stack47.<java.util.Set: java.util.Iterator iterator()>(),79,SourceNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, n = interfaceinvoke $stack47.<java.util.Set: java.util.Iterator iterator()>(), 79)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,user = interfaceinvoke n.<java.util.Iterator: java.lang.Object next()>(),120,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, user = interfaceinvoke n.<java.util.Iterator: java.lang.Object next()>(), 120)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,$stack63 = interfaceinvoke $stack62.<java.util.Map: java.lang.Object get(java.lang.Object)>(user),83,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, $stack63 = interfaceinvoke $stack62.<java.util.Map: java.lang.Object get(java.lang.Object)>(user), 83)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,$stack64 = (java.util.Map) $stack63,83,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, $stack64 = (java.util.Map) $stack63, 83)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,$stack65 = interfaceinvoke $stack64.<java.util.Map: java.lang.Object get(java.lang.Object)>(item),83,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, $stack65 = interfaceinvoke $stack64.<java.util.Map: java.lang.Object get(java.lang.Object)>(item), 83))
SINK=>BASE: Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,n = interfaceinvoke $stack47.<java.util.Set: java.util.Iterator iterator()>(),79,SourceNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, n = interfaceinvoke $stack47.<java.util.Set: java.util.Iterator iterator()>(), 79)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,user = interfaceinvoke n.<java.util.Iterator: java.lang.Object next()>(),120,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, user = interfaceinvoke n.<java.util.Iterator: java.lang.Object next()>(), 120)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,$stack63 = interfaceinvoke $stack62.<java.util.Map: java.lang.Object get(java.lang.Object)>(user),83,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, $stack63 = interfaceinvoke $stack62.<java.util.Map: java.lang.Object get(java.lang.Object)>(user), 83)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,$stack64 = (java.util.Map) $stack63,83,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, $stack64 = (java.util.Map) $stack63, 83)), SOURCE=>BASE: Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,items#6 = interfaceinvoke items.<java.util.List: java.util.Iterator iterator()>(),82,SourceNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, items#6 = interfaceinvoke items.<java.util.List: java.util.Iterator iterator()>(), 82)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,item = interfaceinvoke items#6.<java.util.Iterator: java.lang.Object next()>(),96,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, item = interfaceinvoke items#6.<java.util.Iterator: java.lang.Object next()>(), 96)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,$stack65 = interfaceinvoke $stack64.<java.util.Map: java.lang.Object get(java.lang.Object)>(item),83,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, $stack65 = interfaceinvoke $stack64.<java.util.Map: java.lang.Object get(java.lang.Object)>(item), 83)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,pref = (java.lang.Double) $stack65,83,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, pref = (java.lang.Double) $stack65, 83)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,if pref == null goto i#10 = i#10 + 1,90,SinkNode, path: )
SINK=>BASE: Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,n = interfaceinvoke $stack47.<java.util.Set: java.util.Iterator iterator()>(),79,SourceNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, n = interfaceinvoke $stack47.<java.util.Set: java.util.Iterator iterator()>(), 79)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,user = interfaceinvoke n.<java.util.Iterator: java.lang.Object next()>(),120,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, user = interfaceinvoke n.<java.util.Iterator: java.lang.Object next()>(), 120)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,$stack63 = interfaceinvoke $stack62.<java.util.Map: java.lang.Object get(java.lang.Object)>(user),83,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, $stack63 = interfaceinvoke $stack62.<java.util.Map: java.lang.Object get(java.lang.Object)>(user), 83)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,$stack64 = (java.util.Map) $stack63,83,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, $stack64 = (java.util.Map) $stack63, 83)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,$stack65 = interfaceinvoke $stack64.<java.util.Map: java.lang.Object get(java.lang.Object)>(item),83,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, $stack65 = interfaceinvoke $stack64.<java.util.Map: java.lang.Object get(java.lang.Object)>(item), 83)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,pref = (java.lang.Double) $stack65,83,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, pref = (java.lang.Double) $stack65, 83)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,if pref == null goto i#10 = i#10 + 1,90,SinkNode, path: ), SOURCE=>BASE: Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,user#14 = interfaceinvoke i#12.<java.util.List: java.util.Iterator iterator()>(),101,SourceNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, user#14 = interfaceinvoke i#12.<java.util.List: java.util.Iterator iterator()>(), 101)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,items#15 = interfaceinvoke user#14.<java.util.Iterator: java.lang.Object next()>(),120,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, items#15 = interfaceinvoke user#14.<java.util.Iterator: java.lang.Object next()>(), 120)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,$stack26 = interfaceinvoke $stack25.<java.util.Map: java.lang.Object get(java.lang.Object)>(items#15),102,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, $stack26 = interfaceinvoke $stack25.<java.util.Map: java.lang.Object get(java.lang.Object)>(items#15), 102)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,$stack27 = (java.util.Map) $stack26,102,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, $stack27 = (java.util.Map) $stack26, 102))
SINK=>BASE: Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,user#14 = interfaceinvoke i#12.<java.util.List: java.util.Iterator iterator()>(),101,SourceNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, user#14 = interfaceinvoke i#12.<java.util.List: java.util.Iterator iterator()>(), 101)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,items#15 = interfaceinvoke user#14.<java.util.Iterator: java.lang.Object next()>(),120,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, items#15 = interfaceinvoke user#14.<java.util.Iterator: java.lang.Object next()>(), 120)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,$stack26 = interfaceinvoke $stack25.<java.util.Map: java.lang.Object get(java.lang.Object)>(items#15),102,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, $stack26 = interfaceinvoke $stack25.<java.util.Map: java.lang.Object get(java.lang.Object)>(items#15), 102)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,$stack27 = (java.util.Map) $stack26,102,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, $stack27 = (java.util.Map) $stack26, 102)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,$stack28 = interfaceinvoke $stack27.<java.util.Map: java.util.Set keySet()>(),102,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, $stack28 = interfaceinvoke $stack27.<java.util.Map: java.util.Set keySet()>(), 102)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,specialinvoke $stack24.<java.util.ArrayList: void <init>(java.util.Collection)>($stack28),102,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, specialinvoke $stack24.<java.util.ArrayList: void <init>(java.util.Collection)>($stack28), 102)), SOURCE=>BASE: Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,items#6 = interfaceinvoke items.<java.util.List: java.util.Iterator iterator()>(),82,SourceNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, items#6 = interfaceinvoke items.<java.util.List: java.util.Iterator iterator()>(), 82)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,item = interfaceinvoke items#6.<java.util.Iterator: java.lang.Object next()>(),96,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, item = interfaceinvoke items#6.<java.util.Iterator: java.lang.Object next()>(), 96)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,$stack65 = interfaceinvoke $stack64.<java.util.Map: java.lang.Object get(java.lang.Object)>(item),83,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, $stack65 = interfaceinvoke $stack64.<java.util.Map: java.lang.Object get(java.lang.Object)>(item), 83)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,pref = (java.lang.Double) $stack65,83,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, pref = (java.lang.Double) $stack65, 83)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,if pref == null goto i#10 = i#10 + 1,90,SinkNode, path: )
SINK=>BASE: Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,items#6 = interfaceinvoke items.<java.util.List: java.util.Iterator iterator()>(),82,SourceNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, items#6 = interfaceinvoke items.<java.util.List: java.util.Iterator iterator()>(), 82)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,item = interfaceinvoke items#6.<java.util.Iterator: java.lang.Object next()>(),96,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, item = interfaceinvoke items#6.<java.util.Iterator: java.lang.Object next()>(), 96)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,$stack65 = interfaceinvoke $stack64.<java.util.Map: java.lang.Object get(java.lang.Object)>(item),83,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, $stack65 = interfaceinvoke $stack64.<java.util.Map: java.lang.Object get(java.lang.Object)>(item), 83)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,pref = (java.lang.Double) $stack65,83,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, pref = (java.lang.Double) $stack65, 83)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,if pref == null goto i#10 = i#10 + 1,90,SinkNode, path: ), SOURCE=>BASE: Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,n = interfaceinvoke $stack47.<java.util.Set: java.util.Iterator iterator()>(),79,SourceNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, n = interfaceinvoke $stack47.<java.util.Set: java.util.Iterator iterator()>(), 79)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,user = interfaceinvoke n.<java.util.Iterator: java.lang.Object next()>(),120,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, user = interfaceinvoke n.<java.util.Iterator: java.lang.Object next()>(), 120)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,interfaceinvoke datamodel.<net.recommenders.rival.core.DataModelIF: void addPreference(java.lang.Object,java.lang.Object,java.lang.Double)>(user, item, pref),91,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, interfaceinvoke datamodel.<net.recommenders.rival.core.DataModelIF: void addPreference(java.lang.Object,java.lang.Object,java.lang.Double)>(user, item, pref), 91))
SINK=>BASE: Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,items#6 = interfaceinvoke items.<java.util.List: java.util.Iterator iterator()>(),82,SourceNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, items#6 = interfaceinvoke items.<java.util.List: java.util.Iterator iterator()>(), 82)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,item = interfaceinvoke items#6.<java.util.Iterator: java.lang.Object next()>(),96,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, item = interfaceinvoke items#6.<java.util.Iterator: java.lang.Object next()>(), 96)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,$stack65 = interfaceinvoke $stack64.<java.util.Map: java.lang.Object get(java.lang.Object)>(item),83,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, $stack65 = interfaceinvoke $stack64.<java.util.Map: java.lang.Object get(java.lang.Object)>(item), 83)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,pref = (java.lang.Double) $stack65,83,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, pref = (java.lang.Double) $stack65, 83)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,interfaceinvoke datamodel.<net.recommenders.rival.core.DataModelIF: void addPreference(java.lang.Object,java.lang.Object,java.lang.Double)>(user, item, pref),91,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, interfaceinvoke datamodel.<net.recommenders.rival.core.DataModelIF: void addPreference(java.lang.Object,java.lang.Object,java.lang.Double)>(user, item, pref), 91)), SOURCE=>BASE: Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,i#12 = $stack18,98,SourceNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, i#12 = $stack18, 98)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,user#14 = interfaceinvoke i#12.<java.util.List: java.util.Iterator iterator()>(),101,SourceNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, user#14 = interfaceinvoke i#12.<java.util.List: java.util.Iterator iterator()>(), 101)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,items#15 = interfaceinvoke user#14.<java.util.Iterator: java.lang.Object next()>(),120,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, items#15 = interfaceinvoke user#14.<java.util.Iterator: java.lang.Object next()>(), 120))
SINK=>BASE: Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,user#14 = interfaceinvoke i#12.<java.util.List: java.util.Iterator iterator()>(),101,SourceNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, user#14 = interfaceinvoke i#12.<java.util.List: java.util.Iterator iterator()>(), 101)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,items#15 = interfaceinvoke user#14.<java.util.Iterator: java.lang.Object next()>(),120,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, items#15 = interfaceinvoke user#14.<java.util.Iterator: java.lang.Object next()>(), 120))]
Confluence interference in <net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>
Confluence flows from execution of lines 79 and 82 to line 83, defined in n = interfaceinvoke $stack47.<java.util.Set: java.util.Iterator iterator()>() and items#6 = interfaceinvoke items.<java.util.List: java.util.Iterator iterator()>() and used in $stack65 = interfaceinvoke $stack64.<java.util.Map: java.lang.Object get(java.lang.Object)>(item)
Caused by line 79 flow: path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, n = interfaceinvoke $stack47.<java.util.Set: java.util.Iterator iterator()>(), 79)
Caused by line 82 flow: path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, items#6 = interfaceinvoke items.<java.util.List: java.util.Iterator iterator()>(), 82)
Caused by line 83 flow: path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, $stack65 = interfaceinvoke $stack64.<java.util.Map: java.lang.Object get(java.lang.Object)>(item), 83)
Confluence interference in <net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>
Confluence flows from execution of lines 98 and 79 to line 120, defined in i#12 = $stack18 and n = interfaceinvoke $stack47.<java.util.Set: java.util.Iterator iterator()>() and used in user = interfaceinvoke n.<java.util.Iterator: java.lang.Object next()>()
Caused by line 98 flow: path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, i#12 = $stack18, 98)
Caused by line 79 flow: path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, n = interfaceinvoke $stack47.<java.util.Set: java.util.Iterator iterator()>(), 79)
Caused by line 120 flow: path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, user = interfaceinvoke n.<java.util.Iterator: java.lang.Object next()>(), 120)
Confluence interference in <net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>
Confluence flows from execution of lines 101 and 101 to line 113, defined in user#14 = interfaceinvoke i#12.<java.util.List: java.util.Iterator iterator()>() and user#14 = interfaceinvoke i#12.<java.util.List: java.util.Iterator iterator()>() and used in interfaceinvoke datamodel.<net.recommenders.rival.core.DataModelIF: void addPreference(java.lang.Object,java.lang.Object,java.lang.Double)>(items#15, pref#18, curFold#19)
Caused by line 101 flow: path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, user#14 = interfaceinvoke i#12.<java.util.List: java.util.Iterator iterator()>(), 101)
Caused by line 101 flow: path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, user#14 = interfaceinvoke i#12.<java.util.List: java.util.Iterator iterator()>(), 101)
Caused by line 113 flow: path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, interfaceinvoke datamodel.<net.recommenders.rival.core.DataModelIF: void addPreference(java.lang.Object,java.lang.Object,java.lang.Double)>(items#15, pref#18, curFold#19), 113)
Confluence interference in <net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>
Confluence flows from execution of lines 98 and 101 to line 105, defined in i#12 = $stack18 and user#14 = interfaceinvoke i#12.<java.util.List: java.util.Iterator iterator()>() and used in curFold#19 = (java.lang.Double) $stack37
Caused by line 98 flow: path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, i#12 = $stack18, 98)
Caused by line 101 flow: path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, user#14 = interfaceinvoke i#12.<java.util.List: java.util.Iterator iterator()>(), 101)
Caused by line 105 flow: path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, curFold#19 = (java.lang.Double) $stack37, 105)
Confluence interference in <net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>
Confluence flows from execution of lines 79 and 79 to line 91, defined in n = interfaceinvoke $stack47.<java.util.Set: java.util.Iterator iterator()>() and n = interfaceinvoke $stack47.<java.util.Set: java.util.Iterator iterator()>() and used in interfaceinvoke datamodel.<net.recommenders.rival.core.DataModelIF: void addPreference(java.lang.Object,java.lang.Object,java.lang.Double)>(user, item, pref)
Caused by line 79 flow: path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, n = interfaceinvoke $stack47.<java.util.Set: java.util.Iterator iterator()>(), 79)
Caused by line 79 flow: path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, n = interfaceinvoke $stack47.<java.util.Set: java.util.Iterator iterator()>(), 79)
Caused by line 91 flow: path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, interfaceinvoke datamodel.<net.recommenders.rival.core.DataModelIF: void addPreference(java.lang.Object,java.lang.Object,java.lang.Double)>(user, item, pref), 91)
Confluence interference in <net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>
Confluence flows from execution of lines 80 and 82 to line 96, defined in specialinvoke $stack52.<java.util.ArrayList: void <init>(java.util.Collection)>($stack56) and items#6 = interfaceinvoke items.<java.util.List: java.util.Iterator iterator()>() and used in item = interfaceinvoke items#6.<java.util.Iterator: java.lang.Object next()>()
Caused by line 80 flow: path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, specialinvoke $stack52.<java.util.ArrayList: void <init>(java.util.Collection)>($stack56), 80)
Caused by line 82 flow: path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, items#6 = interfaceinvoke items.<java.util.List: java.util.Iterator iterator()>(), 82)
Caused by line 96 flow: path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, item = interfaceinvoke items#6.<java.util.Iterator: java.lang.Object next()>(), 96)
java.util.NoSuchElementException: head of empty list
	at scala.collection.immutable.Nil$.head(List.scala:430)
	at scala.collection.immutable.Nil$.head(List.scala:427)
	at scala.collection.generic.TraversableForwarder.head(TraversableForwarder.scala:59)
	at scala.collection.generic.TraversableForwarder.head$(TraversableForwarder.scala:59)
	at scala.collection.mutable.ListBuffer.head(ListBuffer.scala:47)
	at br.unb.cic.analysis.svfa.confluence.DFPConfluenceAnalysis.reportConflictsConfluence(DFPConfluenceAnalysis.java:181)
	at br.unb.cic.analysis.Main.runDFPConfluenceAnalysis(Main.java:566)
	at br.unb.cic.analysis.Main.runAnalysis(Main.java:243)
	at br.unb.cic.analysis.Main.main(Main.java:80)
Running ConflictDetectionAlgorithm{name='OA Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/rival/aefae91d1ce70013519cfa0bc0132c5279c0fb2c/original-without-dependencies/rival-split-0.3-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Depth limit: 5
Configure Soot OA Inter 0,52300
Runtime: 0.02s
Time to perform OA Inter 0,59700
OA Inter Visited methods: 2
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/rival/aefae91d1ce70013519cfa0bc0132c5279c0fb2c/original-without-dependencies/rival-split-0.3-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,60000
Time to perform DFP Inter 0,51200
Depth limit: 5
CONFLICTS: []
Visited methods: 2
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/rival/aefae91d1ce70013519cfa0bc0132c5279c0fb2c/original-without-dependencies/rival-split-0.3-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,39200
Time to perform DFP Inter 0,47000
Depth limit: 5
CONFLICTS: DF interference in <net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>
Data flows from execution of line 79 to 80, defined in n = interfaceinvoke $stack47.<java.util.Set: java.util.Iterator iterator()>() and propagated in $stack55 = (java.util.Map) $stack54
Caused by line 79 flow: path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, n = interfaceinvoke $stack47.<java.util.Set: java.util.Iterator iterator()>(), 79)
Caused by line 80 flow: path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, $stack55 = (java.util.Map) $stack54, 80)
[List(Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,n = interfaceinvoke $stack47.<java.util.Set: java.util.Iterator iterator()>(),79,SourceNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, n = interfaceinvoke $stack47.<java.util.Set: java.util.Iterator iterator()>(), 79)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,user = interfaceinvoke n.<java.util.Iterator: java.lang.Object next()>(),120,SimpleNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, user = interfaceinvoke n.<java.util.Iterator: java.lang.Object next()>(), 120)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,$stack54 = interfaceinvoke $stack53.<java.util.Map: java.lang.Object get(java.lang.Object)>(user),80,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, $stack54 = interfaceinvoke $stack53.<java.util.Map: java.lang.Object get(java.lang.Object)>(user), 80)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,$stack55 = (java.util.Map) $stack54,80,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, $stack55 = (java.util.Map) $stack54, 80)))]
Visited methods: 1
 Analysis results
----------------------------
 Number of conflicts: 1
 Results exported to out.txt
Error getting the previous content of the JSON file out.json
 JSON Results exported to out.json
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/rival/aefae91d1ce70013519cfa0bc0132c5279c0fb2c/original-without-dependencies/rival-split-0.3-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,37700
Time to perform PDG 0,99000
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/rival/aefae91d1ce70013519cfa0bc0132c5279c0fb2c/original-without-dependencies/rival-split-0.3-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,48900
Time to perform PDG 0,59900
CONFLICTS: [List(Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,$stack59 = interfaceinvoke items#6.<java.util.Iterator: boolean hasNext()>(),82,SourceNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, $stack59 = interfaceinvoke items#6.<java.util.Iterator: boolean hasNext()>(), 82)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,if $stack59 == 0 goto (branch),82,SourceNode, path: ) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,$stack66 = this.<net.recommenders.rival.split.splitter.CrossValidationSplitter: int nFolds>,84,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, $stack66 = this.<net.recommenders.rival.split.splitter.CrossValidationSplitter: int nFolds>, 84)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,curFold = i % $stack66,84,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, curFold = i % $stack66, 84))), List(Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,if $stack49 == 0 goto (branch),79,SourceNode, path: ) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,$stack52 = new java.util.ArrayList,80,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, specialinvoke $stack52.<java.util.ArrayList: void <init>(java.util.Collection)>($stack56), 80)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,items = $stack52,80,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, items = $stack52, 80)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,items#6 = interfaceinvoke items.<java.util.List: java.util.Iterator iterator()>(),82,SourceNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, items#6 = interfaceinvoke items.<java.util.List: java.util.Iterator iterator()>(), 82)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,$stack59 = interfaceinvoke items#6.<java.util.Iterator: boolean hasNext()>(),82,SourceNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, $stack59 = interfaceinvoke items#6.<java.util.Iterator: boolean hasNext()>(), 82)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,if $stack59 == 0 goto (branch),82,SourceNode, path: ) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,if i#10 >= $stack67 goto i = i + 1,85,SimpleNode, path: ) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,datamodel = splits[$stack69],86,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, datamodel = splits[$stack69], 86))), List(Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,$stack59 = interfaceinvoke items#6.<java.util.Iterator: boolean hasNext()>(),82,SourceNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, $stack59 = interfaceinvoke items#6.<java.util.Iterator: boolean hasNext()>(), 82)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,if $stack59 == 0 goto (branch),82,SourceNode, path: ) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,i = i + 1,94,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, curFold = i % $stack66, 84))), List(Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,if $stack49 == 0 goto (branch),79,SourceNode, path: ) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,$stack52 = new java.util.ArrayList,80,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, specialinvoke $stack52.<java.util.ArrayList: void <init>(java.util.Collection)>($stack56), 80)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,items = $stack52,80,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, items = $stack52, 80)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,items#6 = interfaceinvoke items.<java.util.List: java.util.Iterator iterator()>(),82,SourceNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, items#6 = interfaceinvoke items.<java.util.List: java.util.Iterator iterator()>(), 82)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,$stack59 = interfaceinvoke items#6.<java.util.Iterator: boolean hasNext()>(),82,SourceNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, $stack59 = interfaceinvoke items#6.<java.util.Iterator: boolean hasNext()>(), 82)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,if $stack59 == 0 goto (branch),82,SourceNode, path: ) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,i = i + 1,94,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, curFold = i % $stack66, 84))), List(Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,$stack59 = interfaceinvoke items#6.<java.util.Iterator: boolean hasNext()>(),82,SourceNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, $stack59 = interfaceinvoke items#6.<java.util.Iterator: boolean hasNext()>(), 82)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,if $stack59 == 0 goto (branch),82,SourceNode, path: ) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,if i#10 >= $stack67 goto i = i + 1,85,SimpleNode, path: ) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,datamodel = splits[$stack69],86,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, datamodel = splits[$stack69], 86))), List(Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,if $stack49 == 0 goto (branch),79,SourceNode, path: ) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,$stack52 = new java.util.ArrayList,80,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, specialinvoke $stack52.<java.util.ArrayList: void <init>(java.util.Collection)>($stack56), 80))), List(Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,if $stack49 == 0 goto (branch),79,SourceNode, path: ) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,$stack52 = new java.util.ArrayList,80,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, specialinvoke $stack52.<java.util.ArrayList: void <init>(java.util.Collection)>($stack56), 80)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,items = $stack52,80,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, items = $stack52, 80)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,items#6 = interfaceinvoke items.<java.util.List: java.util.Iterator iterator()>(),82,SourceNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, items#6 = interfaceinvoke items.<java.util.List: java.util.Iterator iterator()>(), 82)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,$stack59 = interfaceinvoke items#6.<java.util.Iterator: boolean hasNext()>(),82,SourceNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, $stack59 = interfaceinvoke items#6.<java.util.Iterator: boolean hasNext()>(), 82)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,if $stack59 == 0 goto (branch),82,SourceNode, path: ) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,$stack66 = this.<net.recommenders.rival.split.splitter.CrossValidationSplitter: int nFolds>,84,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, $stack66 = this.<net.recommenders.rival.split.splitter.CrossValidationSplitter: int nFolds>, 84)) => Node(<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>,curFold = i % $stack66,84,SinkNode, path: (<net.recommenders.rival.split.splitter.CrossValidationSplitter: net.recommenders.rival.core.DataModelIF[] split(net.recommenders.rival.core.DataModelIF)>, curFold = i % $stack66, 84)))]
 Analysis results
----------------------------
 Number of conflicts: 7
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
