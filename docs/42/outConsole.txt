Running soot scenario log-parser-plugin;hudson.plugins.logparser.LogParserParser;parseLogBody(Run<?,?>, BufferedWriter, FilePath, String, int, Logger);a4d0e3ca611eef6567b9ac34a8b8453a35fb4fd8
Running ConflictDetectionAlgorithm{name='Confluence Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/log-parser-plugin/a4d0e3ca611eef6567b9ac34a8b8453a35fb4fd8/original-without-dependencies/log-parser.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot Confluence 1 Inter 0,65800
Time to perform Confluence 1 Inter 0,95100
Configure Soot Confluence 2 Inter 0,28000
Time to perform Confluence 2 Inter 0,50000
Visited methods: 50
Depth limit: 5
CONFLICTS: [SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10),2618,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10), 2618)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2629,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2629)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l13 = lengthof l8,2633,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l13 = lengthof l8, 2633))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2609,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2609)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2616,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2616)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2629,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2629)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l13 = lengthof l8,2633,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l13 = lengthof l8, 2633)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status),252,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status),252,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status),252,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLine = parsedLineColoredAndMarked,254,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLine = parsedLineColoredAndMarked, 254)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,$stack11 = new java.lang.StringBuffer,256,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, specialinvoke $stack11.<java.lang.StringBuffer: void <init>(java.lang.String)>(parsedLine), 256)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored#34 = $stack11,256,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored#34 = $stack11, 256)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,$stack13 = virtualinvoke parsedLineColored#34.<java.lang.StringBuffer: java.lang.String toString()>(),259,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status),365,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status),365,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(),286,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,result = $stack8,285,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, result = $stack8, 285)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(color),288,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(color), 288))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(),286,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,result = $stack8,285,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, result = $stack8, 285)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(color),288,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(color), 288)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l3 = l0 / 100,445,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = l0 / 100, 445))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 = neg l0,440,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l0 = neg l0, 440)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l3 = l0 / 100,445,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = l0 / 100, 445)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,status := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)) => Node(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>,status := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)) => Node(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>,$stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-"),112,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269) => (<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('-'), 112)) => Node(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>,$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status),112,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269) => (<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,status := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)) => Node(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>,status := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)) => Node(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>,$stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-"),112,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269) => (<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('-'), 112)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,shortLink = $stack19,304,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke shortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</a>"),309,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke shortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('</a>'), 309))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,shortLink = $stack19,304,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke shortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</a>"),309,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke shortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('</a>'), 309)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10),2618,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10), 2618)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2629,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2629)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l13 = lengthof l8,2633,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l13 = lengthof l8, 2633)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack28 = l13 - l11,2642,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack28 = l13 - l11, 2642)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack28,2642,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack43,2626,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack39 = l12 + l5,2636,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack39 = l12 + l5, 2636))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2609,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2609)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack39 = l12 + l5,2636,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack39 = l12 + l5, 2636)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack5 = neg l0,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack5 = neg l0, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5),403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack3 = $stack6 + 1,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack3 = $stack6 + 1, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l1 = $stack3,400,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l1 = $stack3, 400)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l2 = newarray (char)[l1],401,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l2 = newarray (char)[l1], 401))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack5 = neg l0,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack5 = neg l0, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5),403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack3 = $stack6 + 1,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack3 = $stack6 + 1, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l1 = $stack3,400,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l1 = $stack3, 400)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l2 = newarray (char)[l1],401,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l2 = newarray (char)[l1], 401)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack16 = l0.<java.lang.String: char[] value>,2572,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack16 = l0.<java.lang.String: char[] value>, 2572))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack16 = l0.<java.lang.String: char[] value>,2572,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack16 = l0.<java.lang.String: char[] value>, 2572)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,shortLink = $stack19,304,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,link = $stack24,311,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, link = $stack24, 311)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack30 = virtualinvoke link.<java.lang.StringBuffer: java.lang.String toString()>(),318,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack30 = virtualinvoke link.<java.lang.StringBuffer: java.lang.String toString()>(), 318)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke linkWriter.<java.io.BufferedWriter: void write(java.lang.String)>($stack30),318,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke linkWriter.<java.io.BufferedWriter: void write(java.lang.String)>($stack30), 318))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,shortLink = $stack19,304,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,link = $stack24,311,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, link = $stack24, 311)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack30 = virtualinvoke link.<java.lang.StringBuffer: java.lang.String toString()>(),318,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack30 = virtualinvoke link.<java.lang.StringBuffer: java.lang.String toString()>(), 318)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(),286,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,result = $stack8,285,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, result = $stack8, 285)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" style=\"color: "),287,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('\' style=\'color: '), 287))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(),286,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,result = $stack8,285,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, result = $stack8, 285)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" style=\"color: "),287,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('\' style=\'color: '), 287)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = newarray (char)[l3],2590,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4#4 = newarray (char)[l3], 2590))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = newarray (char)[l3],2590,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4#4 = newarray (char)[l3], 2590)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2),2575,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5),2579,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5), 2579)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l2 = l2 + $stack73,2579,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l2 = l2 + 1,2584,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2),2575,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5),2579,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5), 2579)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l2 = l2 + $stack73,2579,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l2 = l2 + 1,2584,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke shortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(line),308,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke shortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(line), 308))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke shortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(line),308,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke shortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(line), 308)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10),2618,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10), 2618)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2629,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2629)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack32 = l8[l14#27],2640,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack32 = l8[l14#27], 2640))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2609,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2609)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack41 = l12 + l5,2626,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41),2626,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack43 = $stack42 - l11,2626,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack43 = $stack42 - l11, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack43,2626,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack28,2642,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack31 = l12 + l5,2640,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack31 = l12 + l5, 2640)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack33 = $stack31 + l14#27,2640,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack33 = $stack31 + l14#27, 2640)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack62 = (char) l10,2616,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack62 = (char) l10, 2616))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack62 = (char) l10,2616,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack62 = (char) l10, 2616)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2),2575,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5),2579,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5), 2579)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l2 = l2 + $stack73,2579,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l2,2604,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l12 = l2, 2604))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2),2575,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5),2579,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5), 2579)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l2 = l2 + $stack73,2579,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l2,2604,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l12 = l2, 2604)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(),286,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,result = $stack8,285,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, result = $stack8, 285)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,$stack16 = virtualinvoke result.<java.lang.StringBuffer: java.lang.String toString()>(),292,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(),286,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,result = $stack8,285,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, result = $stack8, 285)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,$stack16 = virtualinvoke result.<java.lang.StringBuffer: java.lang.String toString()>(),292,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2),2575,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5),2579,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5), 2579))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2),2575,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5),2579,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5), 2579)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l2 = l2 + $stack73,2579,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack5 = neg l0,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack5 = neg l0, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5),403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack3 = $stack6 + 1,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack3 = $stack6 + 1, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l1 = $stack3,400,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l1 = $stack3, 400)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l2 = newarray (char)[l1],401,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l2 = newarray (char)[l1], 401)) => Node(<java.lang.String: void <init>(char[],boolean)>,l1 := @parameter0: char[],-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, specialinvoke $stack4.<java.lang.String: void <init>(char[],boolean)>(l2, 1), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack4 = new java.lang.String,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.String: void <init>(char[],boolean)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, specialinvoke $stack4.<java.lang.String: void <init>(char[],boolean)>(l2, 1), 403)) => Node(<java.lang.String: void <init>(char[],boolean)>,l0.<java.lang.String: char[] value> = l1,611,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, specialinvoke $stack4.<java.lang.String: void <init>(char[],boolean)>(l2, 1), 403) => (<java.lang.String: void <init>(char[],boolean)>, l0.<java.lang.String: char[] value> = l1, 611))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack5 = neg l0,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack5 = neg l0, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5),403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack3 = $stack6 + 1,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack3 = $stack6 + 1, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l1 = $stack3,400,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l1 = $stack3, 400)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l2 = newarray (char)[l1],401,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l2 = newarray (char)[l1], 401)) => Node(<java.lang.String: void <init>(char[],boolean)>,l1 := @parameter0: char[],-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, specialinvoke $stack4.<java.lang.String: void <init>(char[],boolean)>(l2, 1), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack4 = new java.lang.String,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.String: void <init>(char[],boolean)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, specialinvoke $stack4.<java.lang.String: void <init>(char[],boolean)>(l2, 1), 403)) => Node(<java.lang.String: void <init>(char[],boolean)>,l0.<java.lang.String: char[] value> = l1,611,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, specialinvoke $stack4.<java.lang.String: void <init>(char[],boolean)>(l2, 1), 403) => (<java.lang.String: void <init>(char[],boolean)>, l0.<java.lang.String: char[] value> = l1, 611)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,shortLink = $stack19,304,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,brShortLink = $stack41,334,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, brShortLink = $stack41, 334)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack44 = virtualinvoke brShortLink.<java.lang.StringBuffer: java.lang.String toString()>(),336,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack44 = virtualinvoke brShortLink.<java.lang.StringBuffer: java.lang.String toString()>(), 336))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,shortLink = $stack19,304,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,brShortLink = $stack41,334,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, brShortLink = $stack41, 334)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack44 = virtualinvoke brShortLink.<java.lang.StringBuffer: java.lang.String toString()>(),336,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack44 = virtualinvoke brShortLink.<java.lang.StringBuffer: java.lang.String toString()>(), 336)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke $stack43.<java.util.ArrayList: boolean add(java.lang.Object)>($stack44),336,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke $stack43.<java.util.ArrayList: boolean add(java.lang.Object)>($stack44), 336)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 = neg l0,440,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l0 = neg l0, 440))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 = neg l0,440,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l0 = neg l0, 440)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack5 = neg l0,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack5 = neg l0, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5),403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack3 = $stack6 + 1,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack3 = $stack6 + 1, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l1 = $stack3,400,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l1 = $stack3, 400)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l2 = newarray (char)[l1],401,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l2 = newarray (char)[l1], 401)) => Node(<java.lang.Integer: java.lang.String toString(int)>,staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2),402,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack5 = neg l0,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack5 = neg l0, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5),403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack3 = $stack6 + 1,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack3 = $stack6 + 1, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l1 = $stack3,400,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l1 = $stack3, 400)) => Node(<java.lang.Integer: java.lang.String toString(int)>,staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2),402,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(),286,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,result = $stack8,285,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, result = $stack8, 285)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\">"),289,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('\'>'), 289))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(),286,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,result = $stack8,285,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, result = $stack8, 285)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\">"),289,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('\'>'), 289)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status),252,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLine = parsedLineColoredAndMarked,254,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLine = parsedLineColoredAndMarked, 254)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,$stack11 = new java.lang.StringBuffer,256,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, specialinvoke $stack11.<java.lang.StringBuffer: void <init>(java.lang.String)>(parsedLine), 256)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored#34 = $stack11,256,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored#34 = $stack11, 256)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,$stack13 = virtualinvoke parsedLineColored#34.<java.lang.StringBuffer: java.lang.String toString()>(),259,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status),252,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLine = parsedLineColoredAndMarked,254,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLine = parsedLineColoredAndMarked, 254)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,$stack11 = new java.lang.StringBuffer,256,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, specialinvoke $stack11.<java.lang.StringBuffer: void <init>(java.lang.String)>(parsedLine), 256)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored#34 = $stack11,256,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored#34 = $stack11, 256)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,$stack13 = virtualinvoke parsedLineColored#34.<java.lang.StringBuffer: java.lang.String toString()>(),259,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l3 = l0 / 100,445,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = l0 / 100, 445)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 = l3,448,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = l0 / 100, 445)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,$stack7 = l0 * 52429,456,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, $stack7 = l0 * 52429, 456)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l3 = $stack7 >>> 19,456,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = $stack7 >>> 19, 456)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 = l3,459,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, $stack7 = l0 * 52429, 456))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 = neg l0,440,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l0 = neg l0, 440)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l3 = l0 / 100,445,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = l0 / 100, 445)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 = l3,448,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = l0 / 100, 445)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,$stack7 = l0 * 52429,456,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, $stack7 = l0 * 52429, 456)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l3 = $stack7 >>> 19,456,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = $stack7 >>> 19, 456)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 = l3,459,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, $stack7 = l0 * 52429, 456)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,status := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber),269,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key),271,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,currentValInteger = (java.lang.Integer) $stack8,271,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)) => Node(<java.lang.Integer: int intValue()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245) => (<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)) => Node(<java.lang.Integer: int intValue()>,$stack1 = l0.<java.lang.Integer: int value>,893,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245) => (<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,status := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber),269,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key),271,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,currentValInteger = (java.lang.Integer) $stack8,271,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)) => Node(<java.lang.Integer: int intValue()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245) => (<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)) => Node(<java.lang.Integer: int intValue()>,$stack1 = l0.<java.lang.Integer: int value>,893,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245) => (<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack29 = virtualinvoke $stack28.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),317,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack29 = virtualinvoke $stack28.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 317)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,linkWriter = (java.io.BufferedWriter) $stack29,317,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, linkWriter = (java.io.BufferedWriter) $stack29, 317)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke linkWriter.<java.io.BufferedWriter: void newLine()>(),319,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke linkWriter.<java.io.BufferedWriter: void newLine()>(), 319))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack29 = virtualinvoke $stack28.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),317,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack29 = virtualinvoke $stack28.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 317)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,linkWriter = (java.io.BufferedWriter) $stack29,317,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, linkWriter = (java.io.BufferedWriter) $stack29, 317)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke linkWriter.<java.io.BufferedWriter: void newLine()>(),319,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke linkWriter.<java.io.BufferedWriter: void newLine()>(), 319)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack25 = (char) l10,2606,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack25 = (char) l10, 2606))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack25 = (char) l10,2606,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack25 = (char) l10, 2606)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,markedLine = $stack31,322,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, markedLine = $stack31, 322)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack36 = virtualinvoke markedLine.<java.lang.StringBuffer: java.lang.String toString()>(),339,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,markedLine = $stack31,322,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, markedLine = $stack31, 322)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack36 = virtualinvoke markedLine.<java.lang.StringBuffer: java.lang.String toString()>(),339,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,shortLink = $stack19,304,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,shortLink = $stack19,304,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status),252,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLine = parsedLineColoredAndMarked,254,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLine = parsedLineColoredAndMarked, 254)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,$stack11 = new java.lang.StringBuffer,256,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, specialinvoke $stack11.<java.lang.StringBuffer: void <init>(java.lang.String)>(parsedLine), 256)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored#34 = $stack11,256,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored#34 = $stack11, 256)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,virtualinvoke parsedLineColored#34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<br/>\n"),258,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke parsedLineColored#34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('<br/>\n'), 258))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status),252,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLine = parsedLineColoredAndMarked,254,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLine = parsedLineColoredAndMarked, 254)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,$stack11 = new java.lang.StringBuffer,256,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, specialinvoke $stack11.<java.lang.StringBuffer: void <init>(java.lang.String)>(parsedLine), 256)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored#34 = $stack11,256,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored#34 = $stack11, 256)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,virtualinvoke parsedLineColored#34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<br/>\n"),258,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke parsedLineColored#34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('<br/>\n'), 258)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,markedLine = $stack31,322,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, markedLine = $stack31, 322)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke markedLine.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"></a></p>"),324,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke markedLine.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('\'></a></p>'), 324))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,markedLine = $stack31,322,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, markedLine = $stack31, 322)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke markedLine.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"></a></p>"),324,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke markedLine.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('\'></a></p>'), 324)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,shortLink = $stack19,304,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,brShortLink = $stack41,334,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, brShortLink = $stack41, 334))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,shortLink = $stack19,304,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,brShortLink = $stack41,334,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, brShortLink = $stack41, 334)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,markedLine = $stack31,322,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, markedLine = $stack31, 322)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke markedLine.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(marker),323,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke markedLine.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(marker), 323))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,markedLine = $stack31,322,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, markedLine = $stack31, 322)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke markedLine.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(marker),323,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke markedLine.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(marker), 323)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2609,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2609)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.ConditionalSpecialCasing: char[] toLowerCaseCharArray(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2624,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.ConditionalSpecialCasing: char[] toLowerCaseCharArray(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2624))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2609,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2609)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.ConditionalSpecialCasing: char[] toLowerCaseCharArray(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2624,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.ConditionalSpecialCasing: char[] toLowerCaseCharArray(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2624)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,status := @parameter2: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack8 = l0.<java.lang.String: char[] value>,982,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack8 = l0.<java.lang.String: char[] value>, 982)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l3 = lengthof $stack8,982,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231) => (<java.lang.String: boolean equals(java.lang.Object)>, l3 = lengthof $stack8, 982)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack12 = l3,987,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack12 = l3, 987))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack8 = l0.<java.lang.String: char[] value>,982,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack8 = l0.<java.lang.String: char[] value>, 982)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l3 = lengthof $stack8,982,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231) => (<java.lang.String: boolean equals(java.lang.Object)>, l3 = lengthof $stack8, 982)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l3 = l3 + -1,987,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack12 = l3, 987)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status),252,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLine = parsedLineColoredAndMarked,254,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLine = parsedLineColoredAndMarked, 254)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,$stack11 = new java.lang.StringBuffer,256,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, specialinvoke $stack11.<java.lang.StringBuffer: void <init>(java.lang.String)>(parsedLine), 256))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status),252,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLine = parsedLineColoredAndMarked,254,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLine = parsedLineColoredAndMarked, 254)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,$stack11 = new java.lang.StringBuffer,256,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, specialinvoke $stack11.<java.lang.StringBuffer: void <init>(java.lang.String)>(parsedLine), 256)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,status := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber),269,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,status := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber),269,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10),2618,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10), 2618)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2629,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2629)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l13 = lengthof l8,2633,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l13 = lengthof l8, 2633)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack28 = l13 - l11,2642,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack28 = l13 - l11, 2642)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack28,2642,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack43,2626,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack53 = l12 + l5,2644,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack53 = l12 + l5, 2644))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2609,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2609)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack41 = l12 + l5,2626,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41),2626,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack43 = $stack42 - l11,2626,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack43 = $stack42 - l11, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack43,2626,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack28,2642,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack53 = l12 + l5,2644,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack53 = l12 + l5, 2644)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack5 = neg l0,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack5 = neg l0, 403))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack5 = neg l0,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack5 = neg l0, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5),403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack3 = $stack6 + 1,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack3 = $stack6 + 1, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l1 = $stack3,400,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l1 = $stack3, 400)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l2 = newarray (char)[l1],401,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l2 = newarray (char)[l1], 401)) => Node(<java.lang.String: void <init>(char[],boolean)>,l1 := @parameter0: char[],-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, specialinvoke $stack4.<java.lang.String: void <init>(char[],boolean)>(l2, 1), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack4 = new java.lang.String,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack5 = neg l0,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack5 = neg l0, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5),403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack3 = $stack6 + 1,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack3 = $stack6 + 1, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l1 = $stack3,400,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l1 = $stack3, 400)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l1 := @parameter1: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l1,435,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l1, 435)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l5 + -1,458,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l5 + -1, 458))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack5 = neg l0,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack5 = neg l0, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5),403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack3 = $stack6 + 1,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack3 = $stack6 + 1, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l1 = $stack3,400,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l1 = $stack3, 400)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l1 := @parameter1: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l1,435,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l1, 435)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l5 + -1,449,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l5 + -1, 449)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l5 + -1,450,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l5 + -1, 449)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l5 + -1,458,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l5 + -1, 458)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(),286,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,result = $stack8,285,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, result = $stack8, 285)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</span>"),291,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('</span>'), 291))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(),286,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,result = $stack8,285,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, result = $stack8, 285)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</span>"),291,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('</span>'), 291)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack29 = virtualinvoke $stack28.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),317,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack29 = virtualinvoke $stack28.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 317))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack29 = virtualinvoke $stack28.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),317,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack29 = virtualinvoke $stack28.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 317)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,linkWriter = (java.io.BufferedWriter) $stack29,317,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, linkWriter = (java.io.BufferedWriter) $stack29, 317)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,status := @parameter2: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack8 = l0.<java.lang.String: char[] value>,982,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack8 = l0.<java.lang.String: char[] value>, 982))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack8 = l0.<java.lang.String: char[] value>,982,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack8 = l0.<java.lang.String: char[] value>, 982)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l3 = lengthof $stack8,982,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231) => (<java.lang.String: boolean equals(java.lang.Object)>, l3 = lengthof $stack8, 982)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,status := @parameter2: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l4 = l0.<java.lang.String: char[] value>,984,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231) => (<java.lang.String: boolean equals(java.lang.Object)>, l4 = l0.<java.lang.String: char[] value>, 984))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l4 = l0.<java.lang.String: char[] value>,984,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231) => (<java.lang.String: boolean equals(java.lang.Object)>, l4 = l0.<java.lang.String: char[] value>, 984)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus),245,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus),245,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack5 = neg l0,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack5 = neg l0, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5),403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack3 = $stack6 + 1,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack3 = $stack6 + 1, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l1 = $stack3,400,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l1 = $stack3, 400)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l1 := @parameter1: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l1,435,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l1, 435)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l5 + -1,458,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l5 + -1, 458)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l5 + -1,463,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l5 + -1, 463))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack5 = neg l0,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack5 = neg l0, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5),403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack3 = $stack6 + 1,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack3 = $stack6 + 1, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l1 = $stack3,400,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l1 = $stack3, 400)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l1 := @parameter1: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l1,435,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l1, 435)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l5 + -1,449,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l5 + -1, 449)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l5 + -1,450,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l5 + -1, 449)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l5 + -1,458,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l5 + -1, 458)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l5 + -1,463,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l5 + -1, 463)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>,status := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>,$stack4 = virtualinvoke $stack3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(status),263,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245) => (<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, $stack4 = virtualinvoke $stack3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(status), 263)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>,$stack5 = (java.lang.Integer) $stack4,263,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245) => (<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, $stack5 = (java.lang.Integer) $stack4, 263))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>,status := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>,$stack4 = virtualinvoke $stack3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(status),263,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245) => (<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, $stack4 = virtualinvoke $stack3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(status), 263)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>,$stack5 = (java.lang.Integer) $stack4,263,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245) => (<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, $stack5 = (java.lang.Integer) $stack4, 263)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19),246,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19),246,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status),252,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLine = parsedLineColoredAndMarked,254,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLine = parsedLineColoredAndMarked, 254)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,$stack11 = new java.lang.StringBuffer,256,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, specialinvoke $stack11.<java.lang.StringBuffer: void <init>(java.lang.String)>(parsedLine), 256)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored#34 = $stack11,256,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored#34 = $stack11, 256)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,$stack13 = virtualinvoke parsedLineColored#34.<java.lang.StringBuffer: java.lang.String toString()>(),259,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status),365,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,virtualinvoke writer.<java.io.BufferedWriter: void write(java.lang.String)>(parsedLine),367,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, virtualinvoke writer.<java.io.BufferedWriter: void write(java.lang.String)>(parsedLine), 367))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status),365,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,virtualinvoke writer.<java.io.BufferedWriter: void write(java.lang.String)>(parsedLine),367,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, virtualinvoke writer.<java.io.BufferedWriter: void write(java.lang.String)>(parsedLine), 367)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10),2618,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10), 2618)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2629,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2629)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l13 = lengthof l8,2633,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l13 = lengthof l8, 2633)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack37 = $stack36 + l13,2635,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack37 = $stack36 + l13, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack38 = $stack37 - l11,2635,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack38 = $stack37 - l11, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2609,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2609)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2616,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2616)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2629,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2629)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l13 = lengthof l8,2633,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l13 = lengthof l8, 2633)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack37 = $stack36 + l13,2635,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack37 = $stack36 + l13, 2635)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($stack1),935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10),2618,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10), 2618)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2629,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2629)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l13 = lengthof l8,2633,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l13 = lengthof l8, 2633)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack37 = $stack36 + l13,2635,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack37 = $stack36 + l13, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack38 = $stack37 - l11,2635,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack38 = $stack37 - l11, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2609,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2609)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2616,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2616)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2629,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2629)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l13 = lengthof l8,2633,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l13 = lengthof l8, 2633)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack37 = $stack36 + l13,2635,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack37 = $stack36 + l13, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack38 = $stack37 - l11,2635,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack38 = $stack37 - l11, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(),286,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,result = $stack8,285,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, result = $stack8, 285)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(line),290,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(line), 290))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(),286,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,result = $stack8,285,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, result = $stack8, 285)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(line),290,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(line), 290)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,status := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber),269,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key),271,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,currentValInteger = (java.lang.Integer) $stack8,271,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)) => Node(<java.lang.Integer: int intValue()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245) => (<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)) => Node(<java.lang.Integer: int intValue()>,$stack1 = l0.<java.lang.Integer: int value>,893,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245) => (<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(),276,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,newVal = $stack9 + 1,276,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,$stack11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(newVal),277,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(newVal), 277))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,status := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber),269,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key),271,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,currentValInteger = (java.lang.Integer) $stack8,271,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)) => Node(<java.lang.Integer: int intValue()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245) => (<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)) => Node(<java.lang.Integer: int intValue()>,$stack1 = l0.<java.lang.Integer: int value>,893,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245) => (<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(),276,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,newVal = $stack9 + 1,276,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,$stack11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(newVal),277,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(newVal), 277)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,virtualinvoke $stack10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, $stack11),277,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, virtualinvoke $stack10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, $stack11), 277)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,$stack16 = virtualinvoke effectiveStatus.<java.lang.String: boolean equals(java.lang.Object)>("NONE"),243,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack16 = virtualinvoke effectiveStatus.<java.lang.String: boolean equals(java.lang.Object)>('NONE'), 243))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,$stack16 = virtualinvoke effectiveStatus.<java.lang.String: boolean equals(java.lang.Object)>("NONE"),243,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack16 = virtualinvoke effectiveStatus.<java.lang.String: boolean equals(java.lang.Object)>('NONE'), 243)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,markedLine = $stack31,322,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, markedLine = $stack31, 322))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,markedLine = $stack31,322,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, markedLine = $stack31, 322)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack5 = neg l0,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack5 = neg l0, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5),403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack3 = $stack6 + 1,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack3 = $stack6 + 1, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l1 = $stack3,400,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l1 = $stack3, 400))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack5 = neg l0,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack5 = neg l0, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5),403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack3 = $stack6 + 1,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack3 = $stack6 + 1, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l1 = $stack3,400,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l1 = $stack3, 400)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,shortLink = $stack19,304,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,link = $stack24,311,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, link = $stack24, 311)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke link.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>(shortLink),313,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke link.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>(shortLink), 313))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,shortLink = $stack19,304,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke link.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>(shortLink),313,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke link.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>(shortLink), 313)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2),2575,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack72 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l5),2576,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack72 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l5), 2576))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2),2575,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack72 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l5),2576,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack72 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l5), 2576)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,shortLink = $stack19,304,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke shortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(marker),306,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke shortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(marker), 306))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,shortLink = $stack19,304,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke shortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(marker),306,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke shortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(marker), 306)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,$stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>("START"),231,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,$stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>("START"),231,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,shortLink = $stack19,304,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,link = $stack24,311,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, link = $stack24, 311)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke link.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</li>"),314,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke link.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('</li>'), 314))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,shortLink = $stack19,304,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,link = $stack24,311,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, link = $stack24, 311)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke link.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</li>"),314,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke link.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('</li>'), 314)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack15 = l0.<java.lang.String: char[] value>,2567,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack15 = l0.<java.lang.String: char[] value>, 2567))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack15 = l0.<java.lang.String: char[] value>,2567,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack15 = l0.<java.lang.String: char[] value>, 2567)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l3 = lengthof $stack15,2567,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l3 = lengthof $stack15, 2567)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack5 = neg l0,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack5 = neg l0, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5),403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack3 = $stack6 + 1,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack3 = $stack6 + 1, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l1 = $stack3,400,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l1 = $stack3, 400)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l1 := @parameter1: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l1,435,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l1, 435)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l5 + -1,449,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l5 + -1, 449))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack5 = neg l0,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack5 = neg l0, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5),403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack3 = $stack6 + 1,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack3 = $stack6 + 1, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l1 = $stack3,400,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l1 = $stack3, 400)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l1 := @parameter1: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l1,435,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l1, 435)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l5 + -1,449,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l5 + -1, 449)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,status := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber),269,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key),271,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,status := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber),269,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key),271,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,currentValInteger = (java.lang.Integer) $stack8,271,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(),286,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,result = $stack8,285,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, result = $stack8, 285)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack9),286,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack9), 286))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(),286,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack9),286,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack9), 286)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,markedLine = $stack31,322,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, markedLine = $stack31, 322)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke markedLine.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(line),325,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke markedLine.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(line), 325))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke markedLine.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(line),325,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke markedLine.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(line), 325)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status),252,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLine = parsedLineColoredAndMarked,254,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLine = parsedLineColoredAndMarked, 254))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status),252,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLine = parsedLineColoredAndMarked,254,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLine = parsedLineColoredAndMarked, 254)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10),2618,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10), 2618)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2629,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2629)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l13 = lengthof l8,2633,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l13 = lengthof l8, 2633)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack28 = l13 - l11,2642,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack28 = l13 - l11, 2642)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack28,2642,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack43,2626,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack23 = l3 + l5,2647,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack23 = l3 + l5, 2647))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2609,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2609)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack41 = l12 + l5,2626,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41),2626,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack43 = $stack42 - l11,2626,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack43 = $stack42 - l11, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack43,2626,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack28,2642,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack23 = l3 + l5,2647,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack23 = l3 + l5, 2647)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23),2647,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10),2618,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10), 2618)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2629,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2629)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l13 = lengthof l8,2633,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l13 = lengthof l8, 2633)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack28 = l13 - l11,2642,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack28 = l13 - l11, 2642))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2609,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2609)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack41 = l12 + l5,2626,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41),2626,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack43 = $stack42 - l11,2626,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack43 = $stack42 - l11, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack43,2626,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack28,2642,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack15 = new java.lang.StringBuilder,301,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, specialinvoke $stack15.<java.lang.StringBuilder: void <init>()>(), 301))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack15 = new java.lang.StringBuilder,301,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, specialinvoke $stack15.<java.lang.StringBuilder: void <init>()>(), 301)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,shortLink = $stack19,304,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,brShortLink = $stack41,334,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, brShortLink = $stack41, 334)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke brShortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>(shortLink),335,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke brShortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>(shortLink), 335))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,shortLink = $stack19,304,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,brShortLink = $stack41,334,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, brShortLink = $stack41, 334)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke brShortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>(shortLink),335,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke brShortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>(shortLink), 335)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,status := @parameter2: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l4 = l0.<java.lang.String: char[] value>,984,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231) => (<java.lang.String: boolean equals(java.lang.Object)>, l4 = l0.<java.lang.String: char[] value>, 984)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack14 = l4[l6],988,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack14 = l4[l6], 988))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l4 = l0.<java.lang.String: char[] value>,984,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231) => (<java.lang.String: boolean equals(java.lang.Object)>, l4 = l0.<java.lang.String: char[] value>, 984)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack14 = l4[l6],988,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack14 = l4[l6], 988)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,shortLink = $stack19,304,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,link = $stack24,311,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, link = $stack24, 311))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,shortLink = $stack19,304,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,link = $stack24,311,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, link = $stack24, 311)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,$stack7 = virtualinvoke $stack6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(status),281,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(status), 281))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,$stack7 = virtualinvoke $stack6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(status),281,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(status), 281)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l3 = l0 / 100,445,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = l0 / 100, 445)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 = l3,448,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = l0 / 100, 445))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 = neg l0,440,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l0 = neg l0, 440)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l3 = l0 / 100,445,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = l0 / 100, 445)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 = l3,448,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = l0 / 100, 445)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack5 = neg l0,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack5 = neg l0, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5),403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack3 = $stack6 + 1,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack3 = $stack6 + 1, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l1 = $stack3,400,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l1 = $stack3, 400)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l1 := @parameter1: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l1,435,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l1, 435))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack5 = neg l0,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack5 = neg l0, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5),403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack3 = $stack6 + 1,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack3 = $stack6 + 1, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l1 = $stack3,400,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l1 = $stack3, 400)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l1 := @parameter1: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l1,435,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l1, 435)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10),2618,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10), 2618)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2629,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2629))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2609,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2609)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2616,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2616)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2629,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2629)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l3 = l0 / 100,445,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = l0 / 100, 445)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,$stack29 = l3 << 6,447,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, $stack29 = l3 << 6, 447)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,$stack31 = $stack29 + $stack28,447,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, $stack31 = $stack29 + $stack28, 447)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,$stack32 = $stack31 + $stack30,447,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, $stack32 = $stack31 + $stack30, 447))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 = neg l0,440,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l0 = neg l0, 440)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l3 = l0 / 100,445,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = l0 / 100, 445)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,$stack29 = l3 << 6,447,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, $stack29 = l3 << 6, 447)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,shortLink = $stack19,304,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke shortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\">"),307,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke shortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('\'>'), 307))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,shortLink = $stack19,304,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke shortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\">"),307,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke shortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('\'>'), 307)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,shortLink = $stack19,304,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,link = $stack24,311,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, link = $stack24, 311)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke link.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(statusCountStr),312,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke link.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(statusCountStr), 312))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,shortLink = $stack19,304,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,link = $stack24,311,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, link = $stack24, 311)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke link.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(statusCountStr),312,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke link.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(statusCountStr), 312)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l3 = l0 / 100,445,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = l0 / 100, 445)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 = l3,448,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = l0 / 100, 445)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,$stack7 = l0 * 52429,456,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, $stack7 = l0 * 52429, 456)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l3 = $stack7 >>> 19,456,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = $stack7 >>> 19, 456)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,$stack8 = l3 << 1,457,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, $stack8 = l3 << 1, 457))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 = neg l0,440,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l0 = neg l0, 440)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l3 = l0 / 100,445,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = l0 / 100, 445)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 = l3,448,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = l0 / 100, 445)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l4 = l0 - $stack10,457,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l4 = l0 - $stack10, 457)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack5 = neg l0,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack5 = neg l0, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5),403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack3 = $stack6 + 1,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack3 = $stack6 + 1, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l1 = $stack3,400,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l1 = $stack3, 400)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l2 = newarray (char)[l1],401,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l2 = newarray (char)[l1], 401)) => Node(<java.lang.String: void <init>(char[],boolean)>,l1 := @parameter0: char[],-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, specialinvoke $stack4.<java.lang.String: void <init>(char[],boolean)>(l2, 1), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack4 = new java.lang.String,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.String: void <init>(char[],boolean)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, specialinvoke $stack4.<java.lang.String: void <init>(char[],boolean)>(l2, 1), 403)) => Node(<java.lang.String: void <init>(char[],boolean)>,specialinvoke l0.<java.lang.Object: void <init>()>(),609,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, specialinvoke $stack4.<java.lang.String: void <init>(char[],boolean)>(l2, 1), 403) => (<java.lang.String: void <init>(char[],boolean)>, specialinvoke l0.<java.lang.Object: void <init>()>(), 609))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack5 = neg l0,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack5 = neg l0, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5),403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack3 = $stack6 + 1,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack3 = $stack6 + 1, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l1 = $stack3,400,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l1 = $stack3, 400)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l2 = newarray (char)[l1],401,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l2 = newarray (char)[l1], 401)) => Node(<java.lang.String: void <init>(char[],boolean)>,l1 := @parameter0: char[],-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, specialinvoke $stack4.<java.lang.String: void <init>(char[],boolean)>(l2, 1), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack4 = new java.lang.String,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.String: void <init>(char[],boolean)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, specialinvoke $stack4.<java.lang.String: void <init>(char[],boolean)>(l2, 1), 403)) => Node(<java.lang.String: void <init>(char[],boolean)>,specialinvoke l0.<java.lang.Object: void <init>()>(),609,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, specialinvoke $stack4.<java.lang.String: void <init>(char[],boolean)>(l2, 1), 403) => (<java.lang.String: void <init>(char[],boolean)>, specialinvoke l0.<java.lang.Object: void <init>()>(), 609)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l3 = l0 / 100,445,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = l0 / 100, 445)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 = l3,448,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = l0 / 100, 445)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,$stack7 = l0 * 52429,456,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, $stack7 = l0 * 52429, 456)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l3 = $stack7 >>> 19,456,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = $stack7 >>> 19, 456))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 = neg l0,440,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l0 = neg l0, 440)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l3 = l0 / 100,445,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = l0 / 100, 445)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 = l3,448,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = l0 / 100, 445)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,$stack7 = l0 * 52429,456,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, $stack7 = l0 * 52429, 456)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l3 = $stack7 >>> 19,456,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = $stack7 >>> 19, 456)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(),286,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,result = $stack8,285,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, result = $stack8, 285))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(),286,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,result = $stack8,285,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, result = $stack8, 285)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10),2618,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10), 2618))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10),2618,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10), 2618)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10),2618,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10), 2618)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2629,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2629)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l13 = lengthof l8,2633,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l13 = lengthof l8, 2633)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack28 = l13 - l11,2642,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack28 = l13 - l11, 2642)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack28,2642,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack43,2626,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack41 = l12 + l5,2626,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2609,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2609)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack41 = l12 + l5,2626,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41),2626,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack43 = $stack42 - l11,2626,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack43 = $stack42 - l11, 2626)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack16 = l0.<java.lang.String: char[] value>,2572,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack16 = l0.<java.lang.String: char[] value>, 2572)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4 = $stack16[l2],2572,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4 = $stack16[l2], 2572)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack17 = staticinvoke <java.lang.Character: char toLowerCase(char)>(l4),2581,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack17 = staticinvoke <java.lang.Character: char toLowerCase(char)>(l4), 2581))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack16 = l0.<java.lang.String: char[] value>,2572,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack16 = l0.<java.lang.String: char[] value>, 2572)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4 = $stack16[l2],2572,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4 = $stack16[l2], 2572)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack17 = staticinvoke <java.lang.Character: char toLowerCase(char)>(l4),2581,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack17 = staticinvoke <java.lang.Character: char toLowerCase(char)>(l4), 2581)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,status := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber),269,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key),271,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,currentValInteger = (java.lang.Integer) $stack8,271,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)) => Node(<java.lang.Integer: int intValue()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245) => (<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)) => Node(<java.lang.Integer: int intValue()>,$stack1 = l0.<java.lang.Integer: int value>,893,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245) => (<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(),276,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,status := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber),269,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key),271,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,currentValInteger = (java.lang.Integer) $stack8,271,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)) => Node(<java.lang.Integer: int intValue()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245) => (<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)) => Node(<java.lang.Integer: int intValue()>,$stack1 = l0.<java.lang.Integer: int value>,893,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245) => (<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(),276,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,newVal = $stack9 + 1,276,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2609,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2609))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2609,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2609)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack5 = neg l0,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack5 = neg l0, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5),403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack3 = $stack6 + 1,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack3 = $stack6 + 1, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l1 = $stack3,400,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l1 = $stack3, 400)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l1 := @parameter1: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l1,435,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l1, 435)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l5 + -1,449,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l5 + -1, 449)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l5 + -1,450,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l5 + -1, 449))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack5 = neg l0,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack5 = neg l0, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5),403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack3 = $stack6 + 1,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack3 = $stack6 + 1, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l1 = $stack3,400,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l1 = $stack3, 400)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l1 := @parameter1: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l1,435,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l1, 435)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l5 + -1,449,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l5 + -1, 449)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l5 + -1,450,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l5 + -1, 449)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($stack20, 0, l4#4, 0, l2),2595,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($stack20, 0, l4#4, 0, l2), 2595)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,status := @parameter2: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack35 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>("START"),328,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack35 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 328))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,status := @parameter2: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack35 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>("START"),328,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack35 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 328)), SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2),2575,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575))
SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2),2575,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575))]
Confluence interference in <hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>
Confluence flows from execution of lines 351 and 364 to line 365, defined in specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature) and $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54) and used in parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status)
Caused by line 351 flow: path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)
Caused by line 364 flow: path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)
Caused by line 365 flow: path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l13 = lengthof l8, 2633)
Confluence interference in <hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>
Confluence flows from execution of lines 351 and 364 to line 364, defined in specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature) and $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54) and used in $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num)
Caused by line 351 flow: path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)
Caused by line 364 flow: path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)
Caused by line 364 flow: path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = l0 / 100, 445)
Confluence interference in <hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>
Confluence flows from execution of lines 351 and 364 to line 367, defined in specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature) and $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54) and used in virtualinvoke writer.<java.io.BufferedWriter: void write(java.lang.String)>(parsedLine)
Caused by line 351 flow: path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)
Caused by line 364 flow: path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)
Caused by line 367 flow: path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, virtualinvoke writer.<java.io.BufferedWriter: void write(java.lang.String)>(parsedLine), 367)
 Analysis results
----------------------------
 Number of conflicts: 103
 Results exported to out.txt
Error getting the previous content of the JSON file out.json
 JSON Results exported to out.json
----------------------------
Running ConflictDetectionAlgorithm{name='OA Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/log-parser-plugin/a4d0e3ca611eef6567b9ac34a8b8453a35fb4fd8/original-without-dependencies/log-parser.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Depth limit: 5
Configure Soot OA Inter 0,60700
Runtime: 0.033s
Time to perform OA Inter 0,72700
OA Inter Visited methods: 22
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/log-parser-plugin/a4d0e3ca611eef6567b9ac34a8b8453a35fb4fd8/original-without-dependencies/log-parser.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,61300
Time to perform DFP Inter 0,71700
Depth limit: 5
CONFLICTS: DF interference in <hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>
Data flows from execution of line 351 to 364, defined in lineStatusMatches = (java.util.HashMap) $stack36 and propagated in status = (java.lang.String) $stack55
Caused by line 351 flow: path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)
Caused by line 364 flow: path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)
[List(Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)))]
Visited methods: 25
 Analysis results
----------------------------
 Number of conflicts: 1
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/log-parser-plugin/a4d0e3ca611eef6567b9ac34a8b8453a35fb4fd8/original-without-dependencies/log-parser.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,61500
Time to perform DFP Inter 0,75600
Depth limit: 5
CONFLICTS: []
Visited methods: 25
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/log-parser-plugin/a4d0e3ca611eef6567b9ac34a8b8453a35fb4fd8/original-without-dependencies/log-parser.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,43500
Time to perform PDG 0,60200
CONFLICTS: [List(Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)))]
 Analysis results
----------------------------
 Number of conflicts: 1
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/log-parser-plugin/a4d0e3ca611eef6567b9ac34a8b8453a35fb4fd8/original-without-dependencies/log-parser.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,44300
Time to perform PDG 0,48800
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
